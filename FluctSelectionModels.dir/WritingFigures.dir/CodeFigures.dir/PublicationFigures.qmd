---
title: "New Organized Figures"
author: "E.T"
format:
  docx:
    toc: true
    fontsize: 10pt
    fig-cap-location: bottom
    fig-numbering: false  
  html:
    toc: true
  pdf:
    toc: true
    knitr:
      opts_chunk:
        dev: "cairo_png"
        dev.args:
        bg: "white" 
editor: visual
---

> This file contains all plots for publication in sequence.

```{r, echo=FALSE, message=FALSE, warning=FALSE}

setwd("/mnt/pixstor/kingeg-lab/etb68/evogen-sims/FluctSelectionModels.dir/WritingFigures.dir/CodeFigures.dir")

library(forcats)
library(stringi)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)

theme_set(theme_cowplot())
mythemes <- function(){
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
}
```

## 0.Fitness landscapes

### 0.1 Fitness under C = 125

```{r, echo=FALSE,fig.width=8, fig.height=4, warning=FALSE}
#| label: Change in fitness as we shift optimum
#| fig-cap: "Figure L: Change in fitness as the optimum moves away from the phenotype (vertical dashed line). The numbers are the fitness values at given optimum and each point is at 0.5 interval."
#| fig-pos: "H"
# Needed Parameters
C_value <- 125 # Constant to control the steepness
optimum <- seq(-4, 4, by = 0.5)

# Calculating fitness at phenotype zero (hypothetical mean phenotype) for each optimum value
df <- tibble(
  optimum = optimum,
  fitness_at_zero = exp(- (1 / C_value) * (0 - optimum)^2)
)

# Subset the data to include only points every 0.5 interval
df_label <- df %>% 
  filter(round(optimum * 2) == optimum * 2)

# Create the plot
pfitness <- ggplot(df, aes(x = optimum, y = fitness_at_zero)) +
  geom_line(size = 3) +
  geom_vline(xintercept = 0, linetype = "dashed", size = 2, color = "black")+
  geom_point(data = df_label, size = 7, color = "darkred") +
  geom_text(data = df_label, 
            aes(label = round(fitness_at_zero, 3)), 
            vjust = -0.8, hjust = -1, size = 7, angle= 270,color = "darkred") +
  ylim(0.85, 1)+
  labs(
   # title = "Fitness at Phenotype Zero as a Function of Optimum",
    x = "Distance to Optimum",
    y = "Fitness Value"
  ) +
theme_set(theme_classic())+
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 20, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 20, face = "bold"),
        panel.spacing = unit(4, "lines"))

ggsave("Figure1.jpg", plot = pfitness, dpi = 600, width = 20, height = 10, units = "in", path = "../OutputFigures.dir")

print(pfitness)
```

### 0.2. Alternative fitness landascapes

```{r}
##library(tidyverse)

C_values <- seq(25, 200, by = 25)

df <- tidyr::expand_grid(distance = 0:20, C = C_values) %>%
  mutate(
    fitness = exp(-(distance^2) / C),
    C_fac   = factor(C, levels = C_values, ordered = TRUE),
    # small per-C offset for visual separation
    x_off   = scales::rescale(as.integer(C_fac), to = c(-0.18, 0.18)),
    distance_j = distance + x_off
  )

# Okabe–Ito palette (color-blind safe, very distinct)
colors <- c(
  "black",
  "magenta", 
  "skyblue", 
  "grey",
  "firebrick", 
  "blue",
  "orange", 
  "purple"
)
colors <- setNames(colors, levels(df$C_fac))
lt <- c("solid","dashed","dotted","dotdash","longdash","twodash","dotted","dotdash")
names(lt) <- levels(df$C_fac)

ggplot(df, aes(distance_j, fitness,
                colour = C_fac, linetype = C_fac, group = C_fac)) +
  geom_line(linewidth = 0.7) +
  geom_vline(xintercept = 4, linetype = "dashed", linewidth = 0.6, color = "darkred") +
  annotate("text", x = 5.5, y = 1.02, label = "Used Max SD = 4",
           vjust = -0.2, fontface = "bold", size = 5, color = "darkred") +
  scale_colour_manual(values = colors, name = "C") +
  scale_linetype_manual(values = lt, name = "C") +  # same name => one legend
  scale_x_continuous(breaks = 0:20, limits = c(-0.5, 20.5)) +
  scale_y_continuous(limits = c(0, 1.05), expand = expansion(mult = c(0, 0.05))) +
  guides(colour = guide_legend(nrow = 2), linetype = guide_legend(nrow = 2)) +
  labs(x = "Distance |Z - Zopt|", y = "Fitness") +
  theme_classic() +
  theme(legend.position = "bottom")
```

```{r}
breaks <- seq(0, 1, by = 0.05)
C_vals <- seq(25, 200, by = 5)  # denser grid looks smoother
df <- tidyr::expand_grid(distance = 0:5, C = C_vals) %>%
  mutate(fitness01 = exp(-(distance^2) / C))

ggplot(df, aes(x = C, y = distance, z = fitness01)) +
  geom_contour_filled(breaks = breaks) +
  scale_fill_viridis_d(name = "Fitness (0–1)") +
  scale_x_continuous(breaks = seq(25, 200, 25)) +
  scale_y_continuous(breaks = 0:5) +
  labs(x = "C Value (Width)", y = "Distance |p - o|") +
  theme_classic()
```

```{r}

# Intersection point and its fitness 
mark <- tibble(C = 125, distance = 4) %>%
  mutate(fitness01 = exp(-(distance^2) / C))

ggplot(df, aes(x = C, y = distance, z = fitness01)) +
  geom_contour_filled(breaks = breaks) +
  scale_fill_viridis_d(name = "Fitness (0–1)") +
  scale_x_continuous(breaks = seq(25, 200, 25)) +
  scale_y_continuous(breaks = 0:5) +
  geom_vline(xintercept = 125, linetype = "dashed", linewidth = 0.6) +
  geom_hline(yintercept = 4,   linetype = "dashed", linewidth = 0.6) +
  # point at the intersection
  geom_point(data = mark, aes(C, distance), inherit.aes = FALSE,
             shape = 21, size = 3.2, stroke = 1, fill = "white") +
  geom_label(
    data = mark,
    aes(C, distance, label = sprintf("Fitness = %.3f", fitness01)),
    inherit.aes = FALSE,
    nudge_x = 12, nudge_y = 0.3,
    size = 4.2, label.size = 0.5
  ) +
  labs(x = "C Value (Width)", y = "Distance |Z - Zopt|") +
  theme_classic() +
  theme(
    text = element_text(family = "sans"),
    axis.text = element_text(face = "bold"),
    plot.title     = element_text(face = "bold"),
    axis.title = element_text(face = "bold"),
    strip.text     = element_text(face = "bold"))
```

## 1. Selection Model Setting

### 1.0. Infinitessimal model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Exponential_Model
########### Infinitisimal Model #################
a = 5
b = 25
x = seq(1:100)
y <- function(x){
  Y = a*exp(-x/b)
}
Y <- y(x)
z = data.frame(Y, x)

Inf_ModPlot <- z %>% ggplot(aes(x,Y))+
  geom_line(linewidth = 2)+
  annotate("text", x = 55, y = max(Y)/1.5, label = "Exponential Effects", fontface = "bold", size = 10) +  #  Add this line
  labs(title = "A", x = "Loci", y = "Effect")+
  theme_set(theme_bw())+
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 20, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 20, face = "bold"),
        panel.spacing = unit(4, "lines"))

ggsave("Exponential_Model.jpg", plot = Inf_ModPlot, dpi = 1200, width = 7, height = 4, units = "in", path = "../OutputFigures.dir")

Inf_ModPlot
```

### 1.1 Constant model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
# Generation sequence from 1 to 2000
Generation <- c(1:2000)


# Initialize Optimum vector
Optimum = rep(0, length(Generation))

Optimum <- seq(-4, 4, length.out = 2000)
df <- data.frame(Generation, Optimum) %>% filter(Generation <= 100)

Const_ModPlot <- ggplot(df) + 
  geom_blank(aes(Generation, Optimum, ymax = 4)) +
 # geom_hline(yintercept = 0, color = "darkred", size = 3)+
 #annotate("text", x = 100, y = 0, 
  #         label = "Mean Phenotype", 
  #         size = 10, vjust = -.5, col = "darkred")+
  geom_hline(yintercept = 2, size = 3)+
#annotate("text", x = 100, y = 2.1, label = "Optium", size = 10, vjust = -.5, col = "black")+
  labs(title = "A", x = "Generation", y = "Optimum")+
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))
 
 ggsave("Constant_Model.jpg", plot = Const_ModPlot, dpi = 1200, width = 7, height = 4, units = "in", path = "../OutputFigures.dir")

```

### 1.2 Instantaneous Selection model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Instant_Model
Opti_Gen <- tibble(Generation = seq(1:100),
                   Optimum1 = rep(c(rep(110, 10), rep(90, 10)), 5),
                   Optimum2 = rep(c(rep(105, 10), rep(95, 10)), 5))

mu_pheno = mean(Opti_Gen$Optimum1)

Opt_Data <- Opti_Gen %>% 
  filter(Generation == 0 | Generation %% 25 != 0)

Instant_Model <- ggplot()+
  geom_line(data = Opt_Data, aes(x = Generation, y = (Optimum1 - 100)/2.5), size = 1)+
  labs(title = "B", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))


ggsave("Instant_Model.jpg", plot = Instant_Model, dpi = 1200, width = 7, height = 4, units = "in", path = "../OutputFigures.dir")
 
Instant_Model
```

### 1.3 Gradual Two Season Selection model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Gradual_Two_Season_Model
Generation <- seq(1, 100, length.out = 400) 
phenotypes <- rnorm(10000, 0, 1)
Optimum <- 10 *sin( pi* Generation / 25) /2.5
df <- data.frame(Generation, Optimum) 

GradI <- ggplot(df) + 
  geom_line(aes(Generation, Optimum), size = 3) + 
  theme_set(theme_bw())+
  labs(title = "C", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))


ggsave("Gradual_Two_Season_Model.jpg", plot = GradI, dpi = 1200, width = 7, height = 4, units = "in", path = "../OutputFigures.dir")
 
GradI
```

### 1.4 Gradual Two Season Selection model

> This is an old one

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Gradual_Four_Season_Model
# Generation sequence from 1 to 2000
Generation <- c(1:300)
phenotypes <- rnorm(10000, 0, 1)

# Signals vector
signals = c(12, 22, 10, 16) # 5, 10, 20, 30

# Initialize Optimum vector
Optimum = rep(0, length(Generation))

# Loop over each signal to calculate the Optimum
for (i in signals) {
  Optimum = Optimum + (mean(phenotypes) + sd(phenotypes)*4) * sin((22/7) * Generation / i)
}
Optimum = Optimum / 4

df <- data.frame(Generation, Optimum)

# Plot the Optimum over the first 501 generations

GradII <- ggplot(df) + 
    geom_line(aes(Generation, Optimum), size = 3) + 
  ylim(-4, 4) +  
  labs(title = "D", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))


# ggsave("Gradual_Four_Season_Model.jpg", plot = GradII, dpi = 1200, width = 7, height = 4, units = "in", path = "../OutputFigures.dir")
 
GradII
```

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Gradual_Four_Season_Model_NEW
set.seed(3564);
seasons = c(12,22,10,16);
year = sum(seasons);
sd_values = c(3,1,4,2);
pheno = rnorm(10000);
mu_p = mean(pheno);
sd_p = sd(pheno);

current_time = 1;
year_counter = 1;
season_counter = 1;

total_time = 500;
n_opt = numeric(total_time);

while(current_time <= total_time){
  for(i in seq_along(seasons)){
    if(current_time > total_time) break;
    season_length = seasons[i];
    sd_val = sd_values[i];
    remain_time = total_time - current_time + 1;
    act_length = min(season_length, remain_time);
    
    time_pt = 1:act_length;
    opt = mu_p + sd_val * sd_p * sin(2*pi*time_pt/season_length);
    end_time = current_time + act_length - 1;
    n_opt[current_time:end_time] = opt;
    current_time = current_time + act_length;
    season_counter = current_time + 1;
  }
}

df <- data.frame(Generation = seq(1,total_time), Optimum =  n_opt)

# Plot the Optimum over the first 120 generations marking a two cycles

ggplot(df[1:120,]) + 
    geom_line(aes(Generation, Optimum), size = 3) + 
  ylim(-4, 4) +  
  labs(title = "D", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))
```


## 2. Instantaneous Selection for Polygenic Traits

```{r, message=FALSE, echo=FALSE, warning=FALSE}
###############################################################################
# Required Libraries
###############################################################################
library(parallel)
library(doParallel)
library(foreach)
library(dplyr)
library(ggplot2)
library(future)
library(purrr)
library(furrr)
library(cowplot)  
#library(stringr)
###############################################################################
# Custom Theme
###############################################################################
mythemes <- theme_bw() +
  theme(
    text = element_text(family = "sans"), 
    legend.position = "none",
    axis.text.x = element_text(face = "bold", size = 50, angle =25, margin = margin(t = 20), hjust = 1),
    axis.text.y = element_text(face = "bold", size = 50, angle = 15, margin = margin(r = 10)),
    axis.line = element_line(size = 3),
    plot.title      = element_text(hjust = 0.01, face = "bold", size = 70, margin = margin(b = 1, unit = "lines")),
    plot.margin = unit(c(5, 1, 1, 1), "lines"),
    axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
    axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
    strip.text = element_text(size = 50, face = "bold"),
    panel.spacing = unit(5, "lines"),
    panel.grid = element_blank()
  )

```

### 2.1. Polygenic Instantaneous AF

```{r, warning=FALSE, fig.width = 30, fig.height = 30, dpi = 1200, echo=FALSE}
###############################################################################
# Function to extract H, SD, and Gen values from filename
###############################################################################
extract_params <- function(filename) {
  base <- basename(filename)
  
  h_value <- as.numeric(sub(".*_H(0\\.[0-9]+).*", "\\1", base))
  sd_value <- as.numeric(sub(".*SD([0-9]+).*", "\\1", base))
  gen_value <- as.numeric(sub(".*Gen([0-9]+).*", "\\1", base))
  
  list(H = h_value, SD = sd_value, Gen = gen_value)
}

###############################################################################
# Main function to read files, process data, and create the plot
###############################################################################
create_plot <- function(path, pattern) {
  file_list <- list.files(path = path, pattern = pattern, full.names = TRUE)
  
  combined_dataset <- map_df(file_list, function(file) {
    data   <- read.csv(file, header = TRUE) %>% 
                filter(Generation <= 1000)
    params <- extract_params(file)
    
    data %>% 
      mutate(
        H = params$H,
        SD = params$SD,
        Gen = params$Gen
      )
  })
  
  # Randomly select at most 15 positions for visibility
  set.seed(123)
  unique_positions   <- unique(combined_dataset$Position)
  selected_positions <- sample(unique_positions, size = min(15, length(unique_positions)))
  
  filtered_dataset <- combined_dataset %>% 
    filter(Position %in% selected_positions)
  
  # Build the plot
  Freq_Instant_Poly <- filtered_dataset %>%
    mutate(
      H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen)
    ) %>% 
    ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
      geom_line(aes(
        color = ifelse(Position == 323379, "highlighted", "other"),
        size  = ifelse(Position == 323379, 3, 1)
      )) +
      scale_color_manual(values = c("highlighted" = "magenta", "other" = "grey")) +
      scale_size_identity() +
      facet_wrap(~ H_SD_Gen, scales = "free", ncol = 2, dir = "v") +
      theme_bw() +
      labs(
        title = "A) Allele Frequency",
        x     = "Generation",
        y     = "Frequency"
      ) +
      mythemes
  
  Freq_Instant_Poly
}

path    <- "../../Output.dir/LinFS.dir"
pattern <- "^genome10_n100_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv$"
Freq_Instant_Poly <- create_plot(path, pattern)

# Save to file
ggsave(
  filename = "Instant_Poly_AF.jpg",
  plot = Freq_Instant_Poly,
  dpi  = 600,
  width = 30,
  height = 25,
  units  = "in",
  path = "../OutputFigures.dir"
)

print(Freq_Instant_Poly)

```

### 2.2. Polygenic Instantaneous Phenotypes

```{r, warning=FALSE, fig.width = 25, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Instant_Poly_Pheno
extract_params <- function(filename) {
  h_value <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", basename(filename)))
  sd_value <- as.numeric(sub(".*SD(\\d+).*", "\\1", basename(filename)))
  gen_value <- as.numeric(sub(".*Gen(\\d+).*", "\\1", basename(filename)))
  replicate_value <- as.numeric(sub(".*MeanPhenotypes(\\d+)_.*", "\\1", basename(filename)))
  
  list(
    H = h_value,
    SD = sd_value,
    Gen = gen_value,
    Replicate = replicate_value
  )
}

file_list <- list.files(
  path = "../../Output.dir/LinFS.dir",
  pattern = "MeanPhenotypes\\d+_n100_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv",
  full.names = TRUE
)

combined_dataset <- map_df(file_list, function(file) {
  data   <- read.csv(file, header = TRUE)
  params <- extract_params(file)
  
  data %>%
    mutate(
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Replicate = params$Replicate,
      Optimum = ifelse(Optimum == max(Optimum, na.rm = TRUE), "High", "Low")
    ) %>%
    filter(
      Generation <= 1000,
      (H == 0.1 & SD == 1 & Gen == 10) |
      (H == 0.8 & SD == 4 & Gen == 30)
    )
})

Pheno_Instant_Poly <- combined_dataset %>% 
  mutate(
    SD_Gen = paste0("SD = ", SD, " Gen = ", Gen),
    H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen),
    H_SD = paste0("h\u00B2 = ", H, " SD = ", SD),
    H_label = paste0("h\u00B2 = ", H)
  ) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +          
    geom_line(aes(group = Replicate), color = "gray50", alpha = 0.5, size = 1) +
    stat_summary(
      fun = mean, aes(group = 1), geom = "line",
      color = "red",  alpha = 1,     size = 3
    ) +
    facet_wrap(~ H_SD_Gen, scales = "free", ncol = 1, dir = "v") +
    theme_bw() +
    labs(title = "B) Phenotypes", x = "Generation", y = "Phenotype") +
    mythemes

ggsave(
  filename = "Instant_Poly_Pheno.jpg",
  plot = Pheno_Instant_Poly,
  dpi = 1200,
  width = 25, 
  height = 15, 
  units = "in", 
  path = "../OutputFigures.dir"
)

print(Pheno_Instant_Poly)
```

### 2.3. Polygenic Instantaneous Spec Analysis

```{r, warning=FALSE, fig.width = 20, fig.height = 15, echo=FALSE, dpi = 1200}
#| label: Instant_Poly_SpecAnalysis

###############################################################################
################## Function for spectral analysis ############################
###############################################################################

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  
  # Create the directory to save images if it doesn't exist
  last_dir <- basename(normalizePath(folder_path))
  
  #### Function for AF files
  file_list <- list.files(
    path = folder_path,
    pattern = pattern,
    full.names = TRUE
  )
  
###########################################
######## DataFrame for all replicates #####
###########################################
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
  base_name = basename(file_name),
  genome = ifelse(
    grepl("genome\\d+", base_name),
    as.numeric(sub(".*genome(\\d+).*", "\\1", base_name)),
    NA_real_
  ),
  n = ifelse(
    grepl("_n\\d+", base_name),
    as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
    NA_real_
  ),
  H = ifelse(
    grepl("_H[0-9]+\\.?[0-9]*", base_name),
    as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
    NA_real_
  ),
 SD = ifelse(
    grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
    as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
    NA_real_
  ),
 Gen = ifelse(
    grepl("Gen\\d+", base_name),
    as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
    NA_real_
  )
)%>%
    mutate(
      param_combination = paste0(
        "n_", n, "_H", H,
        ifelse(!is.na(SD),  paste0("_SD", SD),  ""),
        ifelse(!is.na(Gen), paste0("_Gen", Gen), "")
      )
    )

###...................................#######
### parallelization for files reading #######
###...................................#######
  
  num_cores_to_use <- min(detectCores() - 16, 64) # check the cores before
  cluster_type   <- if (.Platform$OS.type == "windows") "PSOCK" else "FORK"
  cl <- makeCluster(num_cores_to_use, type = cluster_type)
  registerDoParallel(cl)
  
  combined_data_list <- foreach(i = seq_along(files_df$file_name),
                                .packages = c("dplyr")) %dopar% {
    file   <- files_df$file_name[i]
    params <- files_df[i, ]
    df     <- read.csv(file)
    df %>%
      mutate(
        allele_id = as.factor(Position),
        generation  = as.numeric(Generation),
        allele_frequency = Frequency,
        sample_size = 10000,
        file = params$base_name,
        genome = params$genome,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        param_combination= params$param_combination
      ) %>%
      dplyr::select(
        allele_id, generation, allele_frequency, sample_size, file,
        genome, n, H, SD, Gen, param_combination
      )
  }
  
  combined_data <- bind_rows(combined_data_list)
  
  stopCluster(cl)
  
  mean_allele_data <- combined_data %>%
    group_by(generation, n, genome, H, SD, Gen, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")

####'''''''''''''''''''''''#####
#### Convert to time series ####
####'''''''''''''''''''''''#####

  ts_data_list <- mean_allele_data %>%
    group_by(n, genome, H, SD, Gen, param_combination) %>%
    summarize(
      ts_data = list(ts(mean_allele_frequency,
                        start = min(generation),
                        frequency = 1)), #frequency = 1
      .groups = 'drop'
    )
  
### Compute spectral density ####
  
  spec_results_list <- lapply(ts_data_list$ts_data, function(ts_data) {
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  })
  
#### Prepare data for plotting
  plot_data_list <- list()
  for (i in seq_along(spec_results_list)) {
    spec_result <- spec_results_list[[i]]
    params      <- ts_data_list[i, ]
    # compute period
    period      <- 1 / spec_result$freq
    
    df_spec <- data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      genome = params$genome,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      param_combination = params$param_combination
    ) 
    
    plot_data_list[[i]] <- df_spec
  }
  
  # Combine spectral data
  plot_data <- bind_rows(plot_data_list)
  
  # Limit Period by threshold for each param_combination 
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(
      threshold = case_when(
        Gen == 10 ~ 40,  # keep period < 40 if Gen=10
        Gen == 30 ~ 80,  # keep period < 80 if Gen=30
        TRUE      ~ max(Period)
      )
    ) %>%
    ungroup() %>%
    # Keep only the two combos: (H=0.1,SD=1,Gen=10) or (H=0.8,SD=4,Gen=30)
    filter(
      Period < threshold &
      (
        (H == 0.1 & SD == 1 & Gen == 10) | 
        (H == 0.8 & SD == 4 & Gen == 30)
      )
    )
  
  # Creating labels 
  plot_data <- plot_data %>%
    mutate(
      H_label  = paste0("H = ", H),
      SD_label = ifelse(!is.na(SD),  paste0("SD = ", SD),  "No SD"),
      Gen_label= ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      H_SD_Gen = paste0("h\u00B2 = ", H, " SD=", SD, " Gen=", Gen)
    )
  
  spec_plot_comb1 <- ggplot( plot_data, 
                            aes(x = Period, y = Spectrum, 
                                color = factor(genome), group = factor(genome))) +
    geom_line(linewidth = 3) +
    facet_wrap(~ H_SD_Gen, scales = "free", ncol = 1) +
    scale_y_continuous(labels = scales::label_number())+
    #scale_y_continuous(labels = scales::label_scientific())+
    labs(
      title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  
  return(spec_plot_comb1)
}

###############################################################################
################## Run The Function for Spectral Analysis ####################
###############################################################################

dirpath   <- "../../Output.dir/LinFS.dir/"
my_pattern<- "^genome\\d+_n100_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"


final_plot <- run_fft_analysis(dirpath, my_pattern)

ggsave("Instant_Poly_SpecAnalysis_Combined.jpg",
       plot = final_plot,
       dpi = 1200, width = 25, height = 15, units = "in",
       path = "../OutputFigures.dir")


final_plot
```

### 2.4. Combined Polygenic Instantaneous for AF, Pheno, and Spec Analysis

```{r, warning=FALSE, fig.width = 30, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Instant_Poly_AF_Pheno_SpecAnalysis_comb

top_row <- plot_grid(
  Pheno_Instant_Poly, 
  final_plot,
  ncol = 1, 
  rel_heights = c(1, 1)
)

combined_plot <- plot_grid(
  Freq_Instant_Poly, 
  top_row, 
  ncol = 2,
  rel_widths = c(2, 1)
)

ggsave(
  filename = "Figure3.jpg", #"Instant_Poly_AF_Pheno_SpecAnalysis.jpg",
  plot     = combined_plot,
  dpi      = 600,
  width    = 49,
  height   = 30,
  units    = "in",
  path     = "../OutputFigures.dir"
)
combined_plot  

```

## 3. Genetic Architecture: Instantaneous models

### 3.1. AF monogenic, oligogenic, and Polygenic

```{r, warning=FALSE, fig.width = 25, fig.height = 22, dpi = 1200, echo=FALSE}
#| label: AF_Mono_Ologo_Poly_Instant
read_files <- function() {
  file_list <- list.files(path = "../../Output.dir/LinFS.dir/", pattern = "genome10_n(1|10)_H0\\.(1|5|8)(SD(1|2|4))?Gen(10|20|30)\\.csv$", full.names = TRUE)
  
  datasets <- lapply(file_list, function(file) {
    data <- read.csv(file)
    matches <- regmatches(file, regexec("genome10_n([0-9]+)_H([0-9\\.]+)SD([0-9]+)Gen([0-9]+)", file))[[1]]
    selection_type <- as.numeric(matches[2])
    selection_label <- ifelse(selection_type == 1, "1 Locus",
                              ifelse(selection_type == 10, "10 Loci", "100 Loci"))
    
    data <- data %>% 
      mutate(Selection = selection_label,
             H = as.numeric(matches[3]),
             SD = as.numeric(matches[4]),
             Gen = as.numeric(matches[5]))
    return(data)
  })
  
  return(bind_rows(datasets))
}

#########################
### Read in the data ####
##########################

Genome_dataset <- read_files() %>% 
  filter(Generation <= 1000) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "1 Locus",  
                                 "10 Loci", 
                                 "100 Loci"))

# select up to 15 unique positions for each group
set.seed(123)
selected_positions <- Genome_dataset %>%
  group_by(Selection) %>%
  group_map(~ {
    positions <- unique(.x$Position)
    if (length(positions) > 30) {
      sample(positions, 30)
    } else {
      positions
    }
  }) %>%
  unlist()

filtered_dataset <- Genome_dataset %>%
  filter(Position %in% selected_positions)

filtered_dataset <- filtered_dataset %>%
  filter((H == 0.1 & SD == 1 & Gen == 10) |
         (H == 0.5 & SD == 2 & Gen == 20) |
          (H == 0.8 & SD == 4 & Gen == 30))

filtered_dataset <- filtered_dataset %>%
  mutate(Color = case_when(
    Selection == "1 Locus" ~ "magenta",
    Selection == "10 Loci" & Position == "427101" ~ "magenta", #1037246
    Selection == "100 Loci" & Position == "323379" ~ "magenta", # 201349
    TRUE ~ "black"
  ),
  LineSize = case_when(
    Color == "magenta" ~ 2,
    TRUE ~ 0.5
  ))


AF_Mono_Ologo_Poly_Instant <- filtered_dataset %>%
  filter(Generation <= 1000) %>%
  mutate(H_SD_Gen = paste0("H = ", H, " SD =  ", SD, " Gen = ", Gen)) %>% 
  mutate(
    H_SD_Gen_short = case_when(
      H == 0.1 & SD == 1 & Gen == 10 ~ "Min combo",
      H == 0.5 & SD == 2 & Gen == 20 ~ "Med combo",
      H == 0.8 & SD == 4 & Gen == 30 ~ "High combo"
    )) %>%
  mutate(
    H_SD_Gen_short = fct_relevel(H_SD_Gen_short, "Min combo", "Med combo", "High combo")
  ) %>%
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position), 
             color = Color, size = LineSize)) +
  geom_line(alpha = 0.7) + 
  scale_color_identity() +
  scale_size_identity() +
  facet_grid(H_SD_Gen_short ~ Selection) +
  labs(title = "A) Allele Frequency", x = "Generation", y = "Frequency") +
  theme_bw() +
  mythemes

ggsave(
  filename = "AF_Mono_Ologo_Poly_Instant.jpg",
  plot     = AF_Mono_Ologo_Poly_Instant,
  dpi      = 600,
  width    = 49,
  height   = 30,
  units    = "in",
  path     = "../OutputFigures.dir"
)

 AF_Mono_Ologo_Poly_Instant
```

### 3.2. Pheno monogenic, oligogenic, and Polygenic

```{r, warning=FALSE, fig.width = 25, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Pheno_Mono_Oligo_Poly_Instant

dirpath <- "../../Output.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n(1|10)_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

process_files <- function(dirpath, pattern) {
  
  # List matching files
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  dataframes <- list()
  
  for (file in files) {
    replicate <- as.numeric( sub(".*MeanPhenotypes(\\d+)_.*", "\\1", basename(file)))
    H <- as.numeric( sub(".*_H(0\\.\\d+).*", "\\1", basename(file)))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", basename(file)))
    SD <- as.numeric( sub(".*SD(\\d+).*", "\\1", basename(file)))
    Gen <- as.numeric( sub(".*Gen(\\d+).*", "\\1", basename(file)))
    
    
    selection_label <- ifelse(loci == 1, "1 Locus",
                       ifelse(loci == 10, "10 Loci", "100 Loci"))
    
    data <- read.csv(file, header = TRUE) %>%
      mutate(
        H = H,
        loci = loci,
        SD = SD,
        Gen = Gen,
        replicate = as.factor(replicate),
        Selection = selection_label,
        
        h2_sd = paste0("h2 = ", H, " sd = ", SD),
        loci_gen = paste0("loci = ", loci, " gen = ", Gen),
        Fitness = exp(-(1/125) * (Phenotype - Optimum)^2)) %>%
      filter(
        Generation <= 1000
      )
    
    dataframes[[file]] <- data
  }
  
  combined_data <- bind_rows(dataframes)
  
 #combined_data <- combined_data %>%
  #  filter(!replicate %in% c("1", "13", "28"))
  
  return(combined_data)
}

combined_data <- process_files(dirpath, pattern)

Pheno_Mono_Oligo_Poly <- combined_data %>%
  filter(
    (H == 0.1 & SD == 1 & Gen == 10) |
    (H == 0.8 & SD == 4 & Gen == 30)
  ) %>%
  mutate(
    H_SD_Gen_short = case_when(
      H == 0.1 & SD == 1 & Gen == 10 ~ "Min combo",
      H == 0.8 & SD == 4 & Gen == 30 ~ "High combo"
    )
  ) %>%
  mutate(
    H_SD_Gen_short = fct_relevel(H_SD_Gen_short, "Min combo", "High combo")
  ) %>%
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line(aes(group = replicate),
            color = "gray50", alpha = 0.5, size = 0.5) +
  stat_summary(
    fun = mean, aes(group = 1), geom = "line",
    color = "red", alpha = 0.7, size = 3
  ) +
  facet_grid(H_SD_Gen_short ~ Selection, scales = "free") +
  labs(
    title = "B) Phenotypes",
    x = "Generation",
    y = "Phenotypes"
  ) +
  theme_bw() +
  mythemes

ggsave(
  filename = "Pheno_Mono_Oligo_Poly.jpg",
  plot     = Pheno_Mono_Oligo_Poly,
  dpi      = 600,
  width    = 49,
  height   = 30,
  units    = "in",
  path     = "../OutputFigures.dir"
)

 Pheno_Mono_Oligo_Poly

```

### 3.3. Spec_Analysis monogenic, oligogenic, and Polygenic

```{r, warning=FALSE, fig.width = 10, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Spec_Analysis_Mono_Oligo_Poly_Instant

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  
  # 1) Find all files
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replicate <- as.numeric( sub(".*genome(\\d+)_.*", "\\1", base_name)),
      genome = ifelse(
        grepl("genome\\d+", base_name),
        as.numeric(sub(".*genome(\\d+).*", "\\1", base_name)),
        NA_real_),
      loci = ifelse(
        grepl("_n\\d+", base_name),
        as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
        NA_real_),
      H = ifelse(
        grepl("_H[0-9]+\\.?[0-9]*", base_name),
        as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
        NA_real_),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_),
     Selection = case_when(
        loci == 1 ~ "1 Locus",
        loci == 10 ~ "10 Loci",
        TRUE ~ "Unknown"
      ),
      
      param_combination = paste0(
        "loci_", loci, "_H", H, 
        ifelse(!is.na(SD), paste0("_SD", SD), ""), 
        ifelse(!is.na(Gen), paste0("_Gen", Gen), "")
      )
    )

  num_cores_to_use <- min(detectCores() - 16, 64) # check the cores before
  cluster_type   <- if (.Platform$OS.type == "windows") "PSOCK" else "FORK"
  cl <- makeCluster(num_cores_to_use, type = cluster_type)
  registerDoParallel(cl)

  combined_data_list <- foreach(i = seq_along(files_df$file_name), 
                                .packages = c("dplyr")) %dopar% {
    file  <- files_df$file_name[i]
    params <- files_df[i, ]
    
    df <- read.csv(file) 
    data <- df %>%
      mutate(
        allele_id       = as.factor(Position),
        generation      = as.numeric(Generation),
        allele_frequency= Frequency,
        file            = params$base_name,
        replicate       = params$replicate,
        loci            = params$loci,
        H               = params$H,
        SD              = params$SD,
        Gen             = params$Gen,
        Selection       = params$Selection,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(
        allele_id, generation, allele_frequency, replicate, 
        loci, H, SD, Gen, Selection, param_combination
      )
    data
  }
  combined_data <- bind_rows(combined_data_list)
  
  filtered_data <- combined_data %>%
    filter(
      (Selection == "1 Locus"  & H == 0.1 & SD == 1 & Gen == 10) |
      (Selection == "1 Locus"  & H == 0.8 & SD == 4 & Gen == 30) |
      (Selection == "10 Loci" & H == 0.1 & SD == 1 & Gen == 10) |
      (Selection == "10 Loci" & H == 0.8 & SD == 4 & Gen == 30)
    )

  mean_allele_data <- filtered_data %>%
    group_by(generation, loci, replicate, H, SD, Gen, Selection, param_combination) %>%
    summarize(
      mean_allele_frequency = mean(allele_frequency), 
      .groups = "drop"
    )

  ts_data_list <- mean_allele_data %>%
    group_by(loci, replicate, H, SD, Gen, Selection, param_combination) %>%
    summarize(
      ts_data = list(ts(mean_allele_frequency, 
                        start = min(generation),
                        frequency = 1)),
      .groups = 'drop'
    )

  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }

  plot_data_list <- foreach(i = seq_along(spec_results_list),
                            .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    
    data.frame(
      Period    = period,
      Spectrum  = spec_result$spec,
      loci      = params$loci,
      replicate = params$replicate,
      H         = params$H,
      SD        = params$SD,
      Gen       = params$Gen,
      Selection = params$Selection,
      param_combination = params$param_combination
    )
  }

  stopCluster(cl) 
  
  plot_data <- bind_rows(plot_data_list) %>%
    group_by(param_combination) %>%
    mutate(
      threshold = case_when(
        Gen == 10 ~ 40,
        Gen == 20 ~ 50,
        Gen == 30 ~ 80,
        TRUE      ~ max(Period)
      )
    ) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      H_SD_Gen  = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen),
      H_SD      = paste0("H = ", H, " SD = ", SD),
      H_SD_Gen_short = case_when(
            H == 0.1 & SD == 1 & Gen == 10 ~ "Min combo",
            H == 0.8 & SD == 4 & Gen == 30 ~ "High combo")
    ) %>%
    mutate(H_SD_Gen_short = fct_relevel(H_SD_Gen_short, "Min combo", "High combo"))

  if (any(is.na(plot_data$Gen))) {
    fft_plots <- ggplot(
      plot_data, 
      aes(x = Period, y = Spectrum, color = factor(replicate), group = factor(replicate))
    ) +
      geom_line(linewidth = 1.5) +
      facet_wrap(H_SD ~ Selection, scales = "free") +
      scale_y_continuous(labels = scales::label_number())+
      labs(title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density") +
      mythemes
  } else {
    fft_plots <- ggplot(
      plot_data %>% mutate(facetgrouping = paste0(Selection, ": ", H_SD_Gen_short)) %>% 
        mutate(facetgrouping = fct_relevel(facetgrouping, "1 Locus: Min combo", 
                                           "1 Locus: High combo",
                                           "10 Loci: Min combo",
                                           "10 Loci: High combo")),
      aes(x = Period, y = Spectrum, color = factor(replicate), group = factor(replicate))
    ) +
      geom_line(linewidth = 1.5) +
      scale_y_continuous(labels = scales::label_number())+
      facet_wrap(~ facetgrouping, scales = "free", ncol = 1) +
      #facet_grid(Selection ~ H_SD_Gen_short, scales = "free") +
      labs(title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density") +
      mythemes
  }

  return(fft_plots)
}

dirpath <- "../../Output.dir/LinFS.dir/"
pattern <- "^genome\\d+_n(1|10)_H0\\.(1|5|8)(SD(1|2|4))?Gen(10|20|30)\\.csv$"

Spec_Mono_Oligo_Poly <- run_fft_analysis(dirpath, pattern)

ggsave(
  filename = "Spec_Mono_Oligo_Poly.jpg",
  plot     = Spec_Mono_Oligo_Poly,
  dpi      = 600,
  width    = 20,
  height   = 30,
  units    = "in",
  path     = "../OutputFigures.dir"
)

Spec_Mono_Oligo_Poly

```

### 3.4. Genome architecture all models Polygenic Instantaneous: AF, Pheno, and Spec Analysis

```{r, warning=FALSE, fig.width = 22, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: All_Instant_Mono_Oligo_Poly
#| 
top_plot     <- AF_Mono_Ologo_Poly_Instant + theme(plot.margin = margin(b = 20))
bottom_left  <- Pheno_Mono_Oligo_Poly + theme(plot.margin = margin(r = 20, b = 20))
bottom_right <- Spec_Mono_Oligo_Poly   + theme(plot.margin = margin(l = 20, b = 20))


All_Mono_Oligo_Poly <- plot_grid(plot_grid(top_plot, bottom_left, 
                                           ncol = 1, 
                                           rel_heights = c(2.4, 2)), 
                                 bottom_right, rel_widths = c(2, 1.2))

ggsave("Figure4.jpg", #All_Instant_Mono_Oligo_Poly.jpg
       plot = All_Mono_Oligo_Poly, 
       dpi = 600, 
       width = 44, 
       height = 40, 
       units = "in", 
       path = "../OutputFigures.dir")

All_Mono_Oligo_Poly

```

### 3.5 Fixed percentages for each architecture

```{r, fig.height=10, fig.width=20, echo=FALSE, dpi = 1200, message=FALSE}
#| label: Fixation_Percentages
#### Parameter combination as colors
library(furrr)
library(fs)
#library(stringr)
library(dplyr)

path <- "../../Output.dir/LinFS.dir/"
pattern <- "^genome\\d+_n\\d+_H0.(1|5|8)(SD[1|4])?Gen(10|30)?\\.csv$" 

# List files using list.files (full paths, filtering by regex)
files <- list.files(path, pattern, full.names = TRUE)

if (length(files) == 0) {
  stop("No files found matching the pattern in the specified path.")
}

available_cores <- parallel::detectCores()
workers_to_use <- max(1, available_cores - 4)  
plan(multicore, workers = workers_to_use)

process_file <- function(file) {
  filename <- path_file(file)
  repl_val <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", basename(filename)))
  H_val <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", basename(filename)))
  loci_val <- as.numeric(sub(".*_n(\\d+)_.*", "\\1", basename(filename)))
  SD_val <- as.numeric(sub(".*SD(\\d+).*", "\\1", basename(filename)))
  Gen_val <- as.numeric(sub(".*Gen(\\d+).*", "\\1", basename(filename)))
  
  df <- read.csv(file) %>%
    select(-any_of("Origin")) %>%
    mutate(
      Position = as_factor(Position),
      repl = (repl_val),
      H    = (H_val),
      loci = (loci_val),
      SD   = (SD_val),
      Gen  = (Gen_val)
    )
  
  required <- c("H", "loci", "SD", "Gen", "repl", "Position")
  missing_cols <- setdiff(required, names(df))
  if (length(missing_cols) > 0) {
    warning("File ", filename, " is missing the following columns: ",
            paste(missing_cols, collapse = ", "))
  }
  return(df)
}

combined_data <- future_map_dfr(files, process_file, .options = furrr_options(chunk_size = 100))

data_with_fix <- combined_data %>%
  group_by(H, loci, SD, Gen, repl, Position) %>%
  filter(Frequency == 1 | (Frequency < 1 & Generation == max(Generation) & max(Generation) < 2000)) %>% 
  distinct(H, loci, SD, Gen, repl, Position) %>% 
  ungroup()

replicate_summary <- data_with_fix %>%
  group_by(H, loci, SD, Gen, repl) %>%
  summarise(
    fixed_count = n_distinct(Position),
    total_count = 30 * loci,  # count of unique loci in this replicate
    .groups = "drop"
  ) %>% 
  distinct()


parameter_summary <- replicate_summary %>%
  group_by(H, loci, SD, Gen, total_count) %>%
  summarise(
    total_fixed    = sum(fixed_count),
    total_possible = total_count,
    Perc_Loci      = total_fixed * 100 / total_possible,
    .groups = "drop"
  ) %>%
  mutate(
    Gen_SD  = paste0("Gen = ", Gen, " SD = ", SD),
    H_label = paste0("H = ", H),
    Combo   = paste0(H_label, ", ", Gen_SD)
  ) %>% 
  distinct()

Fixation_Percentages <-
  ggplot(
    parameter_summary %>%
      mutate(
        H   = as_factor(H),
        loci= as_factor(loci),
        SD  = as_factor(SD),
        Gen = as_factor(Gen)
      ),
    aes(
      x = loci,
      y = Perc_Loci,
      color = H,
      shape = SD,
      linetype = Gen,
      group = interaction(H, Gen, SD)
    )
  ) +
  geom_line(linewidth = 3) +
  geom_point(size = 7, stroke = 0) +
  labs(
    x = "Number of Loci",
    y = "Percentage of Loci Fixed (%)",
    color = "Heritability (h\u00B2)",
    linetype = "Season Length (Gen)",
    shape = "Distance to Optimum (SD)"
  ) +
  scale_color_manual(values = c("darkblue", "gray50", "firebrick")) +
  scale_linetype_manual(
    values = c("solid", "dashed", "dotted", "dotdash", "longdash", "twodash")
  ) +
  theme_bw() +
  theme(
    text           = element_text(family = "sans"),
    axis.text.x    = element_text(face = "bold", size = 30, angle = 15,
                                  hjust = 1, margin = margin(t = 10)),
    axis.text.y    = element_text(face = "bold", size = 30, angle = 15,
                                  margin = margin(r = 10)),
    axis.line      = element_line(linewidth = 1.2),
    plot.title     = element_text(hjust = 0.01, face = "bold", size = 30),
    axis.title.x   = element_text(size = 30, face = "bold",
                                  margin = margin(t = 30)),
    axis.title.y   = element_text(size = 30, face = "bold",
                                  margin = margin(r = 35)),
    strip.text     = element_text(size = 30, face = "bold"),
    panel.spacing  = unit(5, "lines"),
    panel.grid     = element_blank(),
    legend.position= c(0.95, 0.95),
    legend.justification = c("right", "top"),
    legend.text    = element_text(size = 32, face = "bold"),
    legend.title   = element_text(size = 34, face = "bold"),
    legend.key.width = unit(2.5, "cm")  
  ) +
  guides(
    color    = guide_legend(override.aes = list(shape = 16, size = 6), byrow = TRUE),
    linetype = guide_legend(override.aes = list(linewidth = 2, color = "black"))
  )

ggsave("Figure5.jpg", #Fixation_Percentages.jpg
       plot = Fixation_Percentages, 
       dpi = 600, 
       width = 40, 
       height = 20, 
       units = "in", 
       path = "../OutputFigures.dir")

print(Fixation_Percentages)

```

## 4. Beyond instantaneous selection: gradual selection models

### 4.1. AF Freq All models by parameters

```{r, warning=FALSE, fig.width = 22, fig.height = 10, dpi=1200, echo=FALSE}
#| label: AF_FS_model_comparison
mono1 <- read.csv("../../Output.dir/LinFS.dir/genome10_n100_H0.8SD4Gen30.csv")
mono2 <-  read.csv("../../Output.dir/SinFS.dir/genome10_n100_H0.8SD4Gen30.csv")
mono3 <- read.csv("../../Output.dir/SinFSGen.dir/genome10_n100_H0.8SD4.csv")


# Add a column to distinguish the datasets
geno_file <- mono1 %>% mutate(Selection = "Instantaneous")
geno_file2 <- mono2 %>% mutate(Selection = "Gradual 2-Seasons")
geno_file3 <- mono3 %>% mutate(Selection = "Gradual 4-Seasons")

Genome_dataset <- rbind(geno_file, 
                        geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Instantaneous", 
                                 "Gradual 2-Seasons", 
                                 "Gradual 4-Seasons"))

## Select 30 random positions
  set.seed(12345)
  selected_positions <- Genome_dataset %>%
  distinct(Position) %>%
  sample_n(size = min(30, n()), replace = FALSE) %>%
  pull(Position)

 Genome_dataset <- Genome_dataset %>%
      filter(Position %in% selected_positions)
  
AF_FS_model_comparison <- Genome_dataset %>% 
  filter(Generation <= 1000) %>%
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(
    aes(
      color = factor(Position == 323379), # Highlight the position 
      size  = factor(Position == 323379)
    ),
    alpha = 0.8
  ) +
  scale_color_manual(values = c("TRUE" = "magenta", "FALSE" = "grey")) +
  scale_size_manual(values  = c("TRUE" = 2, "FALSE" = 0.5)) +
  facet_wrap(Selection ~ .) +
  theme_bw() +
  mythemes
  
ggsave(
  filename = "Figure6.jpg", #AF_FS_model_comparison.jpg#
  plot = AF_FS_model_comparison,
  dpi = 600, width = 30, height = 15, units = "in",
  path = "../OutputFigures.dir"
)

print(AF_FS_model_comparison)

```

### 4.2. FS model comparison by genomic architecture

### 4.2.1. AF All models comparisons

```{r,  warning=FALSE, fig.width = 30, fig.height = 22, dpi=1200, echo=FALSE}
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(forcats)
library(cowplot)

n_values <- c(1, 10, 100) # Loci to compare
gene_number_labels <- c("1" = "1 Locus", "10" = "10 Loci", "100" = "100 Loci")

selections <- list(#"LinFS.dir" = "Instantaneous",
  "SinFS.dir" = "Gradual 2-Seasons",
  "SinFSGen.dir" = "Gradual 4-Seasons"
)

dataset_list <- list()

for (n in n_values) {
  for (dir_name in names(selections)) {
    selection_label <- selections[[dir_name]]
    if (dir_name == "SinFSGen.dir") {
      filename <- paste0("../../Output.dir/", dir_name, "/genome10_n", n, "_H0.5SD4.csv")
    } else {
      filename <- paste0("../../Output.dir/", dir_name, "/genome10_n", n, "_H0.5SD4Gen20.csv")
    }
    
    if (file.exists(filename)) {
      data <- read.csv(filename)
      
  data <- data %>%
    mutate(Selection = selection_label,
          Gene_Number = gene_number_labels[as.character(n)])
      
      dataset_list[[length(dataset_list) + 1]] <- data
    } else {
      warning(paste("File not found:", filename))
    }
  }
}

Genome_dataset <- bind_rows(dataset_list) %>%
  mutate(
    Selection = fct_relevel(Selection, "Gradual 2-Seasons", "Gradual 4-Seasons"), #"Instantaneous", 
    Gene_Number = fct_relevel(Gene_Number, "1 Locus", "10 Loci", "100 Loci")
  )

monogenic_positions <- Genome_dataset %>%
  filter(Gene_Number == "1 Locus") %>%
  pull(Position) %>%
  unique()
monogenic_highlight <- ifelse(length(monogenic_positions) >= 1, monogenic_positions[1], NA)

highlight_positions <- data.frame(
  Gene_Number = c("1 Locus", "10 Loci", "100 Loci"),
  Highlight_Position = c(monogenic_highlight, 427101, 323379) # 1037246, 201349
)

Genome_dataset <- Genome_dataset %>%
  left_join(highlight_positions, by = "Gene_Number") %>%
  mutate(Highlight = Position == Highlight_Position)


# Get all positions for Polygenic
Polygenic_positions <- Genome_dataset %>%
  filter(Gene_Number == "100 Loci") %>%
  pull(Position) %>%
  unique()

Polygenic_highlight <- highlight_positions %>%
  filter(Gene_Number == "100 Loci") %>%
  pull(Highlight_Position)

# Remove the highlighted position from positions to sample 
positions_to_sample <- setdiff(Polygenic_positions, Polygenic_highlight)

# Randomly sample 29 positions (since we have 1 highlighted position)
set.seed(123) 
sampled_positions <- sample(positions_to_sample, 
                            size = min(29, length(positions_to_sample)), 
                            replace = FALSE)

selected_Polygenic_positions <- c(sampled_positions, Polygenic_highlight)

Genome_dataset_filtered <- Genome_dataset %>%
  filter(
    (Gene_Number != "100 Loci") | (Position %in% selected_Polygenic_positions)
  )

All_models_freq <- Genome_dataset_filtered %>% 
  filter(Generation <= 1000) %>%
  ggplot(aes(x = Generation, 
             y = Frequency, 
             group = factor(Position), 
             color = as.factor(Highlight),
             size = as.factor(Highlight))) +
  geom_line(alpha = 0.8) +
  scale_size_manual(values = c("TRUE" = 2, "FALSE" = 1)) +
  scale_color_manual(values = c("TRUE" = "magenta", "FALSE" = "grey")) +
  labs(title = "A) Allele Frequency", x = "Generation", y = "Frequency") +
  facet_grid(Selection ~ Gene_Number) +
  theme_bw()+
  mythemes
  
ggsave("All_models_freq.jpg", 
       plot = All_models_freq, 
       dpi = 600, width = 30, height = 20,
       units = "in", path = "../OutputFigures.dir")

print(All_models_freq)
```

### 4.2.2. Phenotype All models comparisons

```{r,  warning=FALSE, fig.width = 30, fig.height = 22, dpi=1200, echo=FALSE, message=FALSE}
#| label: All_models_Pheno

n_values <- c(1, 10, 100)
gene_number_labels <- c("1" = "1 Locus", "10" = "10 Loci", "100" = "100 Loci")

selections <- list(
  #"LinFS.dir" = "Instantaneous",
  "SinFS.dir" = "Gradual 2-Seasons",
  "SinFSGen.dir" = "Gradual 4-Seasons"
)

phenotype_list <- list()
for (n in n_values) {
  for (dir_name in names(selections)) {
    selection_label <- selections[[dir_name]]
    if (dir_name == "SinFSGen.dir") {
      file_pattern <- paste0("MeanPhenotypes\\d+_n", n, "_H0\\.5SD4\\.csv$")
      file_path <- paste0("../../Output.dir/", dir_name)
    } else {
      file_pattern <- paste0("MeanPhenotypes\\d+_n", n, "_H0\\.5SD4Gen20\\.csv$")
      file_path <- paste0("../../Output.dir/", dir_name)
    }
    file_list <- list.files(
      path = file_path,
      pattern = file_pattern,
      full.names = TRUE
    )
    
    for (file in file_list) {
      data <- read.csv(file)
      replicate_value <- as.numeric( sub(".*MeanPhenotypes(\\d+)_.*", "\\1", basename(file)))
      
      data <- data %>%
        mutate(
          Selection = selection_label,
          Gene_Number = gene_number_labels[as.character(n)],
          Replicate = replicate_value
        )
      phenotype_list[[length(phenotype_list) + 1]] <- data
    }
  }
}

Phenotype_dataset <- bind_rows(phenotype_list) %>%
  mutate(
    Selection = fct_relevel(Selection, "Instantaneous", "Gradual 2-Seasons", "Gradual 4-Seasons"),
    Gene_Number = fct_relevel(Gene_Number, "1 Locus", "10 Loci", "100 Loci")
  )

All_models_Pheno <- Phenotype_dataset %>% filter(Generation <= 1000) %>% 
  ggplot(aes(x = Generation, y = Phenotype, group = Replicate)) +
  #geom_boxplot() + # outlier.size = 0.5, width = 0.6, alpha = 0.7
  geom_line(linewidth = 1, alpha = 0.7, color = "black") + # outlier.size = 0.5, width = 0.6, alpha = 0.7
  stat_summary(fun = mean,                              
               aes(group = 1), 
               geom = "line", 
               color = "red", 
               alpha = 1, 
               size = 3) +
  facet_grid(Selection ~ Gene_Number) +
  labs(title = "B) Phenotypes", x = "Generation", y = "Phenotype")+
  theme_bw()+
  mythemes

ggsave("All_models_Pheno.jpg", plot = All_models_Pheno, dpi = 600, width = 30, height = 25, units = "in", path = "../OutputFigures.dir")

print(All_models_Pheno)
```

### 4.2.3. Spectral All models comparisons

```{r,  warning=FALSE, fig.width = 49, fig.height = 22, dpi=600, echo=FALSE, message=FALSE}
#| label: All_models_Spec
n_values <- c(1, 10, 100)
gene_number_labels <- c("1" = "1 Locus", "10" = "10 Loci", "100" = "100 Loci")

selections <- list(
  #"LinFS.dir" = "Instantaneous",
  "SinFS.dir" = "Gradual 2-Seasons",
  "SinFSGen.dir" = "Gradual 4-Seasons"
)

allele_freq_list <- list()
for (n in n_values) {
  for (dir_name in names(selections)) {
    selection_label <- selections[[dir_name]]
    if (dir_name == "SinFSGen.dir") {
      file_pattern <- paste0("genome\\d+_n", n, "_H0\\.5SD4\\.csv$")
      file_path <- paste0("../../Output.dir/", dir_name)
    } else {
      file_pattern <- paste0("genome\\d+_n", n, "_H0\\.5SD4Gen20\\.csv$")
      file_path <- paste0("../../Output.dir/", dir_name)
    }
    
    file_list <- list.files(
      path = file_path,
      pattern = file_pattern,
      full.names = TRUE
    )
    
    for (file in file_list) {
      data <- read.csv(file)
      replicate_value <- as.numeric( sub(".*genome(\\d+)_.*", "\\1", basename(file)))
      
      data <- data %>%
        mutate(
          Selection = selection_label,
          Gene_Number = gene_number_labels[as.character(n)],
          Replicate = factor(replicate_value)
        )
      
      allele_freq_list[[length(allele_freq_list) + 1]] <- data
    }
  }
}

AlleleFreq_dataset <- bind_rows(allele_freq_list) %>%
  mutate(
    Selection = fct_relevel(Selection, "Instantaneous", "Gradual 2-Seasons", "Gradual 4-Seasons"),
    Gene_Number = fct_relevel(Gene_Number, "1 Locus", "10 Loci", "100 Loci")
  )

  num_cores_to_use <- min(detectCores() - 16, 32) # check the cores before
  cluster_type   <- if (.Platform$OS.type == "windows") "PSOCK" else "FORK"
  cl <- makeCluster(num_cores_to_use, type = cluster_type)
  registerDoParallel(cl)

grouped_data <- AlleleFreq_dataset %>%
  group_by(Selection, Gene_Number, Replicate)

unique_combinations <- grouped_data %>%
  summarize() %>%
  ungroup()

spectral_results <- foreach(i = 1:nrow(unique_combinations), .packages = c("dplyr", "stats")) %dopar% {
  sel <- unique_combinations$Selection[i]
  gene_num <- unique_combinations$Gene_Number[i]
  rep <- unique_combinations$Replicate[i]
  
  df <- AlleleFreq_dataset %>%
    filter(Selection == sel, Gene_Number == gene_num, Replicate == rep) %>%
    arrange(Generation)
  
  mean_freq_df <- df %>%
    group_by(Generation) %>%
    summarize(Mean_Frequency = mean(Frequency, na.rm = TRUE)) %>%
    arrange(Generation)
  
ts_data <- ts(mean_freq_df$Mean_Frequency, 
              start = min(mean_freq_df$Generation), frequency = 1)
  
spec_result <- spectrum(ts_data, spans = 2, plot = FALSE)
period <- 1 / spec_result$freq
  
  data.frame(
    Period = period,
    Spectrum = spec_result$spec,
    Selection = sel,
    Gene_Number = gene_num,
    Replicate = rep
  )
}

# Stop cluster
stopCluster(cl)

spectral_data <- bind_rows(spectral_results)

spectral_data <- spectral_data %>%
  filter(Period < 80)

All_models_Spec <- spectral_data %>%
  mutate(
    Facet_formula = factor(
      paste0(Gene_Number, " ", Selection),
      levels = c(
        "1 Locus Instantaneous", "10 Loci Instantaneous", "100 Loci Instantaneous",
        "1 Locus Gradual 2-Seasons", "10 Loci Gradual 2-Seasons", "100 Loci Gradual 2-Seasons",
        "1 Locus Gradual 4-Seasons", "10 Loci Gradual 4-Seasons", "100 Loci Gradual 4-Seasons"
      )
    )
  ) %>% 
  ggplot(aes(x = Period, y = Spectrum, group = Replicate, color = Replicate)) +
  geom_line(alpha = 1, size = 2) +
  scale_y_continuous(labels = scales::label_number())+
  #facet_wrap( ~ Selection + Gene_Number, scales = "free", ncol = 3) +
  facet_wrap( ~ Facet_formula, scales = "free", ncol = 3, dir = "h") +
  #scale_color_viridis_d() +  # Use a discrete color palette
  labs(
    x = "Period (Generations)",
    y = "Spectral Density",
    color = "Replicate"
  ) +
  labs(title = "C) Spectral Density", x = "Period (Generations)",
       y = "Spectral Density")+
  theme_bw()+
  mythemes
    

ggsave("All_models_Spec.jpg", plot = All_models_Spec, dpi = 600, width = 49, height = 30, units = "in", path = "../OutputFigures.dir")

print(All_models_Spec)

```

### 4.2.4. Combined gradual models, comparison on architecture

```{r, warning=FALSE, fig.width = 30, fig.height = 35, dpi = 600, echo=FALSE}
#| label: Combined_gradual_models_architecture

CGMA <- plot_grid(
  All_models_freq,
  All_models_Pheno,
  All_models_Spec,
  ncol = 1,
  rel_heights = c(2.2, 2.2, 2.1)
) +
  theme(panel.spacing = unit(1, "lines"))

#Combined_gradual_models_architecture.jpg

 ggsave("Figure7.jpg",  plot = CGMA, dpi = 450, width = 50, height = 70, units = "in", path = "../OutputFigures.dir", limitsize = FALSE)

print(CGMA)
```

## 5. Differences between FS models and neutral and constant selection models

### 5.1. Spectral Neutral Polygenic

```{r, warning=FALSE, fig.width = 12, fig.height = 8, dpi = 1200, echo=FALSE}
library(cowplot)
library(purrr)

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  theme_set(theme_cowplot())
 
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)

  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }

  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replicate <- as.numeric( sub(".*genome(\\d+)_.*", "\\1", base_name)),
      genome = ifelse(
        grepl("genome\\d+", base_name),
        as.numeric(sub(".*genome(\\d+).*", "\\1", base_name)),
        NA_real_),
      n = ifelse(
        grepl("_n\\d+", base_name),
        as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
        NA_real_),
      H = ifelse(
        grepl("_H[0-9]+\\.?[0-9]*", base_name),
        as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
        NA_real_),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_),
      Selection = case_when(
        n == "1" ~ "1 Locus",
        n == "10" ~ "10 Loci",
        n == "100" ~ "100 Loci",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )

  num_cores_to_use <- min(detectCores() - 16, 64) # check the cores before
  cluster_type   <- if (.Platform$OS.type == "windows") "PSOCK" else "FORK"
  cl <- makeCluster(num_cores_to_use, type = cluster_type)
  registerDoParallel(cl)

  combined_data_list <- foreach(i = seq_along(files_df$file_name), 
                                .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        genome = params$genome,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Selection = params$Selection,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, genome, n, H, SD, Gen, Selection, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data %>%
    filter(
      (H == 0.1 & (SD == 1 | is.na(SD)) & (Gen == 10 | is.na(Gen))) |
      (H == 0.5 & (SD == 2 | is.na(SD)) & (Gen == 20 | is.na(Gen))) |
      (H == 0.8 & (SD == 4 | is.na(SD)) & (Gen == 30 | is.na(Gen)))
    )

  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")

  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')

  # Compute spectral density estimates
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }

  plot_data_list <- foreach(i = seq_along(spec_results_list), 
                            .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      genome = params$genome,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Selection = params$Selection,
      param_combination = params$param_combination
    )
  }

  stopCluster(cl)
  plot_data <- bind_rows(plot_data_list)

  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      !is.na(Gen) & Gen == 10 ~ 40,
      !is.na(Gen) & Gen == 20 ~ 50,
      !is.na(Gen) & Gen == 30 ~ 80,
      TRUE ~ 60
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      H_label = paste0("H = ", H),
      SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )

  fft_plots <- ggplot(plot_data, aes(x = Period, y = Spectrum, color = factor(genome), group = factor(genome))) +
    geom_line(linewidth = 1.1) +
    scale_y_continuous(labels = scales::scientific_format())+
    #scale_y_continuous(labels = scales::label_number())+
    #facet_wrap(Selection ~ H_label + SD_label + Gen_label, scales = "free", ncol = 1) +
    facet_wrap(Selection ~ ., scales = "free", ncol = 1) +
    labs(title = "A) Neutral Model", x = NULL, y = NULL) +
    mythemes

  return(fft_plots)
}

dirpath <- "../../Output.dir/NS.dir/"

pattern <- "^genome\\d+_n(1|10|100)_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"

neut_spec_plots <- run_fft_analysis(dirpath, pattern)
```

### 5.2. Spectral Gradual II Polygenic

```{r, warning=FALSE, fig.width = 12, fig.height = 8, dpi = 1200, echo=FALSE}

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  
  theme_set(theme_cowplot())
  
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)

  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }

  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replicate <- as.numeric( sub(".*genome(\\d+)_.*", "\\1", base_name)),
      genome = ifelse(
        grepl("genome\\d+", base_name),
        as.numeric(sub(".*genome(\\d+).*", "\\1", base_name)),
        NA_real_),
      n = ifelse(
        grepl("_n\\d+", base_name),
        as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
        NA_real_),
      H = ifelse(
        grepl("_H[0-9]+\\.?[0-9]*", base_name),
        as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
        NA_real_),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_),
      Selection = case_when(
        n == "1" ~ "1 Locus",
        n == "10" ~ "10 Loci",
        n == "100" ~ "100 Loci",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )

  num_cores_to_use <- min(detectCores() - 16, 64) # check the cores before
  cluster_type   <- if (.Platform$OS.type == "windows") "PSOCK" else "FORK"
  cl <- makeCluster(num_cores_to_use, type = cluster_type)
  registerDoParallel(cl)

  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        genome = params$genome,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Selection = params$Selection,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, genome, n, H, SD, Gen, Selection, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data %>%
    filter(
      (H == 0.1 & (SD == 1 | is.na(SD)) & (Gen == 10 | is.na(Gen))) |
      (H == 0.5 & (SD == 2 | is.na(SD)) & (Gen == 20 | is.na(Gen))) |
      (H == 0.8 & (SD == 4 | is.na(SD)) & (Gen == 30 | is.na(Gen)))
    )

  mean_allele_data <- filtered_data %>%
    group_by(generation, n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")

  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')

  # Compute spectral density estimates 
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }

  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      genome = params$genome,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Selection = params$Selection,
      param_combination = params$param_combination
    )
  }

  stopCluster(cl)

  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)

  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      !is.na(Gen) & Gen == 10 ~ 40,
      !is.na(Gen) & Gen == 20 ~ 50,
      !is.na(Gen) & Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      H_label = paste0("h\u00B2 = ", H),
      SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )

  fft_plots <- ggplot(
  plot_data %>% mutate(FacetTerm = paste0(Selection)),
  aes(x = Period, y = Spectrum, color = factor(genome), group = factor(genome))
) +
  geom_line(linewidth = 1.1) +
  scale_y_continuous(labels = scales::scientific_format()) +
  #scale_x_continuous(breaks = seq(0, 40, by = 2)) +  
  facet_wrap(FacetTerm ~ ., scales = "free", ncol = 1) +
  labs(title = "B) Gradual 4 Seasons model", x = NULL, y = NULL) +
  mythemes

  return(fft_plots)
}

dirpath <- "../../Output.dir/SinFSGen.dir/"
#dirpath <- "../../Output.dir/FourSeasFourAmp.dir/"
#pattern <- "^genome\\d+_n(1|10|100)_H0\\.(8)(SD(1))?(Gen(10|30))?\\.csv$"
pattern <- "^genome\\d+_n(1|10|100)_H0\\.(1)(SD(1))?(Gen(10|30))?\\.csv$"

gradII_spec_plots <- run_fft_analysis(dirpath, pattern)
gradII_spec_plots <- gradII_spec_plots 
```

### 5.3 Spectral Neutral and Grad II Polygenic

```{r, warning=FALSE, fig.width = 30, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Spectral_Neutral_and_GradII_Polygenic
library(cowplot)
library(ggplot2)

neut_spec_plots <- neut_spec_plots + 
  theme(axis.title = element_blank())

gradII_spec_plots <- gradII_spec_plots + 
  theme(axis.title = element_blank())

adjusted_neut_spec_plots <- neut_spec_plots +
  theme(
    plot.margin = margin(t = 1,  # top
                         r = 2,  # right
                         b = 1,  # bottom
                         l = 1,  # left
                         unit = "lines")
  )

adjusted_gradII_spec_plots <- gradII_spec_plots +
  theme(
    plot.margin = margin(t = 1,
                         r = 1,
                         b = 1,
                         l = 2,
                         unit = "lines")
  )

combined_plot <- plot_grid(
  adjusted_neut_spec_plots,
  adjusted_gradII_spec_plots,
  ncol = 2,
  rel_widths = c(1, 1)
)

Spectral_Neutral_and_GradII_Polygenic <- ggdraw() +
  draw_plot(combined_plot, x = 0.05, y = 0.05, width = 0.95, height = 0.95) +
  draw_label("Periodicity (Generations)", 
             x = 0.5, y = 0.015, 
             vjust = 0, size = 60, fontface = "bold") +
  draw_label("Spectral Density", 
             x = 0.015, y = 0.5, angle = 90, 
             hjust = 0, size = 60, fontface = "bold")

#Spectral_Neutral_and_GradII_Polygenic.jpg
ggsave("Figure8.jpg", plot = Spectral_Neutral_and_GradII_Polygenic, dpi = 600, width = 30, height = 20, units = "in", bg = "white", path = "../OutputFigures.dir")


print(Spectral_Neutral_and_GradII_Polygenic)

```

## 6. Sampled Generations Spectral Analysis

### 6.1 Spectral Instantaneous sampled Generations

```{r, warning=FALSE, fig.width = 15, fig.height = 10, echo=FALSE, dpi = 1200}
#| label: Instant_Poly_SpecAnalysis_Sampled
#library(tidyverse)

run_fft_analysis <- function(folder_path, pattern, spectrum_span = c(3, 3)) {
  # Create the directory to save images if it doesn't exist
  last_dir <- basename(normalizePath(folder_path))
  
  # List files
  file_list <- list.files(
    path = folder_path,
    pattern = pattern,
    full.names = TRUE
  )
  
  if (length(file_list) == 0) {
    stop("No files are found")
  } else {
    cat("The number of files is ", length(file_list))
  }
  
  ###########################################
  ######## DataFrame for all replicates #####
  ###########################################
  files_df <- data.frame(file_name = file_list) %>%
    dplyr::mutate(
      base_name = basename(file_name),
      genome = ifelse(
        grepl("genome\\d+", base_name),
        as.numeric(sub(".*genome(\\d+).*", "\\1", base_name)),
        NA_real_
      ),
      n = ifelse(
        grepl("_n\\d+", base_name),
        as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
        NA_real_
      ),
      H = ifelse(
        grepl("_H[0-9]+\\.?[0-9]*", base_name),
        as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
        NA_real_
      ),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_
      ),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_
      )
    ) %>%
    dplyr::mutate(
      param_combination = paste0(
        "n_", n, "_H", H,
        ifelse(!is.na(SD),  paste0("_SD", SD),  ""),
        ifelse(!is.na(Gen), paste0("_Gen", Gen), "")
      )
    )
  
  ###################……………………………..#############
  ### parallelization for files reading #######
  ##################……………………………..##############
  
  suppressPackageStartupMessages({
    library(doParallel)
    library(foreach)
    library(dplyr)
    library(ggplot2)
  })
  
  # be safe about cores
  cores_available <- parallel::detectCores(logical = TRUE)
  num_cores_to_use <- max(1, min(cores_available - 2, 32))
  cluster_type <- if (.Platform$OS.type == "windows") "PSOCK" else "FORK"
  cl <- parallel::makeCluster(num_cores_to_use, type = cluster_type)
  on.exit(try(parallel::stopCluster(cl), silent = TRUE), add = TRUE)
  doParallel::registerDoParallel(cl)
  
  combined_data_list <- foreach::foreach(
    i = seq_along(files_df$file_name),
    .packages = c("dplyr")
  ) %dopar% {
    file   <- files_df$file_name[i]
    params <- files_df[i, ]
    
    # read full file
    full_df <- utils::read.csv(file, stringsAsFactors = FALSE)
    
    # sample up to 1000 distinct generations
    set.seed(4564356)
    
    gens <- full_df %>%
      filter(Generation %% 5 == 0) %>% 
      dplyr::distinct(Generation) %>%
      dplyr::slice_sample(n = min(200L, nrow(.)))
    
    
    # keep only those generations
    df <- dplyr::semi_join(full_df, gens, by = "Generation")
    
      
    df %>%
      dplyr::mutate(
        allele_id        = as.factor(Position),
        generation       = as.numeric(Generation),
        allele_frequency = Frequency,
        sample_size      = 10000,
        file             = params$base_name,
        genome           = params$genome,
        n                = params$n,
        H                = params$H,
        SD               = params$SD,
        Gen              = params$Gen,
        param_combination= params$param_combination
      ) %>%
      dplyr::select(
        allele_id, generation, allele_frequency, sample_size, file,
        genome, n, H, SD, Gen, param_combination
      )
  }
  
  combined_data <- dplyr::bind_rows(combined_data_list)
  
print(length(unique(combined_data$generation)))
  
  
  mean_allele_data <- combined_data %>%
    dplyr::group_by(generation, n, genome, H, SD, Gen, param_combination) %>%
    dplyr::summarize(
      mean_allele_frequency = mean(allele_frequency),
      .groups = "drop"
    )
  
  # mean_allele_data <- mean_allele_data %>% filter((H == 0.1 & SD == 1 & Gen == 10) | 
  #           (H == 0.5 & SD == 2 & Gen == 20) | 
  #           (H == 0.1 & SD == 2 & Gen == 20) | 
  #           (H == 0.8 & SD == 4 & Gen == 30))
  
  # combined_datapl <- combined_data %>% filter((H == 0.1 & SD == 1 & Gen == 10) | 
  #           (H == 0.5 & SD == 2 & Gen == 20) | 
  #           (H == 0.1 & SD == 2 & Gen == 20) | 
  #           (H == 0.8 & SD == 4 & Gen == 30))
  # 
  # GenePlot <- ggplot(combined_datapl, aes(x = generation, y = allele_frequency, color = factor(allele_id), group = factor(allele_id))) +
  #   geom_line(linewidth = 3) +
  #   facet_wrap(~ H+SD+Gen, scales = "free", ncol = 2) +
  #   #ggplot2::scale_y_continuous(labels = scales::label_number())+
  #   theme(legend.position = "none")
  # 
  # print(GenePlot)
  
  #### Convert to time series ####
  ts_data_list <- mean_allele_data %>%
    dplyr::group_by(n, genome, H, SD, Gen, param_combination) %>%
    dplyr::summarize(
      ts_data = list(stats::ts(mean_allele_frequency,
                               start = min(generation),
                               frequency = 1)),
      .groups = "drop"
    )
  
  ### Compute spectral density ####
  spec_results_list <- lapply(ts_data_list$ts_data, function(ts_data) {
    stats::spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  })
  
  #### Prepare data for plotting
  plot_data_list <- vector("list", length(spec_results_list))
  for (i in seq_along(spec_results_list)) {
    spec_result <- spec_results_list[[i]]
    params      <- ts_data_list[i, ]
    period      <- 1 / spec_result$freq
    
    df_spec <- data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      genome = params$genome,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      param_combination = params$param_combination
    )
    plot_data_list[[i]] <- df_spec
  }
  
  plot_data <- dplyr::bind_rows(plot_data_list)
  
  # Limit Period by threshold for each param_combination 
  plot_data <- plot_data %>%
    dplyr::group_by(param_combination) %>%
    dplyr::mutate(
      threshold = dplyr::case_when(
        Gen == 10 ~ 10,
        Gen == 20 ~ 10,
        Gen == 30 ~ 20,
        TRUE      ~ max(Period)
      )
    ) %>%
    dplyr::ungroup() %>%
    dplyr::filter(
      Period < threshold &
        (
          (H == 0.1 & SD == 1 & Gen == 10) | 
            (H == 0.5 & SD == 2 & Gen == 20) | 
            (H == 0.1 & SD == 2 & Gen == 20) | 
            (H == 0.8 & SD == 4 & Gen == 30)
        )
    ) %>%
    dplyr::mutate(
      H_label   = paste0("H = ", H),
      SD_label  = ifelse(!is.na(SD),  paste0("SD = ", SD),  "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      H_SD_Gen  = paste0("h\u00B2 = ", H, " SD=", SD, " Gen=", Gen)
    )
  
  spec_plot_comb1 <- ggplot2::ggplot(
    plot_data, 
    ggplot2::aes(x = Period, y = Spectrum, color = factor(genome), group = factor(genome))
  ) +
    ggplot2::geom_line(linewidth = 3) +
    ggplot2::facet_wrap(~ H_SD_Gen, scales = "free", ncol = 2) +
    ggplot2::scale_y_continuous(labels = scales::label_number()) +
    ggplot2::labs(
      title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density"
    )+
    theme_set(theme_classic())+
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 20, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 20, face = "bold"),
        panel.spacing = unit(4, "lines"))
  
  return(spec_plot_comb1)
}

###############################################################################
################## Run The Function for Spectral Analysis ####################
###############################################################################

dirpath   <- "../../Output.dir/LinFS.dir/"
my_pattern<- "^genome\\d+_n100_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"
#my_pattern<- "^genome10_n100_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"


final_plot <- run_fft_analysis(dirpath, my_pattern)

ggsave("SampledGen_Instant_Poly_SpecAnalysis_Combined.jpg",
       plot = final_plot,
       dpi = 1200, width = 25, height = 15, units = "in",
       path = "../OutputFigures.dir")


final_plot ## This is actually close to what Bergland did. They collected their samples, and sequenced males from isofemales from 1-5 generations
```
