---
title: "Supplemental Figures"
author: "E.T"
format:
  pdf:
    toc: true
    fontsize: 10pt
    fig-cap-location: bottom
    fig-numbering: false  
  docx:
    toc: true
  html:
    toc: true
    knitr:
      opts_chunk:
        dev: "cairo_png"
execute:
  warning: false
  message: false
  repos: https://cloud.r-project.org
editor: visual
---

```{r, echo=FALSE, message=FALSE}
# rm(list = ls())
# ############## This is to help with packages in case they're not there #####
# options(repos = c(CRAN = "https://cloud.r-project.org"))
# 
# install_load <- function(packages, cran = "https://cloud.r-project.org") {
#   for (pkg in packages) {
#     if (!require(pkg, character.only = TRUE)) {
#       install.packages(pkg,
#                        dependencies = TRUE,
#                        repos        = cran)
#       library(pkg, character.only = TRUE)
#     }
#   }
# }
# 
# # then:
# packages <- c("dplyr","patchwork","cowplot","doParallel","ggplot2","foreach","future","parallel")
# install_load(packages)
# 
# # # Install and load the packages
# # #install_load(packages)
# # library(dplyr)
# # library(cowplot)
# # library(doParallel)
# # library(ggplot2)
# # library(foreach)
# # library(future)
# # library(parallel)
# # library(patchwork)


local_lib <- "~/R/library"
if (!dir.exists(local_lib)) {
  dir.create(local_lib, recursive = TRUE)
}

.libPaths(c(local_lib, .libPaths()))

install.packages(
  c("patchwork", "cowplot", "ggplot2", "doParallel", "stringi", "stringr", "tidyr", "forcats", "purrr", "furrr"),
  lib   = local_lib,
  repos = "https://cloud.r-project.org"
)

library(forcats)
library(stringi)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)

```

```{r, echo=FALSE, warning=FALSE}
###############################################################################
################################## Custom Theme ###############################
###############################################################################
mythemes <- theme_bw() +
  theme(
    text            = element_text(family = "sans"), 
    legend.position = "none",
    axis.text.x     = element_text(face = "bold", size = 40, angle =25, margin = margin(t = 20), hjust = 1),
    axis.text.y     = element_text(face = "bold", size = 40, angle = 15, margin = margin(r = 10)),
    axis.line       = element_line(size = 3),
    plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, margin = margin(b = 1, unit = "lines")),
    plot.margin     = unit(c(5, 1, 1, 1), "lines"),
    axis.title.x    = element_text(size = 40, face = "bold", margin = margin(t = 30)),
    axis.title.y    = element_text(size = 40, face = "bold", margin = margin(r = 35)),
    strip.text      = element_text(size = 40, face = "bold"),
    panel.spacing   = unit(5, "lines"),
    panel.grid      = element_blank()
  )

```

# 1. Instantaneous model

## 1.1. Alle frequency all parameters

```{r, warning=FALSE, echo=FALSE, fig.width = 40, fig.height = 55, message=FALSE}
rm(list = ls())
source("AlleleFrequencyPlotCode.R")
dirpath <- "../../Output.dir/LinFS.dir/"
pattern <- "^genome1_n(10|70|300)(?:\\D|$)"
result <- process_files(dirpath, pattern, "loci_gen")
#
instantplots_AF <- result$plots
```

### 1.1.1. Monogenic

```{r, warning=FALSE, fig.width = 40, fig.height = 55, echo=FALSE, message=FALSE}
#| label: Single_Locus_AllReplicates
#| fig-cap: "SI 1.1.1. Single locus (30 replicates) allele frequency dynamics for instantaneous selection, showing all parameter interactions. The highlighted line indicates the mean allele frequency for each generation across replicates."
#| fig-pos: "H"

library(dplyr)
library(ggplot2)

#####################################################
######### data processing function ##################
#####################################################

process_files <- function(dirpath, pattern) {
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  

  dataframes <- list()
  
  # Extracting parameters
  
  for (file in files) {
    fname <- basename(file) 
    H <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", fname))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", fname))
    SD <- as.numeric(sub(".*SD(\\d+).*", "\\1", fname))
    Gen <- as.numeric(sub(".*Gen(\\d+).*", "\\1", fname))
    replicate <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", fname))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(
        H         = H,
        loci      = loci,
        SD        = SD,
        Gen       = Gen,
        replicate = as.factor(replicate),
        h2_sd     = paste0("h2 = ", H, " sd = ", SD),
        loci_gen  = paste0("loci = ", loci, " gen = ", Gen)
      )
    
    dataframes[[fname]] <- data
  }
  
  # Combine all dataframes into one 
  
  combined_data <- bind_rows(dataframes)
  
  return(combined_data)
}

########################################################################
######### Process the files to get combined data and make a plot ######
#######################################################################

dirpath <- "../../Output.dir/LinFS.dir/"
pattern <- "^genome\\d+_n(1)_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

combined_data <- process_files(dirpath, pattern)

SingleLocusAF <- combined_data %>%
  mutate(
    H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen)
  ) %>% 
  ggplot(aes(x = Generation, y = Frequency)) +
  geom_line(aes(group = replicate),
            color = "gray50", 
            alpha = 0.8, 
            size = 0.5) +
  # geom_hline(yintercept = 0.5, 
  #            color = "red4", 
  #            alpha = 0.5, 
  #            size = 3) +
  stat_summary(fun = mean,
               aes(group = 1), 
               geom = "line", 
               color = "red4", 
               alpha = 1, 
               size = 2) +
  facet_wrap(~ H_SD_Gen, ncol = 3) +
  labs(
    x = "Generation",
    y = "Frequency"
  ) +
  theme_bw() +
  theme(
    text = element_text(family = "sans"),
    legend.position = "none",
    axis.text.x = element_text(face = "bold", size = 40, angle = 35,
                               hjust = 1, margin = margin(t = 10)),
    axis.text.y = element_text(face = "bold", size = 40, angle = 15,
                               margin = margin(r = 10)),
    axis.line   = element_line(size = 2),
    plot.title  = element_text(hjust = 0.01, face = "bold", size = 40),
    axis.title.x = element_text(size = 40, face = "bold",
                                margin = margin(t = 10)),
    axis.title.y = element_text(size = 40, face = "bold",
                                margin = margin(r = 10)),
    strip.text = element_text(size = 40, face = "bold"),
    panel.spacing = unit(5, "lines"),
    panel.grid = element_blank()
  )

SingleLocusAF
```

### 1.1.2. Oligogenic

```{r, fig.height = 30, fig.width = 30, echo=FALSE}
#| label: Inst_AF_Loci10Gen10
#| fig-cap: "SI 1.1.2.1 Allele frequency dynamics for all parameter combinations with selection length of 10 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"

Inst_AF_Loci10Gen10 <- instantplots_AF$`loci = 10 gen = 10` +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci10Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci10Gen20
#| fig-cap: "SI 1.1.2.2. Allele frequency dynamics for all parameter combinations with selection length of 20 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"
Inst_AF_Loci10Gen20 <- instantplots_AF$`loci = 10 gen = 20` +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci10Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci10Gen30
#| fig-cap: "SI 1.1.2.3. Allele frequency dynamics for all parameter combinations with selection length of 30 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"
Inst_AF_Loci10Gen30 <- instantplots_AF$`loci = 10 gen = 30` +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci10Gen30)
```

### 1.1.3. Polygenic 70 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci70Gen10
#| fig-cap: "SI 1.1.3.1. Allele frequency dynamics for all parameter combinations with selection length of 10 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"
Inst_AF_Loci70Gen10 <- instantplots_AF$`loci = 70 gen = 10` +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci70Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci70Gen20
#| fig-cap: "SI 1.1.3.2. Allele frequency dynamics for all parameter combinations with selection length of 20 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"
Inst_AF_Loci70Gen20 <- instantplots_AF$`loci = 70 gen = 20` +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci70Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci70Gen30
#| fig-cap: "SI 1.1.3.3. Allele frequency dynamics for all parameter combinations with selection length of 30 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"
Inst_AF_Loci70Gen30 <- instantplots_AF$`loci = 70 gen = 30` +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci70Gen30)
```

### 1.1.4. Polygenic 300 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci300Gen10
#| fig-cap: "SI 1.1.4.1. Allele frequency dynamics for all parameter combinations with selection length of 10 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

Inst_AF_Loci300Gen10 <- instantplots_AF$`loci = 300 gen = 10` +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci300Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci300Gen20
#| fig-cap: "SI 1.1.4.2. Allele frequency dynamics for all parameter combinations with selection length of 20 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

Inst_AF_Loci300Gen20 <- instantplots_AF$`loci = 300 gen = 20` +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci300Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_AF_Loci300Gen30
#| fig-cap: "SI 1.1.4.3. Allele frequency dynamics for all parameter combinations with selection length of 30 generations from a single replicate, instantaneous selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

Inst_AF_Loci300Gen30 <- instantplots_AF$`loci = 300 gen = 30` +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_AF_Loci300Gen30)
```

## 1.2. Spectral analysis for all parameters

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  
  theme_set(theme_classic())
  
   mythemes <- theme_bw() +
    theme(
      text            = element_text(family = "sans"), 
      legend.position = "none",
      axis.text.x     = element_text(face = "bold", size = 40, angle = 25, 
                                       margin = margin(t = 20), hjust = 1),
      axis.text.y     = element_text(face = "bold", size = 40, angle = 15, 
                                       margin = margin(r = 10)),
      axis.line       = element_line(size = 3),
      plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, 
                                       margin = margin(b = 1, unit = "lines")),
      plot.margin     = unit(c(5, 1, 1, 1), "lines"),
      axis.title.x    = element_text(size = 40, face = "bold", margin = margin(t = 30)),
      axis.title.y    = element_text(size = 40, face = "bold", margin = margin(r = 35)),
      strip.text      = element_text(size = 40, face = "bold"),
      panel.spacing   = unit(5, "lines"),
      panel.grid      = element_blank()
    )
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      # base_name = basename(file_name),
      # replct = str_extract(base_name, "genome\\d+"),
      # n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      # H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      # SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      # SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      # Gen = str_extract(base_name, "Gen\\d+"),
      # Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      base_name = basename(file_name),  
      n = ifelse(
         grepl("_n\\d+", base_name),
         as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
         NA_real_
           ),
      replct <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", base_name)),
      H = ifelse(
         grepl("_H[0-9]+\\.?[0-9]*", base_name),
         as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
         NA_real_
        ),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_
        ),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_
        ),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
     mutate(
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  num_cores <- detectCores()
  cl <- makeCluster(64)
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data 
  
  # Calculating the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Creating time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Computing spectral density 
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Preparing data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  

  plot_data <- bind_rows(plot_data_list)
  

  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)
    
  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = factor(replct), group = factor(replct))) +
    geom_line(size = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  }
  
  return(fft_plots)
}

```

```{r, echo=FALSE}
dirpath <- "../../Output.dir/LinFS.dir/"
pattern <- "^genome"
instantplots_SPA <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)

```

#### 1.2.1. Monogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci1Gen10
#| fig-cap: "SI 1.2.1.1. Spectral density across 30 replicates for monogenic trait (single locus) with instantaneous selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci1Gen10 <- instantplots_SPA[[1]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci1Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci1Gen20
#| fig-cap: "SI 1.2.1.2. Spectral density across 30 replicates for monogenic trait (single locus) with instantaneous selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci1Gen20 <- instantplots_SPA[[2]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci1Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci1Gen30
#| fig-cap: "SI 1.2.1.3. Spectral density across 30 replicates for monogenic trait (single locus) with instantaneous selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci1Gen30 <- instantplots_SPA[[3]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci1Gen30)
```

### 1.2.2. Oligogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci10Gen10
#| fig-cap: "SI 1.2.2.1. Spectral density across 30 replicates for oligogenic trait (10 loci) with instantaneous selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci10Gen10 <- instantplots_SPA[[4]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci10Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci10Gen20
#| fig-cap: "SI 1.2.2.2.  Spectral density across 30 replicates for oligogenic trait (10 loci) with instantaneous selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci10Gen20 <- instantplots_SPA[[5]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci10Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci10Gen30
#| fig-cap: "SI 1.2.2.3. Spectral density across 30 replicates for oligogenic trait (10 loci) with instantaneous selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci10Gen30 <- instantplots_SPA[[6]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci10Gen30)
```

### 1.2.3. Polygenic 70

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci70Gen10
#| fig-cap: "SI 1.2.3.1. Spectral density across 30 replicates for polygenic trait (70 loci) with instantaneous selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci70Gen10 <- instantplots_SPA[[7]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci70Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci70Gen20
#| fig-cap: "SI 1.2.3.2. Spectral density across 30 replicates for polygenic trait (70 loci) with instantaneous selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci70Gen20 <- instantplots_SPA[[8]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci70Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci70Gen30
#| fig-cap: "SI 1.2.3.3. Spectral density across 30 replicates for polygenic trait (70 loci) with instantaneous selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci70Gen30 <- instantplots_SPA[[9]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci70Gen30)
```

### 1.2.4. Polygenic 300

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci300Gen10
#| fig-cap: "SI 1.2.4.1. Spectral density across 30 replicates for polygenic trait (300 loci) with instantaneous selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci300Gen10 <- instantplots_SPA[[13]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci300Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci300Gen20
#| fig-cap: "SI 1.2.4.2. Spectral density across 30 replicates for polygenic trait (300 loci) with instantaneous selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci300Gen20 <- instantplots_SPA[[14]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci300Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Inst_Spect_Loci300Gen30
#| fig-cap: "SI 1.2.4.3. Spectral density across 30 replicates for polygenic trait (300 loci) with instantaneous selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

Inst_Spect_Loci300Gen30 <- instantplots_SPA[[15]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Inst_Spect_Loci300Gen30)
```

# 2. Gradual I model

## 2.1. Alle frequency all parameters

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("AlleleFrequencyPlotCode.R")
dirpath <- "../../Output.dir/SinFS.dir/"
pattern <- "^genome1_n(10|70|300)(?:\\D|$)"  #"^genome1\\D"
result <- process_files(dirpath, pattern, "loci_gen")

gradIplots_AF <- result$plots
```

### 2.1.1. Monogenic

```{r, warning=FALSE, fig.width = 40, fig.height = 55, echo=FALSE, message=FALSE}
#| label: GradI_Single_Locus_AllReplicates
#| fig-cap: "SI 2.1.1. Single locus 30 replicates allele frequency dynamics for gradual two equal seasons selection model, showing all parameter interactions. The highlighted line indicates the mean allele frequency for each generation."
#| fig-pos: "H"

library(dplyr)
library(ggplot2)


#####################################################
######### data processing function ##################
#####################################################

process_files <- function(dirpath, pattern) {
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  dataframes <- list()
  
  # Extracting parameters
  
  for (file in files) {
    fname <- basename(file) 
    H <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", fname))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", fname))
    SD <- as.numeric(sub(".*SD(\\d+).*", "\\1", fname))
    Gen <- as.numeric(sub(".*Gen(\\d+).*", "\\1", fname))
    replicate <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", fname))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(
        H         = H,
        loci      = loci,
        SD        = SD,
        Gen       = Gen,
        replicate = as.factor(replicate),
        h2_sd     = paste0("h2 = ", H, " sd = ", SD),
        loci_gen  = paste0("loci = ", loci, " gen = ", Gen)
      )
    
    dataframes[[fname]] <- data
  }
  
  # Combine all dataframes into one 
  
  combined_data <- bind_rows(dataframes)
  
  return(combined_data)
}

########################################################################
######### Process the files to get combined data and make a plot ######
#######################################################################

dirpath <- "../../Output.dir/SinFS.dir/"
pattern <- "^genome\\d+_n(1)_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

combined_data <- process_files(dirpath, pattern)

SingleLocusAF <- combined_data %>%
  mutate(
    H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen)
  ) %>% 
  ggplot(aes(x = Generation, y = Frequency)) +
  geom_line(aes(group = replicate),
            color = "gray50", 
            alpha = 0.8, 
            size = 0.5) +
  # geom_hline(yintercept = 0.5, 
  #            color = "red4", 
  #            alpha = 0.5, 
  #            size = 3) +
  stat_summary(fun = mean,
               aes(group = 1), 
               geom = "line", 
               color = "red3", 
               alpha = 1, 
               size = 2) +
  facet_wrap(~ H_SD_Gen, ncol = 3) +
  labs(
    x = "Generation",
    y = "Frequency"
  ) +
  theme_bw() +
  theme(
    text = element_text(family = "sans"),
    legend.position = "none",
    axis.text.x = element_text(face = "bold", size = 40, angle = 35,
                               hjust = 1, margin = margin(t = 10)),
    axis.text.y = element_text(face = "bold", size = 40, angle = 15,
                               margin = margin(r = 10)),
    axis.line   = element_line(size = 2),
    plot.title  = element_text(hjust = 0.01, face = "bold", size = 40),
    axis.title.x = element_text(size = 40, face = "bold",
                                margin = margin(t = 10)),
    axis.title.y = element_text(size = 40, face = "bold",
                                margin = margin(r = 10)),
    strip.text = element_text(size = 40, face = "bold"),
    panel.spacing = unit(5, "lines"),
    panel.grid = element_blank()
  )

SingleLocusAF
```

### 2.1.2. Oligogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci10Gen10
#| fig-cap: "SI 2.1.2.1. Allele frequency dynamics for all parameter combinations with selection length of 10 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"

GradualI_AF_Loci10Gen10 <- gradIplots_AF$`loci = 10 gen = 10` +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci10Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci10Gen20
#| fig-cap: "SI 2.1.2.2. Allele frequency dynamics for all parameter combinations with selection length of 20 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"
GradualI_AF_Loci10Gen20 <- gradIplots_AF$`loci = 10 gen = 20` +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci10Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci10Gen30
#| fig-cap: "SI 2.1.2.3. Allele frequency dynamics for all parameter combinations with selection length of 30 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"
GradualI_AF_Loci10Gen30 <- gradIplots_AF$`loci = 10 gen = 30` +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci10Gen30)
```

### 2.1.3. Polygenic 70 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci70Gen10
#| fig-cap: "SI 2.1.3.1. Allele frequency dynamics for all parameter combinations with selection length of 10 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"
GradualI_AF_Loci70Gen10 <- gradIplots_AF$`loci = 70 gen = 10` +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci70Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci70Gen20
#| fig-cap: "SI 2.1.3.2. Allele frequency dynamics for all parameter combinations with selection length of 20 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"
GradualI_AF_Loci70Gen20 <- gradIplots_AF$`loci = 70 gen = 20` +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci70Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci70Gen30
#| fig-cap: "SI 2.1.3.3. Allele frequency dynamics for all parameter combinations with selection length of 30 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"
GradualI_AF_Loci70Gen30 <- gradIplots_AF$`loci = 70 gen = 30` +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci70Gen30)
```

### 2.1.4. Polygenic 300 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci300Gen10
#| fig-cap: "SI 2.1.4.1. Allele frequency dynamics for all parameter combinations with selection length of 10 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

GradualI_AF_Loci300Gen10 <- gradIplots_AF$`loci = 300 gen = 10` +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci300Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci300Gen20
#| fig-cap: "SI 2.1.4.2. Allele frequency dynamics for all parameter combinations with selection length of 20 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

GradualI_AF_Loci300Gen20 <- gradIplots_AF$`loci = 300 gen = 20` +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci300Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_AF_Loci300Gen30
#| fig-cap: "SI 2.1.4.3. Allele frequency dynamics for all parameter combinations with selection length of 30 generations from a single replicate, gradual two equal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

GradualI_AF_Loci300Gen30 <- gradIplots_AF$`loci = 300 gen = 30` +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_AF_Loci300Gen30)
```

## 2.2. Spectral analysis for all parameters

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  
  
  theme_set(theme_classic())
  
  mythemes <- theme_bw() +
    theme(
      text            = element_text(family = "sans"), 
      legend.position = "none",
      axis.text.x     = element_text(face = "bold", size = 40, angle = 25, 
                                       margin = margin(t = 20), hjust = 1),
      axis.text.y     = element_text(face = "bold", size = 40, angle = 15, 
                                       margin = margin(r = 10)),
      axis.line       = element_line(size = 3),
      plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, 
                                       margin = margin(b = 1, unit = "lines")),
      plot.margin     = unit(c(5, 1, 1, 1), "lines"),
      axis.title.x    = element_text(size = 40, face = "bold", margin = margin(t = 30)),
      axis.title.y    = element_text(size = 40, face = "bold", margin = margin(r = 35)),
      strip.text      = element_text(size = 40, face = "bold"),
      panel.spacing   = unit(5, "lines"),
      panel.grid      = element_blank()
    )
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),  
      n = ifelse(
         grepl("_n\\d+", base_name),
         as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
         NA_real_
           ),
      replct <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", base_name)),
      H = ifelse(
         grepl("_H[0-9]+\\.?[0-9]*", base_name),
         as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
         NA_real_
        ),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_
        ),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_
        ),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(64)
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data 
  
  # Calculating the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Creating time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Computing spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Preparing data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  

  plot_data <- bind_rows(plot_data_list)
  

  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)

  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = factor(replct), group = factor(replct))) +
    geom_line(size = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 12, fig.width = 8, echo=FALSE}
dirpath <- "../../Output.dir/SinFS.dir/"
pattern <- "^genome"
gradIplots_SPA <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)

```

#### 2.2.1. Monogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci1Gen10
#| fig-cap: "SI 2.2.1.1. Spectral density across 30 replicates for monogenic trait (1 locus) with gradual two equal seasons selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci1Gen10 <- gradIplots_SPA[[1]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci1Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci1Gen20
#| fig-cap: "SSI 2.2.1.2. Spectral density across 30 replicates for monogenic trait (1 locus) with gradual two equal seasons selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci1Gen20 <- gradIplots_SPA[[2]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci1Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci1Gen30
#| fig-cap: "SI 2.2.1.3. Spectral density across 30 replicates for monogenic trait (1 locus) with gradual two equal seasons selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci1Gen30 <- gradIplots_SPA[[3]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci1Gen30)
```

### 2.2.2. Oligogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci10Gen10
#| fig-cap: "SI 2.2.2.1. Spectral density across 30 replicates for oligogenic trait (10 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci10Gen10 <- gradIplots_SPA[[4]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci10Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci10Gen20
#| fig-cap: "SI 2.2.2.2. Spectral density across 30 replicates for oligogenic trait (10 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci10Gen20 <- gradIplots_SPA[[5]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci10Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci10Gen30
#| fig-cap: "SI 2.2.2.3. Spectral density across 30 replicates for oligogenic trait (10 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci10Gen30 <- gradIplots_SPA[[6]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci10Gen30)
```

### 2.2.3. Polygenic 70

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci70Gen10
#| fig-cap: "SSI 2.2.3.1. Spectral density across 30 replicates for polygenic trait (70 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci70Gen10 <- gradIplots_SPA[[7]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci70Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci70Gen20
#| fig-cap: "SI 2.2.3.2. Spectral density across 30 replicates for polygenic trait (70 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci70Gen20 <- gradIplots_SPA[[8]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci70Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci70Gen30
#| fig-cap: "SI 2.2.3.3. Spectral density across 30 replicates for polygenic trait (70 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci70Gen30 <- gradIplots_SPA[[9]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci70Gen30)
```

### 2.2.4. Polygenic 300

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci300Gen10
#| fig-cap: "SI 2.2.4.1. Spectral density across 30 replicates for polygenic trait (300 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 10 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci300Gen10 <- gradIplots_SPA[[13]] +
  ggtitle("Season Length (Gen) = 10") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci300Gen10)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci300Gen20
#| fig-cap: "SI 2.2.4.2. Spectral density across 30 replicates for polygenic trait (300 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 20 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci300Gen20 <- gradIplots_SPA[[14]] +
  ggtitle("Season Length (Gen) = 20") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci300Gen20)
```

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradualI_Spect_Loci300Gen30
#| fig-cap: "SI 2.2.4.3. Spectral density across 30 replicates for polygenic trait (300 loci) with gradual two equal seasons selection model, all parameter combinations with selection length of 30 generations. Each peak  represents a full cycle of selection period."
#| fig-pos: "H"

GradualI_Spect_Loci300Gen30 <- gradIplots_SPA[[15]] +
  ggtitle("Season Length (Gen) = 30") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradualI_Spect_Loci300Gen30)
```

# 3. Gradual II model

## 3.1. Alle frequency all parameters for a single replicate

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("AlleleFrequencyPlotCode.R")
dirpath <- "../../Output.dir/SinFSGen.dir/"
pattern <- pattern <- "^genome1_n(10|70|300)(?:\\D|$)"  #"^genome1\\D" 
result <- process_files(dirpath, pattern, "loci")
#
gradIIplots_AF <- result$plots
```

### 3.1.1. Monogenic

```{r, warning=FALSE, fig.width = 30, fig.height = 20, echo=FALSE, message=FALSE}
#| label: GradII_Single_Locus_AllReplicates
#| fig-cap: "SSI 3.1.1. Single locus 30 replicates allele frequency dynamics for gradual four unequal seasons selection model, showing all parameter interactions. The highlighted line indicates the mean allele frequency for each generation."
#| fig-pos: "H"
#| 
#####################################################
######### data processing function ##################
#####################################################

process_files <- function(dirpath, pattern) {
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  

  dataframes <- list()
  
  # Extracting parameters
  
  for (file in files) {
    fname <- basename(file) 
    H <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", fname))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", fname))
    SD <- as.numeric(sub(".*SD(\\d+).*", "\\1", fname))
    replicate <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", fname))
    
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(
        H         = H,
        loci      = loci,
        SD        = SD,
        replicate = as.factor(replicate))

    dataframes[[fname]] <- data
  }
  
  # Combine all dataframes into one 
  
  combined_data <- bind_rows(dataframes)
  
  return(combined_data)
}

########################################################################
######### Process the files to get combined data and make a plot ######
#######################################################################

dirpath <- "../../Output.dir/SinFSGen.dir/"
pattern <- "^genome\\d+_n(1)_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

combined_data <- process_files(dirpath, pattern)

GradII_SingleLocusAF <- combined_data %>%
  mutate(
    h2_sd = paste0("SD = ", SD, ": ",  "h\u00B2 = ", H)
  ) %>% 
  ggplot(aes(x = Generation, y = Frequency)) +
  geom_line(aes(group = replicate),
            color = "gray50", 
            alpha = 0.8, 
            size = 0.5) +
  stat_summary(fun = mean,
               aes(group = 1), 
               geom = "line", 
               color = "red3", 
               alpha = 1, 
               size = 2) +
  facet_wrap(~ h2_sd, ncol = 3) +
  labs(
    x = "Generation",
    y = "Frequency"
  ) +
  theme_bw() +
  theme(
    text = element_text(family = "sans"),
    legend.position = "none",
    axis.text.x = element_text(face = "bold", size = 40, angle = 35,
                               hjust = 1, margin = margin(t = 10)),
    axis.text.y = element_text(face = "bold", size = 40, angle = 15,
                               margin = margin(r = 10)),
    axis.line   = element_line(size = 2),
    plot.title  = element_text(hjust = 0.01, face = "bold", size = 40),
    axis.title.x = element_text(size = 40, face = "bold",
                                margin = margin(t = 10)),
    axis.title.y = element_text(size = 40, face = "bold",
                                margin = margin(r = 10)),
    strip.text = element_text(size = 40, face = "bold"),
    panel.spacing = unit(5, "lines"),
    panel.grid = element_blank()
  )

GradII_SingleLocusAF
```

### 3.1.2. Oligogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradII_Olig_AF
#| fig-cap: "SI 3.1.2. Allele frequency dynamics for all parameter combinations from a single replicate, gradual four unequal seasons selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"

GradII_Olig_AF <- gradIIplots_AF[[10]] +
  ggtitle("Gradual II Oligogenic") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradII_Olig_AF)
```

### 3.1.3. Polygenic 70 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradII_Poly_70_AF
#| fig-cap: "SI 3.1.3. Allele frequency dynamics for all parameter combinations from a single replicate, gradual four unequal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (70 loci)."
#| fig-pos: "H"

GradII_Poly_70_AF <- gradIIplots_AF[[70]] +
  ggtitle("Gradual II Poligenic (70 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradII_Poly_70_AF)
```

### 3.1.4. Polygenic 300 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradII_Poly_300_AF
#| fig-cap: "SI 3.1.4. Allele frequency dynamics for all parameter combinations from a single replicate, gradual four unequal seasons selection model. Each line  represents the frequency trajectory for a locus from polygenic trait (300 loci)."
#| fig-pos: "H"

GradII_Poly_300_AF <- gradIIplots_AF[[300]] +
  ggtitle("Gradual II Poligenic (300 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradII_Poly_300_AF)
```

## 3.2. Spectral analysis for all parameters

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  
  
  theme_set(theme_classic())
  
  mythemes <- theme_bw() +
    theme(
      text            = element_text(family = "sans"), 
      legend.position = "none",
      axis.text.x     = element_text(face = "bold", size = 40, angle = 25, 
                                       margin = margin(t = 20), hjust = 1),
      axis.text.y     = element_text(face = "bold", size = 40, angle = 15, 
                                       margin = margin(r = 10)),
      axis.line       = element_line(size = 3),
      plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, 
                                       margin = margin(b = 1, unit = "lines")),
      plot.margin     = unit(c(5, 1, 1, 1), "lines"),
      axis.title.x    = element_text(size = 40, face = "bold", margin = margin(t = 30)),
      axis.title.y    = element_text(size = 40, face = "bold", margin = margin(r = 35)),
      strip.text      = element_text(size = 40, face = "bold"),
      panel.spacing   = unit(5, "lines"),
      panel.grid      = element_blank()
    )
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),  
      n = ifelse(
         grepl("_n\\d+", base_name),
         as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
         NA_real_
           ),
      replct <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", base_name)),
      H = ifelse(
         grepl("_H[0-9]+\\.?[0-9]*", base_name),
         as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
         NA_real_
        ),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_
        ),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_
        ),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(64)
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data 
  
  # Calculating the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Creating time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Computing spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Preparing data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  

  plot_data <- bind_rows(plot_data_list)
  

  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)

  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = factor(replct), group = factor(replct))) +
    geom_line(size = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 8, fig.width = 12, echo=FALSE}
dirpath <- "../../Output.dir/SinFSGen.dir/"
pattern <- "^genome"
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)
```

### 3.2.1. Polygenic 70

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradII_Poly_70_SA
#| fig-cap: "SI 3.2.1. Spectral density across 30 replicates for polygenic trait (70 loci) with gradual four unequal seasons selection model, all parameter combinations. For high parameters, ach peak  represents one of the four full cycle of selection periods while the peaks are murky under low heritability and selection pressure (first column)."
#| fig-pos: "H"

GradII_Poly_70_SA <- result[[3]] +
  ggtitle("Spectral Density: Gradual II Polygenic (70 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradII_Poly_70_SA)
```

### 3.2.2. Polygenic 300

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: GradII_GradII_Poly_300_SA
#| fig-cap: "SI 3.2.2. Spectral density across 30 replicates for polygenic trait (300 loci) with gradual four unequal seasons selection model, all parameter combinations. For high parameters, ach peak  represents one of the four full cycle of selection periods while the peaks are murky under low heritability and selection pressure (first column)."
#| fig-pos: "H"
GradII_GradII_Poly_300_SA <- result[[5]] +
  ggtitle("Spectral Density: Gradual II Polygenic (300 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(GradII_GradII_Poly_300_SA)
```

# 4. Neutral model

```{r, warning=FALSE, fig.width = 20, fig.height = 5, echo=FALSE, message=FALSE}
## | label: NS_All_Locus_AllReplicates
## | fig-cap: "SI 2.1.1. Single locus 30 replicates allele frequency dynamics for gradual two equal seasons selection model, showing all parameter interactions. The highlighted line indicates the mean allele frequency for each generation."
## | fig-pos: "H"
library(dplyr)
library(ggplot2)


#####################################################
######### data processing function ##################
#####################################################

process_files <- function(dirpath, pattern) {
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  # List to store data frames
  dataframes <- list()
  
  # Get parameters from the file name and read dataset
  for (file in files) {
    fname <- basename(file) 
    H <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", fname))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", fname))
    SD <- as.numeric(sub(".*SD(\\d+).*", "\\1", fname))
    Gen <- as.numeric(sub(".*Gen(\\d+).*", "\\1", fname))
    replicate <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", fname))
    
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(
        H         = H,
        loci      = loci,
        SD        = SD,
        Gen       = Gen,
        replicate = as.factor(replicate),
        h2_sd     = paste0("h\u00B2 = ", H, " sd = ", SD),
        loci_gen  = paste0("loci = ", loci, " gen = ", Gen),
        loci_facet = paste0("Loci = ", loci)
      ) %>%
      mutate(loci_facet = factor(loci_facet, 
                                 levels = c("Loci = 1", "Loci = 10", "Loci = 70",
                                            "Loci = 100", "Loci = 300")))
    
    dataframes[[fname]] <- data
  }
  
  # Combine all dataframes into one 
  combined_data <- bind_rows(dataframes)
  
  return(combined_data)
}

########################################################################
######### Process the files to get combined data #####################
########################################################################

dirpath <- "../../Output.dir/NS.dir/"
pattern <- "^genome\\d+_n(1|10|300)_H0\\.(8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

combined_data <- process_files(dirpath, pattern)

# For each replicate (and loci group), randomly sample one position
# (Assuming the CSVs have a column named "Position")
set.seed(45696546)  # for reproducibility

sampled_data <- combined_data %>%
  group_by(replicate, loci) %>%
  group_modify(~ {
      unique_pos <- unique(.x$Position)
      # If there's only one unique position, retain it; otherwise, sample one
      selected_pos <- if(length(unique_pos) == 1) unique_pos else sample(unique_pos, 1)
      filter(.x, Position == selected_pos)
  }) %>%
  ungroup()


########################################################################
######### Create the plot using the sampled data #####################
########################################################################

sampledreplc_AF <- sampled_data %>%
  mutate(
    H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen)
  ) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = replicate)) +
  geom_line(aes(group = (replicate)),
            #color = (replicate), #"gray50", 
            alpha = 1, 
            size = 0.2) +
  # stat_summary(fun = mean,
  #              aes(group = 1), 
  #              geom = "line", 
  #              color = "red3", 
  #              alpha = 1, 
  #              size = 1) +
  facet_wrap(~ loci_facet, ncol = 3) +
  labs(
    x = "Generation",
    y = "Frequency"
  ) +
  theme_bw() +
  theme(
    text = element_text(family = "sans"),
    legend.position = "none",
    axis.text.x = element_text(face = "bold", size = 20, angle = 35,
                               hjust = 1, margin = margin(t = 10)),
    axis.text.y = element_text(face = "bold", size = 20, angle = 15,
                               margin = margin(r = 10)),
    axis.line   = element_line(size = 2),
    plot.title  = element_text(hjust = 0.01, face = "bold", size = 20),
    axis.title.x = element_text(size = 30, face = "bold",
                                margin = margin(t = 10)),
    axis.title.y = element_text(size = 30, face = "bold",
                                margin = margin(r = 10)),
    strip.text = element_text(size = 20, face = "bold"),
    panel.spacing = unit(5, "lines"),
    panel.grid = element_blank()
  )

```

## 4.1. Neutral selection Allele frequency

```{r, fig.width = 20, fig.height = 5, echo=FALSE, message = FALSE}
#| label: NS_All_Locus_AllReplicates
#| fig-cap: "SI 4.1. Allele frequency dynamics for monogenic, oligogec (10 loci), and polygenic (300 loci) traits models. Each line represent a single locus sampled from all loci within a single replicate of each model."
#| 
sampledreplc_AF
```

## 4.2. Neutral selection phenotypes

```{r, echo=FALSE}
pheno_processing <- function(dirpath, pattern) {
  mythemes <- theme_bw() +
    theme(
      text            = element_text(family = "sans"), 
      legend.position = "none",
      axis.text.x     = element_text(face = "bold", size = 20, angle = 25, 
                                       margin = margin(t = 20), hjust = 1),
      axis.text.y     = element_text(face = "bold", size = 20, angle = 15, 
                                       margin = margin(r = 10)),
      axis.line       = element_line(size = 3),
      plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, 
                                       margin = margin(b = 1, unit = "lines")),
      plot.margin     = unit(c(5, 1, 1, 1), "lines"),
      axis.title.x    = element_text(size = 30, face = "bold", margin = margin(t = 30)),
      axis.title.y    = element_text(size = 30, face = "bold", margin = margin(r = 35)),
      strip.text      = element_text(size = 20, face = "bold"),
      panel.spacing   = unit(5, "lines"),
      panel.grid      = element_blank()
    )
  
  files <- list.files(dirpath, pattern, full.names = TRUE)
 
  data_list <- list()

  for(file in files) {
    fname <- basename(file) 
    herit <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", fname))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", fname))
    replicate_id <- as.numeric(sub(".*MeanPhenotypes(\\d+)_.*", "\\1", fname))
    
    
   data <- read.csv(file, header = TRUE) %>%
  mutate(
    replicate  = as.factor(replicate_id),
    herit      = herit,  # ensure herit is numeric
    loci       = loci,   # ensure loci is numeric
    #loci_facet = paste0("Loci = ", loci, ": h\u00B2 = ", herit)
    loci_facet = paste0("Loci = ", loci)
      ) %>%
      mutate(loci_facet = factor(loci_facet, 
                                 levels = c("Loci = 1", "Loci = 10", "Loci = 70",
                                            "Loci = 100", "Loci = 300")))
    data_list[[file]] <- data
  }
  
  combined_data <- bind_rows(data_list)

  
  # Create the plot using the chosen facet variable.
  p <- combined_data %>%
    ggplot(aes(Generation, Phenotype, color = replicate)) +
    geom_line(size = 1) +
    facet_wrap(~loci_facet, scales = "free", ncol = 3) +
    mythemes
  
  return(list(combined_data = combined_data, plot = p))
}

```

```{r, fig.width = 25, fig.height = 7, echo=FALSE, message = FALSE}
#| label: Ns_Pheno_All_architectures
#| fig-cap: "SI 4.2. Mean population phenotypic plot across 30 replicates (each line represents a single replicate) for neutral selection, showing parameter interactions."
#| fig-pos: "H"
dirpath <- "../../Output.dir/NS.dir/"
pattern <- "^MeanPhenotypes\\d+_n(1|10|300)_H0\\.(8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"
result <- pheno_processing(dirpath, pattern)

result$plot
```

## 4.3. Neutral selection spectral analysis

```{r, echo=FALSE}

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  
  
  # Set a classic theme globally
  theme_set(theme_classic())
  
  mythemes <- theme_bw() +
    theme(
      text            = element_text(family = "sans"), 
      legend.position = "none",
      axis.text.x     = element_text(face = "bold", size = 20, angle = 25, 
                                       margin = margin(t = 20), hjust = 1),
      axis.text.y     = element_text(face = "bold", size = 20, angle = 15, 
                                       margin = margin(r = 10)),
      axis.line       = element_line(size = 3),
      plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, 
                                       margin = margin(b = 1, unit = "lines")),
      plot.margin     = unit(c(5, 1, 1, 1), "lines"),
      axis.title.x    = element_text(size = 30, face = "bold", margin = margin(t = 30)),
      axis.title.y    = element_text(size = 30, face = "bold", margin = margin(r = 35)),
      strip.text      = element_text(size = 20, face = "bold"),
      panel.spacing   = unit(5, "lines"),
      panel.grid      = element_blank()
    )
  
  # List files matching the pattern
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame of file names and extract parameters
  files_df <- data.frame(file_name = file_list, stringsAsFactors = FALSE) %>%
    mutate(
      base_name = basename(file_name),  
      n = ifelse(
         grepl("_n\\d+", base_name),
         as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
         NA_real_
           ),
      replct <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", base_name)),
      H = ifelse(
         grepl("_H[0-9]+\\.?[0-9]*", base_name),
         as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
         NA_real_
        ),
      Genome = case_when(
        n == "1"   ~ "Monogenic",
        n == "10"  ~ "Oligogenic",
        n == "70"  ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE       ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      # Use n here so the facet label matches your desired order
      param_combination = paste0("Loci = ", n, ": h\u00B2 = ", H)
    )
  
  # Set up the parallel backend using detected cores
  cl <- makeCluster(64)
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel.
  combined_data_list <- foreach(i = seq_along(files_df$file_name), 
                                .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        H = params$H,
        Genome = params$Genome,
        n = params$n,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, H, Genome, n, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)
  
  filtered_data <- combined_data
  
  # Calculating the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, replct, H, Genome, n, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Creating time series objects per grouping
  ts_data_list <- mean_allele_data %>%
    group_by(Genome, replct, H, n, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)),
              .groups = 'drop')
  
  # Computing spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Preparing data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), 
                            .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      replct = params$replct,
      H = params$H,
      Genome = params$Genome,
      n = params$n,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  
  # Combine plot data and filter based on a threshold
  plot_data <- bind_rows(plot_data_list) %>%
    group_by(param_combination) %>%
    mutate(threshold = 80) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    #mutate(loci_facet = paste0("Loci = ", n, ": h\u00B2 = ", H))
    mutate(loci_facet = paste0("Loci = ", n)) %>%
    mutate(loci_facet = factor(loci_facet,
                               levels = c("Loci = 1", "Loci = 10", "Loci = 70", 
                                          "Loci = 100", "Loci = 300")))
  

  fft_plots <- ggplot(plot_data, aes(x = Period, y = Spectrum, color = factor(replct), group = factor(replct))) +
    geom_line(size = 1.1) +
    facet_wrap(~ loci_facet, scales = "free", ncol = 3) +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  
  return(fft_plots)
}

```

```{r, fig.width = 25, fig.height = 7, echo=FALSE}
#| label: Ns_SpectralAnalysis_All_architectures
#| fig-cap: "SI 4.3. Spectral density across 30 replicates for all genetic architecture under neutral selection model. The density plots do not show any peak as selection is purely driven by random drift."
#| fig-pos: "H"
#| 
dirpath <- "../../Output.dir/NS.dir/"
pattern <- "^genome\\d+_n(1|10|300)_H0\\.(8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$" 
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)
result
```

# 5. Constant model

## 5.1. Alle frequency all parameters for a single replicate

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("AlleleFrequencyPlotCode.R")
dirpath <- "../../Output.dir/CS.dir/"
pattern <- pattern <- "^genome1_n(10|70|300)(?:\\D|$)" 
result <- process_files(dirpath, pattern, "loci")

plots <- result$plots
```

### 5.1.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: CS_Single_Locus_AllReplicates
#| fig-cap: "SI 5.1.1. Single locus 30 replicates allele frequency dynamics for constant selection model, showing all parameter interactions. The highlighted line indicates the mean allele frequency for each generation."
#| fig-pos: "H"
#| 
#####################################################
######### data processing function ##################
#####################################################

process_files <- function(dirpath, pattern) {
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  

  dataframes <- list()
  
  # Extracting parameters
  
  for (file in files) {
    fname <- basename(file) 
    H <- as.numeric(sub(".*_H(0\\.\\d+).*", "\\1", fname))
    loci <- as.numeric( sub(".*_n(\\d+)_.*", "\\1", fname))
    SD <- as.numeric(sub(".*SD(\\d+).*", "\\1", fname))
    replicate <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", fname))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(
        H         = H,
        loci      = loci,
        SD        = SD,
        replicate = as.factor(replicate))

    dataframes[[fname]] <- data
  }
  
  # Combine all dataframes into one 
  
  combined_data <- bind_rows(dataframes)
  
  return(combined_data)
}

########################################################################
######### Process the files to get combined data and make a plot ######
#######################################################################

dirpath <- "../../Output.dir/CS.dir/"
pattern <- "^genome\\d+_n(1)_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

combined_data <- process_files(dirpath, pattern)

CS_SingleLocusAF <- combined_data %>%
  mutate(
    h2_sd = paste0("SD = ", SD, ": ",  "h\u00B2 = ", H)
  ) %>% 
  ggplot(aes(x = Generation, y = Frequency)) +
  geom_line(aes(group = replicate),
            color = "gray50", 
            alpha = 0.8, 
            size = 0.5) +
  stat_summary(fun = mean,
               aes(group = 1), 
               geom = "line", 
               color = "red3", 
               alpha = 1, 
               size = 2) +
  facet_wrap(~ h2_sd, ncol = 3) +
  labs(
    x = "Generation",
    y = "Frequency"
  ) +
  theme_bw() +
  theme(
    text = element_text(family = "sans"),
    legend.position = "none",
    axis.text.x = element_text(face = "bold", size = 40, angle = 35,
                               hjust = 1, margin = margin(t = 10)),
    axis.text.y = element_text(face = "bold", size = 40, angle = 15,
                               margin = margin(r = 10)),
    axis.line   = element_line(size = 2),
    plot.title  = element_text(hjust = 0.01, face = "bold", size = 40),
    axis.title.x = element_text(size = 40, face = "bold",
                                margin = margin(t = 10)),
    axis.title.y = element_text(size = 40, face = "bold",
                                margin = margin(r = 10)),
    strip.text = element_text(size = 40, face = "bold"),
    panel.spacing = unit(5, "lines"),
    panel.grid = element_blank()
  )

CS_SingleLocusAF
```

### 5.1.2. Oligogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Olig_AF
#| fig-cap: "SSI 5.1.2. Allele frequency dynamics for all parameter combinations from a single replicate, constant selection model. Each line  represents the frequency trajectory for a locus from oligogenic trait (10 loci)."
#| fig-pos: "H"

Constant_Olig_AF <- plots[[10]] +
  ggtitle("AF: Constantant Oligogenic") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Olig_AF)
```

### 5.1.3. Polygenic 70 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Poly_70_AF
#| fig-cap: "SSI 5.1.3: Allele frequency dynamics for all parameter combinations from a single replicate, constant selection model. Each line  represents the frequency trajectory for a locus of 30 sampled loci from polygenic trait (70 loci)."
#| fig-pos: "H"

Constant_Poly_70_AF <- plots[[70]] +
  ggtitle("AF: Constantant Polygenic (70 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Poly_70_AF)
```

### 5.1.4. Polygenic 300 loci

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Poly_300_AF
#| fig-cap: "SI 5.1.4. Allele frequency dynamics for all parameter combinations from a single replicate, constant selection model. Each line  represents the frequency trajectory for a locus of 30 sampled loci from polygenic trait (300 loci)."
#| fig-pos: "H"

Constant_Poly_300_AF <- plots[[300]] +
  ggtitle("AF: Constantant Polygenic (300 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Poly_300_AF)
```

## 5.2. Phenotypes all params

```{r, echo=FALSE}
source("PhenotypePlotCode.R")
dirpath <- "../../Output.dir/CS.dir/"
pattern <- "^MeanPhenotypes"
result <- process_files(dirpath, pattern, "loci")

plots <- result$plots

```

### 5.2.1. Polygenic 70

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Poly_70_Pheno
#| fig-cap: "SI 5.2.1. Polygenic (70 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

Constant_Poly_70_Pheno <- plots[[70]] +
  ggtitle("Phenotypes: Constantant Polygenic (70 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Poly_70_Pheno)
```

### 5.2.2. Polygenic 100

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Poly_100_Pheno
#| fig-cap: "SI 5.2.2 Polygenic (100 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"


Constant_Poly_100_Pheno <- plots[[100]] +
  ggtitle("Phenotypes: Constantant Polygenic (100 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Poly_100_Pheno)
```

### 5.2.3. Polygenic 300

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Poly_300_Pheno
#| fig-cap: "SI 5.2.3. Polygenic (300 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

Constant_Poly_300_Pheno <- plots[[300]] +
  ggtitle("Phenotypes: Constantant Polygenic (300 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Poly_300_Pheno)
```

## 5.3. Spectral analysis for all parameters

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  
  
  theme_set(theme_classic())
  
  mythemes <- theme_bw() +
    theme(
      text            = element_text(family = "sans"), 
      legend.position = "none",
      axis.text.x     = element_text(face = "bold", size = 40, angle = 25, 
                                       margin = margin(t = 20), hjust = 1),
      axis.text.y     = element_text(face = "bold", size = 40, angle = 15, 
                                       margin = margin(r = 10)),
      axis.line       = element_line(size = 3),
      plot.title      = element_text(hjust = 0.01, face = "bold", size = 80, 
                                       margin = margin(b = 1, unit = "lines")),
      plot.margin     = unit(c(5, 1, 1, 1), "lines"),
      axis.title.x    = element_text(size = 40, face = "bold", margin = margin(t = 30)),
      axis.title.y    = element_text(size = 40, face = "bold", margin = margin(r = 35)),
      strip.text      = element_text(size = 40, face = "bold"),
      panel.spacing   = unit(5, "lines"),
      panel.grid      = element_blank()
    )
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),  
      n = ifelse(
         grepl("_n\\d+", base_name),
         as.numeric(sub(".*_n(\\d+).*", "\\1", base_name)),
         NA_real_
           ),
      replct <- as.numeric(sub(".*genome(\\d+)_.*", "\\1", base_name)),
      H = ifelse(
         grepl("_H[0-9]+\\.?[0-9]*", base_name),
         as.numeric(sub(".*_H([0-9]+\\.?[0-9]*).*", "\\1", base_name)),
         NA_real_
        ),
      SD = ifelse(
        grepl("SD[0-9]+(\\.[0-9]+)?", base_name),
        as.numeric(sub(".*SD([0-9]+(?:\\.[0-9]+)?).*", "\\1", base_name)),
        NA_real_
        ),
      Gen = ifelse(
        grepl("Gen\\d+", base_name),
        as.numeric(sub(".*Gen(\\d+).*", "\\1", base_name)),
        NA_real_
        ),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(64)
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data 
  
  # Calculating the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Creating time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Computing spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Preparing data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  

  plot_data <- bind_rows(plot_data_list)
  
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)

  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = factor(replct), group = factor(replct))) +
    geom_line(size = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 12, fig.width = 8, echo=FALSE}
dirpath <- "../../Output.dir/CS.dir/"
pattern <- "^genome"
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)

```

### 5.3.1. Monogenic

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Mono_SA
#| fig-cap: "SI 5.3.1. Spectral density across 30 replicates for monogenic trait (single locus) with constant selection model, all parameter combinations. The density plots do not show any peak, and indication that there is no periodicity."
#| fig-pos: "H"

Constant_Mono_SA <- result[[1]] +
  ggtitle("Spectral Density: Constantant Monogenic") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Mono_SA)
```

### 5.3.2. Polygenic 300

```{r, fig.height = 40, fig.width = 50, echo=FALSE}
#| label: Constant_Poly_300_SA
#| fig-cap: "SI 5.3.2. Spectral density across 30 replicates for polygenic trait (300 loci) with constant selection model, all parameter combinations. The density plots do not show any peak, and indication that there is no periodicity."
#| fig-pos: "H"

Constant_Poly_300_SA <- result[[5]] +
  ggtitle("Spectral Density: Constantant Polygenic (300 loci)") +
  theme(
    plot.title = element_text(
      hjust = 0.5,         
      size = 70, 
      color = "firebrick4",
      margin = margin(b = 40) 
    )
  )

print(Constant_Poly_300_SA)
```
