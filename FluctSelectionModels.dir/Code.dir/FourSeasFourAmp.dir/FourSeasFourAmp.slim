initialize() {
	// Set seed and SLiM options
	setSeed(seed);
	initializeSLiMOptions(keepPedigrees=T);
	
	// Define constants and mutation types
	
	initializeSex("A");
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	// Define script for QTLs and initialize genomic element types
	scriptForQTLs = "rexp(1);";
	initializeMutationType("m2", 0.5, "s", scriptForQTLs);
	initializeGenomicElementType("g2", m2, 1.0);
	
	defineConstant("nloci", loci);
	defineConstant("nneutral", region);
	pos = 0;
	q = NULL;
	
	for (locus in 1:nloci){
		initializeGenomicElement(g1, pos, pos + nneutral - 1);
		pos = pos + nneutral;
		initializeGenomicElement(g2, pos, pos);
		q = c(q, pos);
		pos = pos + 1;
		initializeGenomicElement(g1, pos, pos + nneutral - 1);
		pos = pos + nneutral;
	}
	// Define Q and recombination rate
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "l";
	defineConstant("Q", q);
	defineConstant("generations", seq(0, 2001, 1));
	//defineConstant("signals", c(5, 30, 10, 15));
	defineConstant("signals", c(12, 22, 10, 16));
	initializeRecombinationRate(1e-8);
	
	// Set colors for mutation types
	m1.color = "blue";
	m2.color = "red";
}

// Initial generation
1 early() {
	// Add a subpopulation for individuals that will be used for selecting QTLs
	sim.addSubpop("p2", 2);
	// Add a mutation of type m2 to the first genome in subpopulation p2
	g = p2.genomes[0];
	muts = g.addNewMutation(m2, rexp(loci), Q);
	// Add a subpopulation of individuals that will be used for the main simulation
	sim.addSubpop("p1", 10000);
	// Assign each individual in p1 a probability of carrying the QTL mutation based on a random marker
	markers = runif(loci,0,1);
	ind = 0;
	for (position in Q){
		for (g in p1.genomes){
			if(rbinom(1,1, markers[ind]) == 1){g.addMutations(muts[ind]);}
		}
		ind = ind + 1;
	}
	// Set the size of the selecting population to 0
	p2.setSubpopulationSize(0);
	// Set the sex ratio of the main population to 0.5
	p1.setSexRatio(0.5);
	// Set the cloning rate of the main population to 0
	p1.setCloningRate(0);
	// Set the selfing rate of the main population to 0
	p1.setSelfingRate(0);
	
	// Create FSV file for genome data and mean phenotype data
	writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/genome",repl,"_","n",loci,"_H",h,".csv"), paste0("Generation,Position,Frequency,Effect,Origin"));
	
	writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/MeanPhenotypes",repl,"_","n",loci,"_H",h,".csv"), paste0("Generation,meanFitness,Phenotype,Optimum"));
}

// Function to calculate mutation effect
mutationEffect(m2) {
	return 1.0;
}

// Late generations
// Define the heritability constant h2 and get the sum of all additive mutations
1 late() {
	defineConstant("h2", h);
	//defineConstant("stdv", SD);
	inds = sim.subpopulations.individuals;
	additive = inds.sumOfMutationsOfType(m2);
	
	// Calculate the genetic variance and define the environmental variance
	V_A = 2*loci/3;
	
	defineConstant("V_E",(V_A - h2 * V_A) / h2);
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	defineConstant("mup", loci); // Expected mean;
	
	// Calculate the phenotypes by adding the genetic and environmental components
	phenotypes = additive + env;
  sdp = sqrt(V_A/h2);	
	phenotypes = ((phenotypes - mup)/sdp); // Phenotype scaling
	
	for (i in seqAlong(inds)) {
		ind = inds[i];
		ind_id = ind;
		phenotype = phenotypes[i];
		
		writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/InitialPhenotypes",repl,"_","n",loci,"_H",h,".csv"), paste0(ind_id, ",",phenotype), append = T);}
		
//Setting Up the Optimum

seasons    = signals;
sd_values  = c(3, 1, 4, 2);//rep(stdv, 4); //
total_time = 2001; //generations; 

// phenotype stats
pheno = phenotypes;
mu_p  = mean(pheno);
sd_p  = sd(pheno);

// float preallocation (avoid int/float mismatch)
nopt = rep(0.0, 2001);

current_time   = 0;  // 0-based indexing in Eidos
year_counter   = 0;
season_counter = 0;

while (current_time < total_time)  // '<' prevents hitting index 2002
{
    for (i in seqAlong(seasons))   // i = 0..3
    {
        if (current_time >= total_time)
            break;

        season_length = seasons[i];
        sd_val        = sd_values[i];

        remain_time = total_time - current_time;
        act_length  = min(season_length, remain_time);

        time_pt = 1:act_length;  // phase counter; not used for indexing
        opt = mu_p + sd_val * sd_p *
              sin(2.0 * 22/7 * (time_pt / asFloat(season_length)));

        end_time = current_time + act_length - 1;     // max 2001
        nopt[current_time:end_time] = opt;           // safe slice

        current_time   = end_time + 1;
        season_counter = i;           // use i+1 if you prefer 1..4
    }
    year_counter = year_counter + 1;
}
		
		
	/*	
	
	nopt = rep(0, size(generations));
	for (i in signals) {
		nopt = nopt + stdv * sin((22/7) * generations / i) +  mean(phenotypes);
	
		}
	nopt = nopt/4;
	*/
	
	defineGlobal("newopt", nopt);
	

	
	// Get the mutation information and order them by frequency
	qtls = sim.mutationsOfType(m2);
	freq = sim.mutationFrequencies(NULL, qtls);
	selCoef = qtls.selectionCoeff;
	posit = qtls.position;
	origin = qtls.originTick;
	indices = order(freq, F);
	
	// Write mutation information to a FSV file
	for (i in indices){
		q_a = 1 - freq[i];
	  het = 2*q_a*freq[i];
	  writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/genome",repl,"_","n",loci,"_H",h,".csv"), 
	  paste0(sim.cycle,",", posit[i], ",", format("%.6f",freq[i]), ",", format("%.6f",selCoef[i]), ",", origin[i]), append = T);
	}
	// Get the mean phenotype and write it to a FSV file
	meanPhenotype = mean(phenotypes);
	writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/MeanPhenotypes",repl,"_","n",loci,"_H",h,".csv"), 
	paste0(sim.cycle,",", 1, ",",format("%.6f", meanPhenotype),",", newopt[sim.cycle]), append=T);

}

// Implement the selection process for generations 2 to 2000

2:2000 late(){
	// Get individuals in the population
	inds = sim.subpopulations.individuals;
	
	// Calculate additive genetic values for each individual based on the sum of their m2 mutations
	additive = inds.sumOfMutationsOfType(m2);
	
	// Calculate environmental values for each individual using a normal distribution with mean 0 and variance V_E
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	
	// Calculate phenotype values for each individual as the sum of their additive genetic and environmental values
	phenotypes = additive + env;
	V_A = 2*loci/3;
  sdp = sqrt(V_A/h2);
	phenotypes = ((phenotypes - mup)/sdp); // Phenotype scaling
	
	// Calculate fitness scaling for each individual based on their deviation from the target phenotype (newopt) 
	
	inds.fitnessScaling = exp(-(1/125) * (phenotypes - newopt[sim.cycle])^2);
	
	// Get the mean fitness and phenotype and write them to a FSV file
	
	mean_fitness = mean(inds.fitnessScaling);
	
	// Add the phenotypes as a tag to the individuals
	inds.tagF = phenotypes;
	
	// Get information about all mutations of type m2
	qtls = sim.mutationsOfType(m2);
	freq = sim.mutationFrequencies(NULL, qtls);
	selCoef = qtls.selectionCoeff;
	posit = qtls.position;
	origin = qtls.originTick;
	
	// Order mutations by frequency (descending) and output information for each mutation to a FSV file (genome_singl.csv)
	indices = order(freq, F);
	for (i in indices){
		
		writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/genome",repl,"_","n",loci,"_H",h,".csv"), paste0(sim.cycle,",", posit[i], ",", format("%.6f",freq[i]), ",", format("%.6f",selCoef[i]),",", origin[i]), append = T);
	}
	// Calculate mean phenotype for the population
	meanPhenotype = mean(phenotypes);
	
	// Output information about mean phenotype and mean fitness to a FSV file (MeanPhenotypes_singl.csv)
	writeFile(paste0("../../Output.dir/FourSeasFourAmp.dir/MeanPhenotypes",repl,"_","n",loci,"_H",h,".csv"), paste0(sim.cycle,",", mean_fitness,",",format("%.6f", meanPhenotype),",", newopt[sim.cycle]), append=T);

}

2001 late(){
	sim.simulationFinished();
}
