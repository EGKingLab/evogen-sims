---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(tidyr)
library(dplyr)
library(patchwork)
library(cowplot)

seeds <- round(seq(1234, 2500, length.out = 100))

nloci <- 1
ninds <- 10000
h2 <- 0.5

mean_pheno <- numeric(length = length(seeds))
sd_pheno <- numeric(length = length(seeds))

for (i in seq_along(seeds)) {
  seed <- seeds[i]
  set.seed(seed)
  
  effects <- rexp(nloci)
  markers <- runif(nloci, 0, 1) #Probability of carrying a given allele 
  additive <- numeric(length = ninds)
  
  for (ind in 1:ninds) {
    geno <- rbinom(nloci, 1, markers)
    effs <- geno*effects
    additive[ind] <- sum(effs)
  }
  V_A <- var(additive)
  V_E <- (V_A/h2)- V_A
  env <- rnorm(ninds, 0.0, sqrt(V_E))
  
  df <- tibble(phenotypes = additive + env)
  #df$phenotypes <- (df$phenotypes / sd(df$phenotypes))
  mean_pheno[i] <- mean(df$phenotypes)
  sd_pheno[i] <- sd(df$phenotypes)
}

mypheno <- tibble(mean_pheno = mean_pheno, sd_pheno = sd_pheno)
# head(mypheno)
# max(mypheno$mean_pheno)
# min(mypheno$mean_pheno)

µs <- mypheno %>% summarise(µp = mean(mean_pheno), µsd = mean(sd_pheno))
```

```{r}
library(patchwork)

p1 <- ggplot()+
  geom_histogram(data = mypheno, aes(mean_pheno), bins = 30)+
  geom_vline(xintercept = µs$µp, color = "red")+
  ggtitle("1 loci")+
  theme(plot.title = element_text(hjust = 0.5))+
  theme_classic()

p2 <- ggplot()+
  geom_histogram(data = mypheno, aes(sd_pheno), bins = 30)+
  geom_vline(xintercept = µs$µsd, color = "red")+
  ggtitle("1 loci")+
  theme(plot.title = element_text(hjust = 0.5))+
  theme_classic()

p1|p2
```

```{r}
library(tidyr)
library(tidyselect)
library(dplyr)
library(cowplot)
theme_set(theme_cowplot())

rm(list = ls())
set.seed(7711)

#how many loci
nloci <- 1

#how many individuals
ninds <- 10000

#heritability
h2 <- 0.5

#get effects
effects <- rexp(nloci)
#effects <- rgamma(nloci, 8, 7)
#effects <- rbeta(nloci, 1, 1)
#get freqs
markers <- runif(nloci,0.01,0.99)

additive <- numeric(length = ninds)

for(ii in 1:ninds){
  #get genotype for 10 loci for one individual
  geno <- rbinom(rep(1,10),rep(1,10), markers)
  effs <- geno*effects
  additive[ii] <- sum(effs)
}

V_A <- var(additive)
V_E <- (V_A/h2)- V_A
env <- rnorm(ninds, 0.0, sqrt(V_E))

phenotypes <- tibble(phenotypes = additive + env)

phenotypes$phenotypes <- (phenotypes$phenotypes/ sd(phenotypes$phenotypes)) + 100

#phenotypes$phenotypes <- ((phenotypes$phenotypes - mean(phenotypes$phenotypes))/sd(phenotypes$phenotypes)) + 100


#phenotypes$phenotypes <- (phenotypes$phenotypes/ max(phenotypes$phenotypes))  + 100
#phenotypes$phenotypes <- quantile(phenotypes$phenotypes, rank(phenotypes$phenotypes)/ length(phenotypes$phenotypes))
#phenotypes$phenotypes <- (phenotypes$phenotypes - mean(phenotypes$phenotypes))/ sd(phenotypes$phenotypes) 
#phenotypes$phenotypes <- ((phenotypes$phenotypes - min(phenotypes$phenotypes))/ (max(phenotypes$phenotypes) - min(phenotypes$phenotypes)))
#phenotypes$phenotypes <- (phenotypes$phenotypes/ mean(phenotypes$phenotypes))  + 100

#define new optimum
new_opt <- mean(phenotypes$phenotypes) - sd(phenotypes$phenotypes)*2

phenotypes |>
  ggplot(aes(x=phenotypes)) +
  geom_histogram(bins = 50) +
  geom_vline(xintercept = new_opt, color = "steelblue")


scaling_f <- mean(phenotypes$phenotypes)
  
#phenotypes$fitness <- 1 - ((phenotypes$phenotypes - new_opt)^2/phenotypes$phenotypes) #Quadratic
#phenotypes$fitness <- exp(-(1/10) * (phenotypes$phenotypes - new_opt)^2)# we can alsp try 1/
phenotypes$fitness <- exp(-(3/mean(phenotypes$phenotypes)) * ((phenotypes$phenotypes - new_opt))^2)

#phenotypes$fitness <- exp(-(3/(scaling_f)) * (phenotypes$phenotypes - new_opt)^2)
#phenotypes$fitness <- (dnorm(new_opt - phenotypes$phenotypes, 10))

phenotypes |>
  ggplot(aes(x=fitness)) +
  geom_histogram(bins = 50)


phenotypes |>
  ggplot(aes(phenotypes, fitness)) +
  geom_point() +
  #ylim(0,1) +
  geom_vline(xintercept = new_opt, color = "steelblue")
 #  
```

## Exploring fitness

```{r}
# nloci <- c(1, 10, 30, 100, 300, 1000)
# ninds <- 10000
# h2s <- c(0.1, 0.5, 0.8)
# sds <- 1:4
# 
# seeds <-1234 #round(seq(1234, 2500, length.out = 50))
# 
# # Initialize df dataframe
# df <- tibble()
# 
# for (seed in seeds) {
#   set.seed(seed)
#   
#   for(locus in nloci){
#     effects <- rexp(locus)
#     markers <- runif(locus, 0, 1) # Probability of carrying a given allele
#     additive <- numeric(length = ninds)
#     
#     for (ind in 1:ninds) {
#       geno <- rbinom(locus, 1, markers)
#       effs <- geno * effects
#       additive[ind] <- sum(effs)
#       V_A <- locus/3 # Scaling VA based on the observation
#     }
#    # V_A <- locus/3
#     #V_A <- var(additive)
#     
#     for(h2 in h2s){
#       V_E <- (V_A / h2) - V_A
#       env <- rnorm(ninds, 0.0, sqrt(V_E))
#       
#       for (sd in sds) {
#         myphedata <- tibble(
#           phenotypes = additive + env,
#           
#           mup = 0.5*locus, # Expected mean
#           sdp = sqrt(locus/(3*h2)), #Expected standard deviation
#           phenotype = ((phenotypes - mup)/sdp), # Phenotype scaling
#           
#           optimum = mean(phenotype) + (sd * sd(phenotype)),
#           sd = sd,  # Add sd column
#           seed = seed,  # Add seed column
#           h2 = h2,  # Add h2 column
#           locus = locus  # Add locus column
#         )
#         df <- bind_rows(df, myphedata)
#       }
#     }
#   }
# }
# 
# newdataset <- df %>% group_by(seed, sd, locus, h2) %>%
#   mutate(Fitness = exp(-(1/150) * (phenotype - optimum)^2),
#     heritability = factor(h2),
#     stand_dev = factor(sd))

```

```{r, fig.width=10, fig.height=5}
# library(ggridges)
# theme_set(theme_classic())
# 
# ggplot(newdataset, aes(y = stand_dev, x = Fitness)) +
#   geom_density_ridges(aes(fill = heritability), alpha = 0.3,bandwidth = 0.01) + 
#   scale_fill_manual(values = c("cyan", "yellow", "magenta")) +
#   facet_grid(~locus)+
#   theme(axis.text = element_text(size = 12, face = "bold"),
#         axis.line = element_line(size = 2),
#         axis.title = element_text(size = 12, face = "bold"),
#         strip.text = element_text(size = 12, face = "bold"))
```

## Assessing optimum and fitness: To scale single locus

```{r}
rm(list = ls())

nloci <- c(1, 10, 100) #, 500, 1000, 10000
ninds <- 10000
h2s <- c(0.1, 0.5, 0.8)
sds <- 1:4

seeds <-1234 #round(seq(1234, 2500, length.out = 50))

# Initialize df dataframe
df <- tibble()

for (seed in seeds) {
  set.seed(seed)
  
  for(locus in nloci){
    effects <- rexp(locus)
    markers <- runif(locus, 0, 1) # Probability of carrying a given allele
    additive <- numeric(length = ninds)
    
    for (ind in 1:ninds) {
      geno <- rbinom(locus, 1, markers)
      effs <- geno * effects
      additive[ind] <- sum(effs)
    }
    V_A <- var(additive)#locus/3
    
    for(h2 in h2s){
      V_E <- (V_A / h2) - V_A
      env <- rnorm(ninds, 0.0, sqrt(V_E))

       for (sd in sds) {
         #sdp <- sqrt(locus / (3 * h2))
        if (locus == 1) {
          sdp <- sqrt(locus*(3/h2))
        } else {
          sdp <- sqrt(locus / (3 * h2))
        }
        myphedata <- tibble(
          phenotypes = additive + env,
          
          mup = 0.5*locus, # Expected mean
          sdp = sdp, #Expected standard deviation.         
          phenotype = ((phenotypes - mup)/sdp), # Phenotype scaling
          
          optimum = mean(phenotype) + sd * sd(phenotype),
          ## Fitness = ifelse(locus==1, exp(-(1/100) * (phenotype - optimum)^2), 
            ##                exp(-(1/locus) * (phenotype - optimum)^2)),
          sd = sd,  # Add sd column
          seed = seed,  # Add seed column
          h2 = h2,  # Add h2 column
          locus = locus  # Add locus column
        )
        df <- bind_rows(df, myphedata)
      }
    }
  }
}

newdataset <- df %>% #group_by(sd, locus, h2) %>%
  mutate(heritability = factor(h2),
    stand_dev = factor(sd),
    Fitness = ifelse(locus==1, exp(-(1/125) * (phenotype - optimum)^2), 
                           exp(-(1/125) * (phenotype - optimum)^2))
    )

```

```{r, fig.width=10, fig.height=5}
library(cowplot)
library(patchwork)
library(ggridges)
theme_set(theme_classic())

ggplot(newdataset, aes(y = stand_dev, x = Fitness)) +
  geom_density_ridges(aes(fill = heritability), alpha = 0.3) + # ,bandwidth = 0.12, rel_min_height = 0.0005
  scale_fill_manual(values = c("cyan", "yellow", "magenta")) +
  facet_grid(~locus, scales = "free_y")+
  #scale_y_discrete(expand = c(0.01, 0))+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r}
rm(list = ls())
library(tibble)
library(dplyr)

nloci <- c(1, 10, 100) #, 500, 1000, 10000
ninds <- 10000
h2s <- c(0.5)
sds <- 1

seeds <- 1234 #round(seq(1234, 2500, length.out = 50))

# Initialize df dataframe
df <- tibble()

for (seed in seeds) {
  set.seed(seed)
  
  for (locus in nloci) {
    effects <- rexp(locus)
    markers <- runif(locus, 0, 1) # Probability of carrying a given allele
    additive <- numeric(length = ninds)
    
    for (ind in 1:ninds) {
      geno <- rbinom(locus, 1, markers)
      effs <- geno * effects
      additive[ind] <- sum(effs)
    }
    V_A <- var(additive) # locus/3
    
    for (h2 in h2s) {
      V_E <- (V_A / h2) - V_A
      env <- rnorm(ninds, 0.0, sqrt(V_E))
      
      for (sd in sds) {
        if (locus == 1) {
          sdp <- sqrt(locus * (3 / h2))
        } else {
          sdp <- sqrt(locus / (3 * h2))
        }
        myphedata <- tibble(
          phenotypes = additive + env,
          mup = 0.5 * locus, # Expected mean
          sdp = sdp, # Expected standard deviation
          phenotype = ((phenotypes - mup) / sdp), # Phenotype scaling
          optimum = mean(phenotype) + sd * sd(phenotype),
          sd = sd, # Add sd column
          seed = seed, # Add seed column
          h2 = h2, # Add h2 column
          locus = locus # Add locus column
        )
        df <- bind_rows(df, myphedata)
      }
    }
  }
}

newdataset <- df %>% group_by(sd, locus, h2, optimum) %>%
  mutate(
    heritability = factor(h2),
    stand_dev = factor(sd),
    Fitness = ifelse(locus == 1, exp(-(1/125) * (phenotype - optimum)^2),
                     exp(-(1/(125 * sqrt(locus))) * (phenotype - optimum)^2))
  )

```

```{r}

newdataset2 <- newdataset %>% group_by(sd, locus, heritability) %>%
  mutate(Fitness = (round(Fitness, digits = 6)),
         Optimum = factor(round(optimum, digits = 6)),
         Mean_Fitness = mean(Fitness, na.rm = TRUE)) %>%
  filter(stand_dev ==1)

ggplot(newdataset2, aes(y = optimum, x = Fitness, color = heritability)) +
  geom_density_ridges(aes(fill = heritability), alpha = 0.3) +
  geom_vline(aes(xintercept = mean(Fitness)), linetype="dashed", color = "red") +
  geom_text(aes(x = Mean_Fitness, label = paste("Mean =", round(Mean_Fitness, 2))), y = Inf, vjust = 2, color = "red", size = 2) +
  facet_grid(~locus, scales = "free_y")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

## Fitness vs Phenotype

```{r}
# newdataset2 <- newdataset %>% group_by(seed, sd, locus, h2) %>%
#   mutate(heritability = factor(h2),
#     stand_dev = factor(sd),
#     Fitness = as.factor(round(Fitness, digits = 5)))
# 
# ggplot(newdataset2, aes(phenotype, Fitness, fill = heritability)) +
#   geom_density_ridges(aes(fill = heritability), alpha = 0.3) +
#   facet_grid(~locus, scales = "free_y")+
#   theme(axis.text = element_text(size = 12, face = "bold"),
#         axis.line = element_line(size = 2),
#         axis.title = element_text(size = 12, face = "bold"),
#         strip.text = element_text(size = 12, face = "bold"))
```

```{r}
#unique(newdataset2$Fitness)
```

## Adjust fit fx

```{r}
rm(list = ls())
library(tibble)
library(dplyr)

nloci <- c(1, 10, 100, 300)
ninds <- 10000
h2s <- c(0.1, 0.5, 0.8)
sds <- 1:4

seeds <- 690897

# Initialize df as an empty tibble
df <- tibble()#numeric(length = ninds)

  # Loop for loci
  for (locus in nloci) {
    effects <- rexp(locus)
    markers <- runif(locus, 0, 1)
    additive <- numeric(length = ninds)

    #  Additive effects for individuals
    for (ind in 1:ninds) {
      geno <- rbinom(locus, 1, markers)
      effs <- geno * effects
      additive[ind] <- sum(effs)
    }
    V_A <- locus / 3

    # Loop for heritabilities
    for (h2 in h2s) {
      V_E <- (V_A / h2) - V_A
      env <- rnorm(ninds, 0.0, sqrt(V_E))
      
      for (stand in sds) {
        myphedata <- tibble(
          phenotypes = additive + env,
          mup = 0.5 * locus, # Expected mean
          sdp = ifelse(locus == 1, sqrt(locus / (3 * h2)), sqrt(locus / (3 * h2))), 
          phenotype = (phenotypes - mup) / sdp, # Phenotype scaling
          optimum = mean(phenotype) + (stand * sd(phenotype)),
          Fitness = ifelse(locus <= 10, exp(-(1/125) * (phenotype - optimum)^2), 
                           exp(-(1/125) * (phenotype - optimum)^2)),
          stand = stand,  
          h2 = h2,  
          locus = locus
        )
        df <- bind_rows(df, myphedata)
      }
    }
  }

```

```{r}
newdataset <- df %>%
  group_by(stand, locus, h2) %>%
  mutate(
    heritability = factor(h2),
    stand_dev = factor(stand),
    optimum = factor(optimum),
    mean_fitness = mean(Fitness)
  )
```

```{r}
library(ggplot2)
library(ggridges)
theme_set(theme_classic())

ggplot(newdataset %>% filter(stand==4, heritability == 0.5), aes(x = Fitness, y = round(optimum, digits = 4))) +
  geom_density_ridges(aes(fill = heritability), alpha = 0.3, bandwidth = 0.01) + # fill = heritability
  scale_fill_manual(values = c("magenta", "cyan", "yellow")) +
  geom_vline(aes(xintercept = mean_fitness), color = "darkblue") +
  geom_text(aes(x = mean_fitness, label = paste("Mean =", round(mean_fitness, 4)),), y = 3, vjust = 0.5, hjust = 0.5, color = "darkblue", size = 2) +
  facet_grid(~locus)
```

## Seq Pheno

```{r}
library(cowplot)
library(ggridges)
sds <- 1:4
dataf1 <- list() # Ensure this is a list
for (sdt in sds) {
  set.seed(124935)
  phenotypes <- seq(from = -6, to = 6, by = 0.1)
  phenotypes = (phenotypes - mean(phenotypes))/sd(phenotypes)
  optimum <- mean(phenotypes) + sdt * sd(phenotypes)
  fitness <- exp(-(1/150) * (phenotypes - optimum)^2)
  sdt <- sdt
  dataf1[[sdt]] <- tibble(phenotypes, optimum, fitness, sdt) # Corrected to dataf1
}
#tail(dataf1[[4]]) # Display the head of the first tibble in the list
dataf1 <- bind_rows(dataf1)
tail(dataf1)
```

```{r}
library(ggridges)
theme_set(theme_classic())

dataf2 <- dataf1 %>% 
  mutate(optimum = factor(round(optimum, digits = 3)), standv = factor(sdt))

# Calculate the mean fitness for each standv group
mean_fitness <- dataf2 %>% 
  group_by(standv) %>% 
  summarize(mean_optimum = mean(fitness))

ggplot(dataf2) +
  geom_density_ridges(aes(y = optimum, x = fitness, color = standv, fill = standv), alpha = 0.3) +
  geom_vline(data = mean_fitness, aes(xintercept = mean_optimum), color = "blue") +
  geom_text(data = mean_fitness, aes(x = mean_optimum, label = paste("Mean =", round(mean_optimum, 2))), 
            y = 5, vjust = 0.5, hjust = 0.5, color = "darkred", size = 3) +  
  facet_grid(~standv, scales = "free_y") +
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

### Set a global mean fitness for all loci at each standard deviation

```{r}
rm(list = ls())
library(tibble)
library(dplyr)

nloci <- c(1, 10, 100) # Number of loci
inds <- 10000 # Number of individuals
h2s <- c(0.1, 0.8) # Heritability
sds <- 1:4 # Standard deviations for optimum

# dataframe
df_list <- list()  # List to store iterations
for (iteration in 1:500) { # 1000 iterations
  df <- tibble()  # dataframe for each iteration
  mypheno <- list()
  #set.seed(iteration)  # Use iteration as seeds
  for(locus in nloci){
    effs <- rexp(locus) # Random effects
    markers <- runif(locus, 0, 1) # Random markers
    additive <- numeric(inds)
    for(ind in 1:inds){
      genome <- rbinom(locus, 1, markers) # Genomic representation
      effects <- genome * effs # Calculate effects
      additive[ind] <- sum(effects) # Sum of effects
    }
    VA <- locus/3#var(additive) # Additive variance
    for(h2 in h2s){
      VE <- (VA/h2) - VA # Environmental variance
      env <- rnorm(inds, 0, sqrt(VE)) # Environmental effect
      for(standv in sds){
        # Adjust phenotype scaling based on locus and heritability
        sdp = sqrt(locus/(3 * h2))
        mypheno <- tibble(
          phenotypes = additive + env,
          mup = 0.5 * locus, # Mean phenotype
          sdp = sdp, # Standard deviation of phenotype
          standv = standv,
          heritability = h2,
          locus = locus
        )
        df <- bind_rows(df, mypheno)
      }
    }
  }
  df_list[[iteration]] <- df  # Store dataframe in my list of data
}

# A single dataframe
combined_df <- do.call(bind_rows, df_list)

newdataset <- combined_df %>%
  group_by(heritability, locus, standv) %>%
  mutate(phenotype = (phenotypes - mup) / sdp, # Scaled phenotype
         optimum = mean(phenotype) + (standv * sd(phenotype)), # Optimum phenotype
         Fitness = case_when(
           locus == 1 ~ exp(-(sd(phenotype)/50) *  (phenotype - optimum)^2),
           TRUE ~ exp(-(sd(phenotype)/50) * (phenotype - optimum)^2)),
       #  Fitness = exp(-(1/200) * (phenotype - optimum)^2),
         mean_fit = mean(Fitness),
         heritability = factor(heritability),
         standv = factor(standv)) 

```

```{r, fig.width=12, fig.height=6}
#theme_set(theme_classic())
theme_set(theme_cowplot())

newdataset <- newdataset %>% filter(heritability == 0.1,locus <= 100)

ggplot(newdataset, #standv == 4,
       aes(x = round(phenotype,digits = 5),
           y = round(Fitness, digits = 5), color = standv)) +
  #geom_density_ridges(alpha = 0.3) +
  geom_point()+
  facet_grid(~locus, scales = "free_y")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r, fig.width=12, fig.height=6}

theme_set(theme_classic())

ggplot(newdataset %>% 
  filter(standv == 4), aes(Fitness)) +
  geom_density()+
  geom_vline(data = newdataset%>% 
  filter(standv == 4), aes(xintercept = mean_fit), color = "darkred") +
  geom_text(data = newdataset%>% 
  filter(standv == 4), aes(x = mean_fit, label = round(mean_fit, 4)), color = "red", vjust = 5, hjust = 0.1, y = Inf) +
  facet_wrap(~interaction(locus,heritability), scales = "free_y", ncol = 3) +
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r, fig.width=12, fig.height=6}
library(ggridges)
theme_set(theme_classic())

ggplot(newdataset %>% 
  filter(locus <=100), aes(y = standv, x = Fitness)) +
  geom_density_ridges(aes(fill = heritability), alpha = 0.3) + 
  scale_fill_manual(values = c("cyan", "yellow", "magenta")) +
  facet_grid(~locus, scales = "free_y")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        #axis.line = element_line(size = 2),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r, fig.width=12, fig.height=6}
theme_set(theme_classic())
ggplot(newdataset %>% filter(standv == 4, heritability == 0.1, locus <= 100) %>%
         group_by(locus), aes(x = Fitness, y = optimum)) +
  geom_density_ridges(aes(fill = heritability), alpha = 0.3, bandwidth = 0.01) +
  geom_vline(data = . %>% group_by(locus) %>% summarise(MeanFitness = mean(Fitness)), aes(xintercept = MeanFitness), color = "darkblue") +
  geom_text(data = . %>% group_by(locus) %>% summarise(MeanFitness = mean(Fitness)), aes(x = MeanFitness, label = paste("Mean =", round(MeanFitness, 4))),  y = 4, vjust = 0.5, hjust = 0.5, color = "darkblue", size = 3) +
  facet_grid(~locus) +
  theme(legend.position = "none",
        axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))

```

```{r, fig.width=12, fig.height=6}
#theme_set(theme_classic())
theme_set(theme_cowplot())

newdataset <- newdataset %>% filter(heritability == 0.1,locus <= 100)

ggplot(newdataset, #standv == 4,
       aes(x = round(phenotype,digits = 5),
           y = round(Fitness, digits = 5), color = standv)) +
  #geom_density_ridges(alpha = 0.3) +
  geom_point()+
  facet_grid(~locus, scales = "free_y")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))

# 
# max_fitness <- newdataset %>%
#   group_by(standv, locus) %>%
#   summarise(max_fitness = max(Fitness), phenotype_at_max_fitness = phenotype[which.max(Fitness)])
# 
# # Join this information back to the original dataset
# newdataset <- left_join(newdataset, max_fitness, by = c("standv", "locus"))
# 
# # plot
# ggplot(newdataset, aes(x = round(phenotype, digits = 5), y = round(Fitness, digits = 5), color = standv)) +
#   geom_point() +
#   geom_vline(aes(xintercept = round(phenotype_at_max_fitness, digits = 5)), linetype = "dashed") +
#   geom_text(aes(x = round(phenotype_at_max_fitness, digits = 5), label = round(phenotype_at_max_fitness, digits = 5)), hjust = -0.2) +
#   facet_grid(~locus, scales = "free_y") +
#   theme(axis.text = element_text(size = 12, face = "bold"),
#         axis.title = element_text(size = 12, face = "bold"),
#         strip.text = element_text(size = 12, face = "bold"))

```
