---
title: "WhoIsFit"
format: html
editor: visual
---
## Simulations in R 

### Optimum based on µ and sd

This is the simulation done in R, where the phenotype is scaled based on the number of loci, and the optimum is calculated as the sum of mean phenotype and phenotype standard deviation times n.

```{r, echo=FALSE, message=FALSE}
rm(list = ls())
library(tibble)
library(tidyverse)
library(dplyr)

nloci <- c(1, 10, 100, 300) # Number of loci
inds <- 10000 # Number of individuals
h2s <- c(0.1, 0.8) # Heritability
#sds <- c(40, 50, 70, 60) # Standard deviations to use if we choose z to range between 0 and 100
sds <- c(1:4) # Standard deviations for optimum

# dataframe
df_list <- list()  # List to store iterations
for (iteration in 1:200) { # 1000 iterations
  df <- tibble()  # dataframe for each iteration
  mypheno <- list()
  #set.seed(iteration)  # Use iteration as seeds
  for(locus in nloci){
    effs <- rexp(locus) # Random effects
    markers <- runif(locus, 0, 1) # Random markers
    additive <- numeric(inds)
    for(ind in 1:inds){
      genome <- rbinom(locus, 1, markers) # Genomic representation
      effects <- (genome * effs) # Calculate effects
      additive[ind] <- sum(effects) # Sum of effects
    }
    #VA <- var(additive) # Additive variance
    VA <- locus/3
    for(h2 in h2s){
      VE <- (VA/h2) - VA # Environmental variance
      env <- rnorm(inds, 0, sqrt(VE)) # Environmental effect
      for(standv in sds){
        # Adjust phenotype scaling based on locus and heritability
        sdp = sqrt(locus/(3*h2))
        # ifelse(locus == 1, sqrt((3*locus)/h2), sqrt(3*locus/h2))
        mypheno <- tibble(
          phenotypes = additive + env,
          mup = 0.5 * locus, # Mean phenotype
          sdp = sdp, # Standard deviation of phenotype
          standv = standv,
          heritability = h2,
          locus = locus
        )
        df <- bind_rows(df, mypheno)
      }
    }
  }
  df_list[[iteration]] <- df  # Store dataframe in my list of data
}

# A single dataframe
combined_df <- do.call(bind_rows, df_list)
```

```{r, echo=FALSE}
newdataset <- combined_df %>%
  group_by(heritability, locus, standv) %>%
  mutate(
        # phenotype = ((phenotypes - min(phenotypes)) / 
        #              (max(phenotypes) - min(phenotypes))) * 100,# Pheno will be between 0 and 100
           phenotype = ((phenotypes - mup) / (sdp)),# Scaled phenotype
           #optimum = standv, # Optimum phenotype
        #phenotype = phenotypes,# Scaled phenotype
        optimum = mean(phenotype)+ sd(phenotype)*standv, # Optimum phenotype
         #Fitness = case_when(
          # locus == 1 ~ exp(-(sd(phenotype)/5) *  (phenotype - optimum)^2),
         #TRUE ~ exp(-(sd(phenotype)/100) * (phenotype - optimum)^2)),
         Fitness = case_when(
           locus == 1 ~ exp(-(1/200) *  (phenotype - optimum)^2),
         TRUE ~ exp(-(1/200) * (phenotype - optimum)^2)),
         #mean_fit = mean(Fitness),
         heritability = factor(heritability),
         standv = factor(standv)) 
```

```{r, fig.width=12, fig.height=6, echo=FALSE}
library(ggplot2)
library(dplyr)
library(cowplot)

newdataset2 <- newdataset %>% 
  filter(heritability == 0.1, standv == 1| standv == 4) # | standv == 4| standv == 8
# Define the phenotype value. Not that this value can be changed based on which z scale choose
pheno.value <- 0 #can go with 50 if pheno (z) ranges in 0 and 100

# Filter the dataset to get fitness values where phenotype is 1.6 for each locus and standv
fit.values <- newdataset2 %>%
  ungroup() %>%
  filter(round(phenotype, digits = 2) == pheno.value) %>%
  dplyr::select(locus, standv, Fitness) %>%
  distinct()

theme_set(theme_cowplot())

# Plot the data
myplot <- ggplot(data = newdataset2, 
       aes(x = round(phenotype, digits = 5), 
           y = round(Fitness, digits = 5), color = standv)) +
  geom_line(linewidth = 1) +
  geom_vline(xintercept = pheno.value, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = as.factor(standv))) +
  geom_text(data = fit.values, aes(x = pheno.value, y = round(Fitness, digits =2), 
                                   label = paste("Pheno =", pheno.value, ";  Fit =", round(Fitness, digits = 2))), color = standv, vjust = 1.5, hjust = 1.5, size = 2) +
  facet_wrap(~locus, ncol = 2) +
  labs(x = "Phenotypes", y = "Fitness")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r, fig.width=12, fig.height=6, echo=FALSE}
myplot
```
### Fitness / selection strength assessment

Note, this is based on the difference between fitnesses from one sd to another.
{***D***} represents the distance between mean and optimum. {***difd***} represences the lag difference

```{r}
library(tidyverse)

fitfx <- function(D){
  w = exp(-(1/200)*D^2)
  return(w)
}
```

```{r}
D = seq(-5, 5, by = 1)
fitness = fitfx(D)
```

```{r}
fdf <- tibble(D, fitness)
nfdf <- fdf %>% 
  mutate(D = abs(D)) %>% 
  distinct() %>% 
  mutate(difd = round(c(diff(fitness), 0), digits = 4))

knitr::kable(nfdf)

```
```{r}
nfdf %>% 
  ggplot(aes(factor(D), factor(round(fitness, digits = 4))))+
  geom_point()+
  labs(x = "Optimal Distance", y = "Fitness")+
  theme_classic()
```

### Using sds only for optimum (i.e instead of µ and sd)

Still, we are looking at the data from R simulation, but here with optimum based on n.
That is, without mean phenotype and standard deviation.

```{r, echo=FALSE}
newdataset3 <- combined_df %>%
  group_by(heritability, locus, standv) %>%
  mutate(
        # phenotype = ((phenotypes - min(phenotypes)) / 
        #              (max(phenotypes) - min(phenotypes))) * 100,# Pheno will be between 0 and 100
           phenotype = ((phenotypes - mup) / (sdp)),# Scaled phenotype
           #optimum = standv, # Optimum phenotype
        #phenotype = phenotypes,# Scaled phenotype
        optimum = standv, # Optimum phenotype
         #Fitness = case_when(
          # locus == 1 ~ exp(-(sd(phenotype)/5) *  (phenotype - optimum)^2),
         #TRUE ~ exp(-(sd(phenotype)/100) * (phenotype - optimum)^2)),
         Fitness = case_when(
           locus == 1 ~ exp(-(1/200) *  (phenotype - optimum)^2),
         TRUE ~ exp(-(1/200) * (phenotype - optimum)^2)),
         #mean_fit = mean(Fitness),
         heritability = factor(heritability),
         standv = factor(standv)) 
```

```{r, fig.width=12, fig.height=6, echo=FALSE}
library(ggplot2)
library(dplyr)
library(cowplot)

newdataset4 <- newdataset3 %>% 
  filter(heritability == 0.1, standv == 1| standv == 4) # | standv == 4| standv == 8
# Define the phenotype value. Not that this value can be changed based on which z scale choose
pheno.value <- 1#can go with 50 if pheno (z) ranges in 0 and 100

# Filter the dataset to get fitness values where phenotype is 1.6 for each locus and standv
fit.values <- newdataset2 %>%
  ungroup() %>%
  filter(round(phenotype, digits = 2) == pheno.value) %>%
  dplyr::select(locus, standv, Fitness) %>%
  distinct()

theme_set(theme_cowplot())

# Plot the data
myplot4 <- ggplot(data = newdataset4, 
       aes(x = round(phenotype, digits = 4), 
           y = round(Fitness, digits = 4), color = standv)) +
  geom_line(linewidth = 1) +
  geom_vline(xintercept = pheno.value, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = as.factor(standv))) +
  geom_text(data = fit.values, aes(x = pheno.value, y = round(Fitness, digits =2), 
                                   label = paste("Pheno =", pheno.value, ";  Fit =", round(Fitness, digits = 2))), color = standv, vjust = 1.5, hjust = 1.5, size = 2) +
  facet_wrap(~locus, ncol = 2) +
  labs(x = "Phenotypes", y = "Fitness")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))+
  theme_bw()
```

```{r, fig.width=12, fig.height=6, echo=FALSE}
myplot4
```

## From SLiM: Initial individuals' phenotypes (Generation 0)

### Optimum based on µ and sd: Single locus

Here, we start by exploring a single locus only, with a heritability of 0.1.
The optimum is based on mean and standard deviation of the phenotype.

```{r, echo=FALSE}
library(tidyverse)
initpheno <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/InitialPhenotypes1_n1_H0.1SD1Gen30.csv") %>% 
  mutate(optimum1 = mean(Phenotype) + sd(Phenotype), 
         #optimum2 = mean(Phenotype) + sd(Phenotype)*2, 
         #optimum3 = mean(Phenotype) + sd(Phenotype)*3,
         optimum4 = mean(Phenotype) + sd(Phenotype)*4) %>% 
  pivot_longer(cols = starts_with("optimum"),
               names_to = "Optimum",
               values_to = "Value")

initphenofit <- initpheno %>% 
  mutate(sd = case_when(Optimum == "optimum1" ~ "1",
                              #Optimum == "optimum2" ~ "2",
                              #Optimum == "optimum3" ~ "3",
                              Optimum == "optimum4" ~ "4"),
         Optimum = Value, 
         Fitness = exp(-(1/200)*(Phenotype - Optimum)^2))

```


```{r, fig.width = 8, fig.height = 4, echo=FALSE}
pheno.value <- 0

fit.values <- initphenofit %>%
  ungroup() %>%
  filter(round(Phenotype, digits = 2) == pheno.value) %>%
  distinct()

ggplot() +
  geom_line(data = initphenofit, 
       aes(x = round(Phenotype, digits = 4), 
           y = round(Fitness, digits = 4), color = sd),linewidth = 1) +
  geom_vline(xintercept = pheno.value, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = sd)) +
  geom_text(data = fit.values, 
            aes(x = pheno.value, y = round(Fitness, digits =2), 
                label = paste("z =", pheno.value, ";  w =", round(Fitness, digits = 2))), vjust = 1.5, hjust = 1.5, size = 2) +
  #facet_wrap(~sd, ncol = 2)+
  labs(x = "Phenotypes", y = "Fitness")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))+
  theme_bw()

```

### Multiple loci: Optimum based on µ and sd

Multiple loci while considering an optimum derived from mean and sd of phenotype.

```{r, echo=FALSE}
library(tidyverse)

# Get all the file names
file_names <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/",
                         pattern = "InitialPhenotypes1_n(1|10|100|300)_H0.1SD1Gen30.csv", full.names = TRUE)

# Read all the files and bind them together
initpheno <- file_names %>%
  set_names() %>%
  map_df(~read.csv(.x) %>%
           mutate(file_name = .x,
                  n = str_extract(file_name, "(?<=_n)(1|10|100|300)(?=_H0.1SD1Gen30.csv)")) %>%
           mutate(optimum1 = mean(Phenotype) + sd(Phenotype), 
                 # optimum2 = mean(Phenotype) + sd(Phenotype)*2, 
                 # optimum3 = mean(Phenotype) + sd(Phenotype)*3,
                  optimum4 = mean(Phenotype) + sd(Phenotype)*4) %>%
           pivot_longer(cols = starts_with("optimum"),
                        names_to = "Optimum",
                        values_to = "Value"))

initphenofit <- initpheno %>% 
  mutate(sd = case_when(Optimum == "optimum1" ~ "1",
                        #Optimum == "optimum2" ~ "2",
                        #Optimum == "optimum3" ~ "3",
                        Optimum == "optimum4" ~ "4"),
         Optimum = Value, 
         Fitness = exp(-(1/200)*(Phenotype - Optimum)^2))

# Plotting code
fit.values <- initphenofit %>%
  ungroup() %>%
  filter(round(Phenotype, digits = 2) == 4) %>%
  distinct()

ggplot() +
  geom_line(data = initphenofit, 
       aes(x = round(Phenotype, digits = 4), 
           y = round(Fitness, digits = 4), color = sd),linewidth = 1) +
  geom_vline(xintercept = 4, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = sd)) +
  geom_text(data = fit.values, 
            aes(x = 4, y = Fitness, 
                label = paste("z =", 4, ";  w =", round(Fitness, digits = 2))), 
            vjust = 2, hjust = 0.5, size = 2) +
  facet_wrap(~n, scales = "free_x", ncol = 2) +
  labs(x = "Phenotypes", y = "Fitness") +
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold")) +
  theme_bw()

```
> Here, we are looking at a single simulation

```{r,echo=FALSE}
library(tidyverse)

# Get all the file names
file_names <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/",
                         pattern = "InitialPhenotypes1_n(1|10|100|300)_H0.1SD1Gen30.csv", full.names = TRUE)

# Read all the files and bind them together
initpheno <- file_names %>%
  set_names() %>%
  map_df(~read.csv(.x) %>%
           mutate(file_name = .x,
                  n = str_extract(file_name, "(?<=_n)(1|10|100|300)(?=_H0.1SD1Gen30.csv)")) %>%
           mutate(optimum1 = mean(Phenotype) + sd(Phenotype), 
                  #optimum2 = mean(Phenotype) + sd(Phenotype)*2, 
                  #optimum3 = mean(Phenotype) + sd(Phenotype)*3,
                  optimum4 = mean(Phenotype) + sd(Phenotype)*4) %>%
           pivot_longer(cols = starts_with("optimum"),
                        names_to = "Optimum",
                        values_to = "Value"))

initphenofit <- initpheno %>% 
  mutate(sd = case_when(Optimum == "optimum1" ~ "1",
                        #Optimum == "optimum2" ~ "2",
                        #Optimum == "optimum3" ~ "3",
                        Optimum == "optimum4" ~ "4"),
         Optimum = Value, 
         Fitness = exp(-(1/200)*(Phenotype - Optimum)^2))

# Plotting code
fit.values <- initphenofit %>%
  ungroup() %>%
  filter(round(Phenotype, digits = 2) == 4) %>%
  distinct()

ggplot() +
  geom_line(data = initphenofit, 
       aes(x = round(Phenotype, digits = 4), 
           y = round(Fitness, digits = 4), color = sd),linewidth = 1) +
  geom_vline(xintercept = 4, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = sd)) +
  geom_text(data = fit.values, aes(x = 4, y = round(Fitness, digits =2), 
                                   label = paste("z =", 4, ";  w =", round(Fitness, digits = 2))), vjust = 1.5, hjust = 0.5, size = 2) +
  labs(x = "Phenotypes", y = "Fitness")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))+
  theme_bw() +
  facet_wrap(~interaction(n,sd), scales = "free_x", ncol = 4)

```

### Multiple loci: Optimum based on sd only

The optimum is based on n only (The so called sd but it is not technically stand dev, instead it's a fixed number)

```{r,echo=FALSE}

library(tidyverse)

# Get all the file names
file_names <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/",
                         pattern = "InitialPhenotypes1_n(1|10|100|300)_H0.1SD1Gen30.csv", full.names = TRUE)

# Read all the files and bind them together
initpheno <- file_names %>%
  set_names() %>%
  map_df(~read.csv(.x) %>%
           mutate(file_name = .x,
                  n = str_extract(file_name, "(?<=_n)(1|10|100|300)(?=_H0.1SD1Gen30.csv)")) %>%
           mutate(optimum1 = 1, 
                  optimum4 = 4) %>%
           pivot_longer(cols = starts_with("optimum"),
                        names_to = "Optimum",
                        values_to = "Value"))

initphenofit <- initpheno %>% 
  mutate(sd = case_when(Optimum == "optimum1" ~ "1",
                        Optimum == "optimum4" ~ "4"),
         Optimum = Value, 
         Fitness = exp(-(1/200)*(Phenotype - Optimum)^2)) %>% 
  dplyr::select(-Value)

# Plotting code
fit.values <- initphenofit %>%
  ungroup() %>%
  filter(round(Phenotype, digits = 2) == 4) %>%
  distinct()

ggplot() +
  geom_line(data = initphenofit, 
       aes(x = round(Phenotype, digits = 4), 
           y = round(Fitness, digits = 4), color = sd),linewidth = 0.5) +
  geom_vline(xintercept = 4, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = sd)) +
  geom_text(data = fit.values, 
            aes(x = 4, y = Fitness, 
                label = paste("z =", 4, ";  w =", round(Fitness, digits = 2))), 
            vjust = 2, hjust = 0.5, size = 2) +
  facet_wrap(~n, scales = "free_x", ncol = 2) +
  labs(x = "Phenotypes", y = "Fitness")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))+
  theme_bw()
```


