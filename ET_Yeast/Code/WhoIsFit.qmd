---
title: "WhoIsFit"
format: html
editor: visual
---

```{r}
rm(list = ls())
library(tibble)
library(dplyr)

nloci <- c(1, 10, 100, 300) # Number of loci
inds <- 10000 # Number of individuals
h2s <- c(0.1, 0.8) # Heritability
#sds <- c(40, 50, 70, 60) # Standard deviations to use if we choose z to range between 0 and 100
sds <- c(1:4) # Standard deviations for optimum

# dataframe
df_list <- list()  # List to store iterations
for (iteration in 1:200) { # 1000 iterations
  df <- tibble()  # dataframe for each iteration
  mypheno <- list()
  #set.seed(iteration)  # Use iteration as seeds
  for(locus in nloci){
    effs <- rexp(locus) # Random effects
    markers <- runif(locus, 0, 1) # Random markers
    additive <- numeric(inds)
    for(ind in 1:inds){
      genome <- rbinom(locus, 1, markers) # Genomic representation
      effects <- (genome * effs) # Calculate effects
      additive[ind] <- sum(effects) # Sum of effects
    }
    #VA <- var(additive) # Additive variance
    VA <- locus/3
    for(h2 in h2s){
      VE <- (VA/h2) - VA # Environmental variance
      env <- rnorm(inds, 0, sqrt(VE)) # Environmental effect
      for(standv in sds){
        # Adjust phenotype scaling based on locus and heritability
        sdp = sqrt(locus/(3*h2))
        # ifelse(locus == 1, sqrt((3*locus)/h2), sqrt(3*locus/h2))
        mypheno <- tibble(
          phenotypes = additive + env,
          mup = 0.5 * locus, # Mean phenotype
          sdp = sdp, # Standard deviation of phenotype
          standv = standv,
          heritability = h2,
          locus = locus
        )
        df <- bind_rows(df, mypheno)
      }
    }
  }
  df_list[[iteration]] <- df  # Store dataframe in my list of data
}

# A single dataframe
combined_df <- do.call(bind_rows, df_list)
```

```{r}
newdataset <- combined_df %>%
  group_by(heritability, locus, standv) %>%
  mutate(
        # phenotype = ((phenotypes - min(phenotypes)) / 
        #              (max(phenotypes) - min(phenotypes))) * 100,# Pheno will be between 0 and 100
           phenotype = ((phenotypes - mup) / (sdp)),# Scaled phenotype
           #optimum = standv, # Optimum phenotype
        #phenotype = phenotypes,# Scaled phenotype
        optimum = mean(phenotype)+ sd(phenotype)*standv, # Optimum phenotype
         #Fitness = case_when(
          # locus == 1 ~ exp(-(sd(phenotype)/5) *  (phenotype - optimum)^2),
         #TRUE ~ exp(-(sd(phenotype)/100) * (phenotype - optimum)^2)),
         Fitness = case_when(
           locus == 1 ~ exp(-(1/50) *  (phenotype - optimum)^2),
         TRUE ~ exp(-(1/50) * (phenotype - optimum)^2)),
         #mean_fit = mean(Fitness),
         heritability = factor(heritability),
         standv = factor(standv)) 
```

```{r, fig.width=12, fig.height=6}
library(ggplot2)
library(dplyr)
library(cowplot)

newdataset2 <- newdataset %>% 
  filter(heritability == 0.8, standv == 1| standv == 4) # | standv == 4| standv == 8
# Define the phenotype value. Not that this value can be changed based on which z scale choose
pheno.value <- 0 #can go with 50 if pheno (z) ranges in 0 and 100

# Filter the dataset to get fitness values where phenotype is 1.6 for each locus and standv
fit.values <- newdataset2 %>%
  ungroup() %>%
  filter(round(phenotype, digits = 2) == pheno.value) %>%
  dplyr::select(locus, standv, Fitness) %>%
  distinct()

theme_set(theme_cowplot())

# Plot the data
myplot <- ggplot(data = newdataset2, 
       aes(x = round(phenotype, digits = 5), 
           y = round(Fitness, digits = 5), color = standv)) +
  geom_line(linewidth = 1) +
  geom_vline(xintercept = pheno.value, linetype = "dashed") +
  geom_hline(data = fit.values, aes(yintercept = Fitness, color = as.factor(standv))) +
  geom_text(data = fit.values, aes(x = pheno.value, y = round(Fitness, digits =2), 
                                   label = paste("Pheno =", pheno.value, ";  Fit =", round(Fitness, digits = 2))),
            color = standv, vjust = 1.5, hjust = 1.5, size = 2) +
  facet_wrap(~locus, ncol = 2) +
  labs(x = "Phenotypes", y = "Fitness")+
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r, fig.width=12, fig.height=6}
myplot
```
## Fitness/ selection strength assessment

```{r}
library(tidyverse)

fitfx <- function(D){
  w = exp(-(1/50)*D^2)
  return(w)
}
```

```{r}
D = seq(-5, 5, by = 1)
fitness = fitfx(D)
```

```{r}
fdf <- tibble(D, fitness)
nfdf <- fdf %>% 
  mutate(D = abs(D)) %>% 
  distinct() %>% 
  mutate(difd = round(c(diff(fitness), 0), digits = 4))

nfdf

```
```{r}
nfdf %>% 
  ggplot(aes(factor(D), factor(round(fitness, digits = 4))))+
  geom_point()+
  labs(x = "Optimal Distance", y = "Fitness")+
  theme_classic()
```



