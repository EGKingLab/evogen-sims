---
title: "SpectralDifferentWay"
author: "Esdras T."
format: html
editor: visual
---

```{r}
library(tidyverse)
library(MASS)
library(pracma)
library(cowplot)
library(ggforce)
library(future)
library(furrr)
library(purrr)
library(caret)
library(here)
library(patchwork)
theme_set(theme_cowplot())
```

> Frequency function

```{r}

fftfreq <- function(n, d = 1) {
  if (n %% 2 == 0) {
    k <- c(seq(0, n/2 - 1), seq(-n/2, -1))
  } else {
    k <- c(seq(0, (n - 1)/2), seq(-(n - 1)/2, -1))
  }
  return(k / (n * d))
}
```

> Files

```{r}
gene_df <- read.csv("../../../output.dir/Select_Press/ConstFluctSelect.dir/FS.dir/genome4_100_H0.5SD4Gen30.csv") #%>% filter(Position == 762687)
```

```{r}
signal <- gene_df$Frequency
spectral_dens <- fft(signal)
power_spec <- abs(spectral_dens)
frequencies <- fftfreq(length(signal))

max_FreqIndx <- which(frequencies > 0.05)
HighFreq <- frequencies[max_FreqIndx]
peak_PowerIndx <- which.max(power_spec[max_FreqIndx])
PeakPowerFreq <- HighFreq[peak_PowerIndx]
PeakPowerFreq
```

```{r}
plot(frequencies[max_FreqIndx], power_spec[max_FreqIndx], col = "red", type = "l")
```

### Fourier using all loci

```{r}
fftfreq <- function(n, d = 1) {
  if (n %% 2 == 0) {
    k <- c(seq(0, n/2 - 1), seq(-n/2, -1))
  } else {
    k <- c(seq(0, (n - 1)/2), seq(-(n - 1)/2, -1))
  }
  return(k / (n * d))
}

fft_fun <- function(data, pos){
  data_pos <- data %>%
    filter(Position == pos)
  
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  Spect = fft(Mu_Freq_num)
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = 1/fftfreq(length(1:length(Mu_Freq_num)))
  FFT_back = rep(NA, length(FFT_Freq))
  
  mydf <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    Frequency = Mu_Freq_num, # Remove this if necessary
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    Spect = Spect,
    FFT_back = FFT_back
  ) %>%
     mutate(Spect = ifelse(FFT_Power < 10 , 0, Spect),
    #mutate(Spect = ifelse(FFT_Freq <=40 , 0, Spect),
    FFT_back = Re(fft(Spect, inverse = TRUE))/length(Mu_Freq_num)) %>% 
    replace(is.na(.), 0)
  
  return(mydf)
}
```

```{r}
Positions = unique(gene_df$Position)
Newdata <- future_map(Positions, fft_fun, data = gene_df) %>%  list_rbind()
```

```{r}
ggplot(Newdata, aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "Frequency", color = "Position") +
  theme(legend.position = "none") 

ggplot(Newdata, aes(x = Generation, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "FFT_back", color = "Position") +
  theme(legend.position = "none")

Newdata %>% 
  filter(FFT_Freq > 0 ) %>% #& FFT_Freq < 60) %>% 
  ggplot(aes(x = FFT_Freq, y = FFT_Power)) +
  geom_line() +
  labs(x = "Generation", y = "FFT_back", color = "Position") +
  theme(legend.position = "none")
```

```{r}
NNewdata <- Newdata %>% filter(FFT_Freq > 0.01 & FFT_Freq < 0.015) %>%
  group_by(Generation)%>%
  summarize(Mean_Power = mean(FFT_Power),
            Mean_Frequency = mean(Frequency),
            Mean_Freq = 1/mean(FFT_Freq))

  spec_Plot <- NNewdata %>% ggplot(aes(x = abs(Mean_Freq), y = Mean_Power))+
  geom_line()+
  labs(x = "Fequency", y = "Spectrum")+
  theme(legend.position = "none")

  Freq_Plot <- NNewdata %>% ggplot(aes(x = abs(Mean_Freq), y = Mean_Frequency))+
  geom_line()+
  labs(x = "Generation", y = "Allele Freq")+
  theme(legend.position = "none")

  plot_grid(spec_Plot, Freq_Plot)
```

### Using Mean for FFT

```{r}
gene_df <- read.csv("../../../output.dir/Select_Press/ConstFluctSelect.dir/FS.dir/genome4_100_H0.5SD4Gen10.csv") 

fftfreq <- function(n, d = 1) {
  if (n %% 2 == 0) {
    k <- c(seq(0, n/2 - 1), seq(-n/2, -1))
  } else {
    k <- c(seq(0, (n - 1)/2), seq(-(n - 1)/2, -1))
  }
  return(k / (n * d))
}

fft_fun2 <- function(data, pos){
  data_pos <- data %>%
    filter(Position == pos)
  
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  Spect = fft(Mu_Freq_num)
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = 1/fftfreq(length(1:length(Mu_Freq_num)))
  FFT_back = rep(NA, length(FFT_Freq))
  
  mydf2 <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    Frequency = Mu_Freq_num, # Remove this if necessary
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    Spect = Spect,
    FFT_back = FFT_back
  ) %>%
    #filter(FFT_Freq > 0 & FFT_Freq <= 40) %>% 
    group_by(Generation) %>% 
    summarise(
      FFT_Freq = FFT_Freq,
      mean_FFT_Power = mean(FFT_Power),
      mu_Spect = mean(Spect)) %>% 
    mutate(FFT_back = Re(fft(mu_Spect, inverse = TRUE))/length(FFT_Freq)) %>% #Possibly delete it
  filter(FFT_Freq > 0 & FFT_Freq <= 40)
  return(mydf2)
}
```

```{r}
Positions = unique(gene_df$Position)
Newdata2 <- future_map(Positions, fft_fun2, data = gene_df) %>%  list_rbind()
```

```{r}
Newdata2 %>% ggplot(aes(x = FFT_Freq, y = mean_FFT_Power)) +
  geom_line() +
  #geom_vline(xintercept = 20, color = "gray30")+
  labs(x = "Generation", y = "Spectral Density") +
  theme(legend.position = "none")


Newdata2 %>% 
  #filter(FFT_back > 0) %>% 
  ggplot(aes(x = Generation, y = FFT_back)) +
  geom_line() +
  geom_vline(xintercept = 60, color = "gray30")+
  labs(x = "Generation", y = "Frequency") +
  theme(legend.position = "none")

# ggplot(Newdata21, aes(x = Mean_FFT_Freq, y = Mean_FFT_Power)) +
#   geom_line() +
#   geom_vline(data = Newdata21, aes(xintercept = 35.5), color = "red", linetype = "dashed") +
#   labs(x = "Generation", y = "Spectral Density", color = "Position") +
#   coord_cartesian(xlim = c(10, 60), ylim = c(0, 8)) +
#   theme(legend.position = "none")

```

```{r}
Newdata21 <- Newdata2 %>% 
  group_by(Generation, FFT_Freq) %>% 
  summarise(
    # Mean_Frequency = mean(Frequency), # Remove this if necessary
    # Mean_FFT_Power = mean(FFT_Power),
    Mean_Spect = mean(Spect),
    FFT_back_mu = mean(FFT_back)
    )%>%
    mutate(#Mean_Spect = ifelse(Mean_FFT_Power < 5 , 0, Mean_Spect),
           #Mean_FFT_Freq = ifelse(Mean_FFT_Power < 5 , 0, Mean_FFT_Freq),
           FFT_back_mu = Re(fft(Mean_Spect, inverse = TRUE))/length(FFT_Freq)) %>% 
  filter(FFT_back_mu > 0)

# ggplot(Newdata21, aes(x = Mean_FFT_Freq, y = Mean_FFT_Power)) +
#   geom_line() +
#   labs(x = "Generation", y = "Spectral Density", color = "Position") +
#   xlim(10,60)+
#   ylim(0, 8)+
#   theme(legend.position = "none")

ggplot(Newdata21, aes(x = Generation, y = FFT_back_mu)) +
  geom_line() +
  geom_vline(data = Newdata21, aes(xintercept = 35.5), color = "red", linetype = "dashed") +
  labs(x = "Generation", y = "Spectral Density", color = "Position") +
  coord_cartesian(xlim = c(10, 60), ylim = c(0, 8)) +
  theme(legend.position = "none")

PeakIndx <- which.max(Newdata21$Mean_FFT_Power)
PeakFreq <- Newdata21$Mean_Frequency[PeakIndx]
PeakFreq
```

### Using Spectrum function in R

```{r}
file <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/ConstFluctSelect.dir/FS.dir/genome4_100_H0.5SD4Gen10.csv") %>% dplyr::select(!c(Origin, Effect))#read.csv("/home/kingeg/Projects/MyGithub/evogen_sims/output/SLiM/genome_track_FSFP_2.csv")
#head(file)
dat_wide <- pivot_wider(file[,c("Generation","Position","Frequency")], names_from=Position, values_from=Frequency)
dat_wide[is.na(dat_wide)] <- 0 
ff1 <-dat_wide[,2:101]
ttest <- spectrum(ff1, spans=2, plot=FALSE)
out.spect <- rowMeans(ttest$spec)
ddifs <- diff(as.matrix(ff1), lag=1)
out.abs.diff1 <- rowMeans(abs(ddifs))

dd <- data.frame("Frequency"= rep((ttest$freq)), 
                 "sel"=rep("CS",each=1000),
                 "spec"=out.spect)
dd %>% 
  ggplot(aes(Frequency, spec)) +
  geom_line(size=1.1) +
  #geom_vline(xintercept = 20, color= 'grey30') +
  scale_color_manual(values=c("coral","grey30","steelblue")) +
  xlab("Periodicity (Generations)") +
  ylab("Spectral Density") +
  facet_zoom(xlim = c(0.03,0.07),ylim = c(0, 0.005))
             #+
  #annotate("text",label="simulated \ndatasets", x=15, y =0.012)

dd1 <- data.frame("Frequency"= rep(1/(ttest$freq)), 
                 "sel"=rep("CS",each=1000),
                 "spec"=out.spect)
simp <- dd1 %>% filter(Frequency <= 40) %>%
  ggplot(aes(Frequency, spec)) +
  geom_line(size=1.1) +
  geom_vline(xintercept = 20, color= 'coral') +
  scale_color_manual(values=c("coral","grey30","steelblue")) +
  xlab("Periodicity (Generations)") +
  ylab("Spectral Density") +
  annotate("text",label="simulated \ndatasets", x=15, y =0.0075)

simp

```

#### What about all files?

```{r}
# Get list of csv files in the directory
files <- list.files(path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/ConstFluctSelect.dir/CS.dir/", pattern = "^genome.*30\\.csv$", full.names = TRUE)

# Initialize an empty data frame to store results
all_results <- data.frame()

# Iterate over each file
for (file_name in files) {
  
  # Read file and select columns
  file <- read.csv(file_name) %>% dplyr::select(!c(Origin, Effect))
  
  # Reshape data
  dat_wide <- pivot_wider(file[,c("Generation","Position","Frequency")], names_from=Position, values_from=Frequency)
  dat_wide[is.na(dat_wide)] <- 0 
  ff1 <-dat_wide[,2:101]
  
  # Apply spectrum and calculate row means
  ttest <- spectrum(ff1, spans=2, plot=FALSE)
  out.spect <- rowMeans(ttest$spec)
  
  # Compute differences and row means
  ddifs <- diff(as.matrix(ff1), lag=1)
  out.abs.diff1 <- rowMeans(abs(ddifs))
  
  # Prepare data frame for plot
  dd <- data.frame("Frequency"= rep((1/ttest$freq)), 
                   "File"= basename(file_name),  # Add a new column for file name
                   "sel"=rep("CS",each=1000),
                   "spec"=out.spect)
  
  # Combine with previous results
  all_results <- rbind(all_results, dd)
}
```

```{r}


# Filter and plot the results
 fft1 <- all_results %>%
  filter(Frequency <= 100) %>%
  ggplot(aes(Frequency, spec, color = File)) +  # Add color = File to aes function
  geom_line(size=1.1) +
  #ylim(c(0,0.0015))+
  #geom_vline(xintercept = 60, color= 'red') +
  theme(legend.position = "none")+
  xlab("Periodicity (Generations)") +
  ylab("Spectral Density") +
  annotate("text",label="simulated \ndatasets", x=15, y =0.012)
 
  my_fft <- file.path("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/ConstFluctSelect.dir/Plots.dir/CS_Plot.dir", "SD30_FFT.png")
  png(filename = my_fft, width = 6, height = 4, units = "in", res = 300)
  print(fft1)
  dev.off()
```

### Combining both Constant and Fluctuating Selection

```{r}
# List of directories
directories <- c("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/ConstFluctSelect.dir/CS.dir/", "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/ConstFluctSelect.dir/FS.dir/")

# Initialize an empty data frame to store results
all_results <- data.frame()

# Iterate over each directory
for (dir in directories) {
  
  # Get the files from the directory
  files <- list.files(path = dir, pattern = "^genome.*30\\.csv$", full.names = TRUE)

  # Iterate over each file
  for (file_name in files) {
    
    # Read file and select columns
    file <- read.csv(file_name) %>% dplyr::select(!c(Origin, Effect))
    
    # Reshape data
    dat_wide <- pivot_wider(file[,c("Generation","Position","Frequency")], names_from=Position, values_from=Frequency)
    dat_wide[is.na(dat_wide)] <- 0 
    ff1 <-dat_wide[,2:101]
    
    # Apply spectrum and calculate row means
    ttest <- spectrum(ff1, spans=2, plot=FALSE)
    out.spect <- rowMeans(ttest$spec)
    
    # Compute differences and row means
    ddifs <- diff(as.matrix(ff1), lag=1)
    out.abs.diff1 <- rowMeans(abs(ddifs))
    
    # Determine the selection based on the directory
    sel <- ifelse(dir == "/home/FS.dir/", "FS", "CS")

    # Prepare data frame for plot
    dd <- data.frame("Frequency"= rep((1/ttest$freq)), 
                     "File"= basename(file_name),  # Add a new column for file name
                     "sel"=rep(sel, each=1000),   # Use the determined selection
                     "spec"=out.spect)
    
    # Combine with previous results
    all_results <- rbind(all_results, dd)
  }
}

```

```{r}

# Filter and plot the results
 all_results %>%
  filter(Frequency <= 100) %>%
  ggplot(aes(Frequency, spec, color = File)) +  # Add color = File to aes function
  geom_line(size=1.1) +
  #ylim(c(0,0.0015))+
  #geom_vline(xintercept = 60, color= 'red') +
  theme(legend.position = "none")+
  xlab("Periodicity (Generations)") +
  ylab("Spectral Density") +
  annotate("text",label="simulated \ndatasets", x=15, y =0.012)
 
 # Fitness_DensName <- file.path(mypath, paste0(basename(myphenofile), "_FitDens.png"))
 # png(filename = Fitness_DensName, width = 6, height = 4, units = "in", res = 300)
 # print(FitDens)
 # dev.off()
```

```{r}
library(stringr)

# Initialize an empty data frame to store results
all_results <- data.frame()

# Iterate over each file
for (file_name in files) {
  
  # Extract the number from the file name
  num <- as.numeric(str_extract(basename(file_name), "\\d+"))
  
  # Set the frequency cutoff based on the number in the file name
  freq_cutoff <- ifelse(num == 10, 40, ifelse(num == 20, 80, ifelse(num == 30, 100, 40)))
  
  # The rest of your code here...

  # Filter the results
  dd <- dd %>%
    filter(Frequency <= freq_cutoff)
  
  # Add the filtered data to the combined data frame
  all_results <- rbind(all_results, dd)
}

# Generate a single plot from the combined data frame
ggplot(all_results, aes(Frequency, spec, color = File)) +
  geom_line(size=1.1) +
  geom_vline(xintercept = 20, color= 'grey30') +
  theme(legend.position = "none")+
  xlab("Periodicity (Generations)") +
  ylab("Spectral Density") +
  annotate("text",label="simulated \ndatasets", x=15, y =0.012)

```
