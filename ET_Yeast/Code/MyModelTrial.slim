/*This is the very beginning of the simulation project. Constant population, constant selection, fluctuation pop, and fluctuation selec
Let's begin with a model that do not have heritability.
Also, not that we can model all 6 yeast chromosome, but in the current model, we will do 1 chromosome for learning purposes
*/

initialize() {
	setSeed(123456);
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral | Also, 0.5 is dominance coeff
	initializeMutationType("m2", 0.5, "f", 0.3); // synonymous
	initializeMutationType("m3", 0.5, "f", 0.1);  // Exponential with selection coef of 0.1. This is our QTL
	
	/* The above shows a constant mutation! Note that if we wanted the mutation effect to be discrete, 
	we would use a user specified "s" distribution. check scriptForQTLs */
	
	m3.convertToSubstitution = F; // We need our QTL to stay even after fixation
	
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", c(m2, m3), c(1, 0.1));
	
	//base = 0;
	
	//while (base < 1000000) {
	//exon = rdunif(1, 100, 10000);
	//initializeGenomicElement(g1, base, base + exon - 1);
	//base = base + exon;
	
	//non_coding = asInteger(rnorm(1, log(50), log(2))) + 1;
	//initializeGenomicElement(g2, base, base + non_coding - 1);
	//base = base + non_coding;
	
	//while  (runif(1) < 0.8); //20% probability of stopping
	//}
	
	initializeGenomicElement(g1, 0, 249999); // This may correspond with how many based woth one yeast chromosome
	initializeGenomicElement(g2,250000, 499999);
	initializeGenomicElement(g1, 500000, 749999);
	initializeGenomicElement(g2,750000, 999999);
	
	m1.color = "yellow";
	m2.color = "red";
	m3.color = "blue";
	
	g2.color = "purple";
	
	initializeRecombinationRate(1e-8);
}

1 early() {sim.addSubpop("p1", 10000);
	
/*	writeFile(paste0("/Users/etb68/OneDrive - University of Missouri/Academics Mizzou (etb68@umsystem.edu)/Biologycal_Sciences/Research_Projects/Yeast_GitHub/evogen-sims/ET_Yeast/Output.dir/genomeV2",".csv"), paste0("Generation, Position, Frequency, Effect"));
	writeFile(paste0("/Users/etb68/OneDrive - University of Missouri/Academics Mizzou (etb68@umsystem.edu)/Biologycal_Sciences/Research_Projects/Yeast_GitHub/evogen-sims/ET_Yeast/Output.dir/phenotypesV2",".csv"), paste0("Generation, Phenotype, Optimum"));
*/
}

mutationEffect(m3){
	dominance = asInteger(homozygous) * 0.5 + 0.5;
	return 1.0 + sim.mutationFrequencies(p1, mut)* dominance;
}
1: late() {
	// sum the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	phenotypes = inds.sumOfMutationsOfType(m3);
	mp = mean(phenotypes) + sd(phenotypes)*4;
	nopt = rep(c(rep(mp ,25),rep(mp,25)), 12);
	defineGlobal("newopt", nopt);
	
	// set fitness effects and remember phenotypes
	//inds.fitnessScaling = 1.0 + dnorm(10.0 - phenotypes, 0.0, 10.0);
	
	inds.tagF = phenotypes;
	
	//mutationEffect(m3) { //this was used to be fitness
	//	return 1.0;   // QTLs are neutral; fitness effects are handled below
	//}
}
501 late() {
	if (sim.cycle == 1) //cycle used to be generation
		cat("Mean phenotype:\n");
	
	meanPhenotype = mean(p1.individuals.tagF);
	cat(format("%.2f", meanPhenotype));
	
	
	qtls = sim.mutationsOfType(m3);
	f = sim.mutationFrequencies(NULL, qtls);
	s = qtls.selectionCoeff;
	p = qtls.position;
	o = qtls.originTick;
	indices = order(f, F);
	/*
	for (i in indices)
	{
		//mydata = cat("   " + p[i] + ": s = " + s[i] + ", f == " + f[i] + ", o == " + o[i] + "\n");
		writeFile(paste0("/Users/etb68/OneDrive - University of Missouri/Academics Mizzou (etb68@umsystem.edu)/Biologycal_Sciences/Research_Projects/Yeast_GitHub/evogen-sims/ET_Yeast/Output.dir/genomeV2", ".csv"), paste0(sim.cycle,",", p[i], ",", format("%.6f",f[i]), ",", format("%.6f",s[i])), append = T);
		
		//	writeFile(paste0("/Users/etb68/OneDrive - University of Missouri/Academics Mizzou (etb68@umsystem.edu)/Biologycal_Sciences/Research_Projects/Yeast/genome", ".csv"), paste0(sim.cycle, ",", p[i], ",", f[i], ",", s[i]), append = T);
	}
	meanPhenotype = mean(p1.individuals.tagF);
	writeFile(paste0("/Users/etb68/OneDrive - University of Missouri/Academics Mizzou (etb68@umsystem.edu)/Biologycal_Sciences/Research_Projects/Yeast_GitHub/evogen-sims/ET_Yeast/Output.dir/phenotypesV2",".csv"), paste0(sim.cycle,",",format("%.6f", meanPhenotype),",",format("%.6f",newopt)), append=T);
}
*/

/*501 late() {
	cat("\n\n-------------------------------\n");
	cat("QTLs at generation " + sim.cycle + ":\n\n");
	
	qtls = sim.mutationsOfType(m3);
	f = sim.mutationFrequencies(NULL, qtls);
	s = qtls.selectionCoeff;
	p = qtls.position;
	o = qtls.originTick;
	indices = order(f, F);
*/	
	for (i in indices)
		
		cat("   " + p[i] + ": s = " + s[i] + ", f == " + f[i] + ", o == " + o[i] + "\n");
	
	sim.simulationFinished();
}
