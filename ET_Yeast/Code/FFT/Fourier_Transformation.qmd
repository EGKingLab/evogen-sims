---
title: "Fourier_Transfrom"
author: "Esdras T"
format: html
editor: visual
---

## Fourier Transformation

```{r}
library(tidyverse)
library(MASS)
library(pracma)
library(cowplot)
library(ggforce)
library(future)
library(furrr)
library(purrr)
library(caret)
library(here)
library(patchwork)
theme_set(theme_cowplot())
```

#### Files

```{r}
geno1 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/genome1_100_0.5.csv") #%>% filter(Position == 1006747)
geno2 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/FSFP_2sd_1.dir/genomeFSFP2sd_A1_100_0.5.csv")

geno3 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/FSFP_2sd_1.dir/genomeFSFP2sd_A1_300_0.5.csv")
```

#### First Try

```{r}
ft_geno <- geno2 %>%
  group_by(Position) %>%
  mutate(FFT_PowerDensity = abs(fft(Frequency)), #Power
         FFT_Freq = spectrum(Frequency, plot = FALSE)$freq[1:n_distinct(Generation)]) %>% #Freq
        # From here we can print our maximum freq, and can make a plot of power and frequency in which the absobute value of Frequency is greater than a given threshold. We here use indices.
  mutate(FFT_PowerDensity = case_when(FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
         TRUE~ FFT_PowerDensity),
         FFT_back = Re(fft(FFT_PowerDensity, inverse = TRUE))/length(Frequency))

View(ft_geno)

ft_geno %>% ggplot(aes(Generation, FFT_back, color = factor(Position)))+
  geom_line()+
  theme(legend.position = "none")
```

#### With for loop

```{r}
Newdata_geno <- list()

Positions = unique(geno2$Position)
for(QTL in Positions){
  geno2_pos <- geno2 %>%
    filter(Position == QTL)
  
  ft_geno1 <- geno2_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  Mu_Freq_num <- as.numeric(ft_geno1$Mu_Freq)

  FFT_Power = (fft(Mu_Freq_num))
  FFT_Freq = spectrum(Mu_Freq_num)$freq[seq_len(length(Mu_Freq_num))]
  FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  Newdata_geno[[QTL]] <- data.frame(
    Position = QTL,
    Generation = ft_geno1$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
}

```

#### With a function

```{r}
fft_fun <- function(data, pos){
  data_pos <- data %>%
    filter(Position == pos)
  
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  
  FFT_Power = (fft(Mu_Freq_num))
  FFT_Freq = spectrum(Mu_Freq_num, plot = FALSE)$freq[seq_len(length(Mu_Freq_num))]
  FFT_back =Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  mydf <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
  
  return(mydf)
}
```

```{r}
Positions = unique(geno2$Position)
Newdata <- future_map(Positions, fft_fun, data = geno2) %>%  list_rbind()

```

```{r}

ggplot(geno2, aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "Frequency", color = "Position") +
  theme(legend.position = "none") 

ggplot(Newdata, aes(x = Generation, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "FFT_back", color = "Position") +
  theme(legend.position = "none") 

ggplot(Newdata, aes(x = Mod(FFT_Power), y = FFT_back, color = factor(Position))) +
  geom_line() +
  geom_vline(aes(xintercept = 125), linetype = "dashed") +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none")
```

#### Using a different way for frequency

```{r}
fftfreq <- function(n, d = 1) {
  if (n %% 2 == 0) {
    k <- c(seq(0, n/2 - 1), seq(-n/2, -1))
  } else {
    k <- c(seq(0, (n - 1)/2), seq(-(n - 1)/2, -1))
  }
  return(k / (n * d))
}

fft_fun <- function(data, pos){
  data_pos <- data %>%
    filter(Position == pos)
  
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = fftfreq(length(1:length(Mu_Freq_num)))
  FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  mydf <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
  
  return(mydf)
}
```

```{r}
Positions = unique(geno3$Position)
Newdata <- future_map(Positions, fft_fun, data = geno3) %>%  list_rbind()
```

```{r}
ggplot(geno3, aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "Frequency", color = "Position") +
  theme(legend.position = "none") 

ggplot(Newdata, aes(x = Generation, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "FFT_back", color = "Position") +
  theme(legend.position = "none") 

Newdata%>% filter(FFT_back > 0) %>% 
  ggplot(aes(x = FFT_Power, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none")
```

```{r}
Newdata %>% group_by(Generation) %>% 
  summarize(Mean_Freq = mean(FFT_Freq)) %>% 
  #filter(Mean_Freq > 0) %>% 
  ggplot(aes(x = Generation, y = Mean_Freq)) +
  geom_line() +
  labs(x = "Generation", y = "Mean_Freq") +
  theme(legend.position = "none") 
```

### More Trials

```{r}
geno <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/FSFP_2sd_1.dir/genomeFSFP2sd_A1_300_0.5.csv")

new_d <- geno %>% filter(Position == 892706)
fft_signal <- fft(new_d$Frequency)
fft_power <- abs(fft_signal)
fft_freq <- fftfreq(length(new_d$Frequency))
cat("The maximum frequency is", "\n", max(fft_freq))

pos_mask = which(fft_freq > 0.05)
freqs = fft_freq[pos_mask]

peak_indx = which.max(fft_power[pos_mask])
peak_freq = freqs[peak_indx]

print (peak_freq)



plot(fft_freq[pos_mask], fft_power[pos_mask], type = "l")
```

```{r}
copy_signal_fft = fft_signal
copy_signal_fft[fft_power > 0.15] <- 0
signal_back <- Re(fft(copy_signa_fft, inverse = TRUE))
```

## Post Analysis

```{r}
signals_back <- list()
get_low_freq <- function(fft_signal, peak_freq, fft_freq, freqs, peak_indx) {
  max_freq <- max(freqs)
  lf_signals <- list()
  low_freqs <- c(0, peak_freq/4, peak_freq/2, peak_freq, peak_freq*2, peak_freq*4)
  
  cat("low frequency components", "\n")
  
  for (i in seq_along(low_freqs)[-length(low_freqs)]) {
    start_freq <- low_freqs[i]; end_freq <- low_freqs[i+1]
    copy_signal_fft <- fft_signal
    cat("frequency range is:", start_freq, "-", end_freq, "\n")
    
    copy_signal_fft[abs(fft_freq) < start_freq] <- 0
    copy_signal_fft[abs(fft_freq) > end_freq] <- 0
    signal_back = Re(fft(copy_signa_fft, inverse = TRUE))
    signals_back[[i]] <- signal_back
  }
  #cat("\n")
  return(signals_back)
}
```

```{r}
multiscale_fft <- function(sign, time_step) {
  fft_signal <- fft(sign)
  fft_power <- abs(fft_signal)
  ## get corresponding frequencies
  fft_freq <- fftfreq(length(sign), d = time_step)
  pos_mask <- which(fft_freq > 0)
  # pos_mask <- which((sample_freq > 0) & (sample_freq < 0.05))
  freqs <- fft_freq[pos_mask]
  # print(max(freqs), which.max(power[pos_mask]))
  peak_indx <- which.max(fft_power[pos_mask])
  peak_freq <- freqs[which.max(fft_power[pos_mask])]
  
  low_filtered_sigs <- get_low_freq(fft_signal, peak_freq, fft_freq, freqs, peak_indx)
  
  return(list(sample_freq = fft_freq, pos_mask = pos_mask, power = fft_power,
              low_filtered_sigs = low_filtered_sigs))
}
```

```{r}
result <- multiscale_fft(new_d$Frequency, 1)
sample_freq <- result$sample_freq
pos_mask <- result$pos_mask
power <- result$power
low_filtered_sigs <- result$low_filtered_sigs
high_filtered_sigs <- result$high_filtered_sigs
```

```{r}
library(ggplot2)
# Create a data frame with the new_d$Frequency and low_filtered_sigs values
df <- data.frame(Frequency = rep(new_d$Frequency, length(low_filtered_sigs)),
                 Signal = unlist(low_filtered_sigs),
                 Group = rep(seq_along(low_filtered_sigs), each = length(new_d$Frequency)))
# Plot the data frame using ggplot
ggplot(df, aes(x = Frequency, y = Signal)) +
  geom_line() +
  facet_wrap(~ Group) +
  geom_line(aes(y = sign), col = "red")
```

## Fourier Using Mean Frequency After Transformation

```{r}
geno <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/genome1_100_0.5.csv")
FFT_Geno <- list()
positions <- geno$Position
for(pos in positions){
  mydf <- geno %>% filter(Position == pos)
  Allele_freq <- mydf$Frequency
  QTL_Pos <- pos
  Generation <- mydf$Generation
  FFT_Sign <- fft(Allele_freq)
  FFT_Power <- abs(FFT_Sign)
  FFT_Freq <- fftfreq(length(mydf$Frequency))
  FFT_Geno[[pos]] <- tibble(Generation, QTL_Pos, FFT_Sign, FFT_Power, FFT_Freq)
}

FFT_Geno <- FFT_Geno %>% list_rbind()
FFT_Geno <- FFT_Geno %>% filter(FFT_Freq > 0)

FFT_geno_mean <- FFT_Geno %>% group_by(Generation) %>% 
  summarize(Mean_sign = mean(FFT_Sign), Mean_Spect = mean(FFT_Power), 
            Mean_Freq = mean(FFT_Freq))

plot(FFT_geno_mean$Mean_Freq[0:20], FFT_geno_mean$Mean_Spect[0:20], type = "l")

FFT_geno_mean_F <- FFT_geno_mean %>% filter(Mean_Freq > 0.004 & Mean_Freq < 0.025)

peak_indx <- which.max(FFT_geno_mean_F$Mean_Spect)
peak_frq <- FFT_geno_mean_F$Mean_Freq[peak_indx]

plot(FFT_geno_mean_F$Mean_Freq, FFT_geno_mean_F$Mean_Spect, type = "l")

plot(FFT_geno_mean_F$Generation, FFT_geno_mean_F$Mean_Spect, type = "l")

```
