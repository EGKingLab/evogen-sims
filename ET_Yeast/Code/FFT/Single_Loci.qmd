---
title: "PY_FFT"
format: html
editor: visual
---

## Fourier Transform while considering a single locus

```{r}
library(tidyverse)
library(MASS)
library(pracma)
library(cowplot)
library(ggforce)
library(future)
library(furrr)
library(purrr)
library(caret)
library(here)
library(patchwork)
theme_set(theme_cowplot())
```

I first follow all the process with a single locus, then apply the method to multiple loci.

#### Frequency function

```{r}
fftfreq <- function(n, d = 1) {
  if (n %% 2 == 0) {
    k <- c(seq(0, n/2 - 1), seq(-n/2, -1))
  } else {
    k <- c(seq(0, (n - 1)/2), seq(-(n - 1)/2, -1))
  }
  return(k / (n * d))
}

```

#### Fourier Transform

```{r}
geno <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/genome1_1_0.5.csv")
geno1 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/FSCP2sd.dir/genome2sd1_1_0.5.csv")
geno2 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/FSFP_2sd_1.dir/genomeFSFP2sd_A1_1_0.5.csv")

new_d <- geno %>% filter(Position == 610140) #892706, 429068
fft_signal <- fft(new_d$Frequency)
fft_power <- abs(fft_signal) # Mod(fft_signal)^2
fft_freq <- fftfreq(length(new_d$Frequency))
cat("The maximum Power is: ", max(fft_power))

#pos_mask = which(fft_freq >  0.01 & fft_freq < 0.12) #0.05 For single Q  0.021) We try first with zero then we set up the threshold
pos_mask = which(fft_freq > 0)
freqs = fft_freq[pos_mask]

peak_indx = which.max(fft_power[pos_mask])
peak_freq = freqs[peak_indx]

plot(freqs, fft_power[pos_mask], type = "l")


#0.02
print(peak_freq)

peak_freq*2000

plot(fft_freq[pos_mask][0:50], fft_power[pos_mask][0:50], type = "l")

```

```{r}
copy_signal_fft = fft_signal
copy_signal_fft[fft_power < 5] <- 0
signal_back = Re(fft(copy_signal_fft, inverse = TRUE))/2000
z <- signal_back - new_d$Frequency
plot(new_d$Frequency, type = "l", col = "magenta")
plot(signal_back, type = "l", col = "blue")
plot(z, type = "l", col = "red")

```

## Post Analysis

```{r}
signals_back <- list()
get_low_freq <- function(fft_signal, peak_freq, fft_freq, freqs, peak_indx) {
  # fff_signal is transformed allele freq, peak_freq is the frequencies with maximum power
  # fff_freq are the frequencies i.e absolute values from fff
  # freqs are the frequencies above threshold
  # peak_indx are indices that have max power among frequencies that are above thrld
  max_freq <- max(freqs)
  lf_signals <- list()
  low_freqs <- c(0, peak_freq/4, peak_freq/3, peak_freq/1.6, peak_freq, peak_freq*2, peak_freq*3, peak_freq*4)
  #low_freqs <- c(peak_freq, peak_freq*5, peak_freq*10, peak_freq*20, peak_freq*50, peak_freq*100)
  cat("low frequency components", "\n")
  
  for (i in seq_along(low_freqs)[-length(low_freqs)]) {
    start_freq <- low_freqs[i]; end_freq <- low_freqs[i+1]
    copy_signal_fft <- fft_signal
    cat("frequency range is:", start_freq, "-", end_freq, "\n")
    
    copy_signal_fft[abs(fft_freq) < start_freq] <- 0
    copy_signal_fft[abs(fft_freq) > end_freq] <- 0
    signal_back = Re(fft(copy_signal_fft, inverse = TRUE))
    signals_back[[i]] <- signal_back
  }
  #cat("\n")
  return(signals_back)
}

```

```{r}
multiscale_fft <- function(sign, time_step) {
  fft_signal <- fft(sign)
  fft_power <- abs(fft_signal)
  ## get corresponding frequencies
  fft_freq <- fftfreq(length(sign), d = time_step)
  pos_mask <- which(fft_freq > 0.003)
  # pos_mask <- which((sample_freq > 0) & (sample_freq < 0.05))
  freqs <- fft_freq[pos_mask]
  # print(max(freqs), which.max(power[pos_mask]))
  peak_indx <- which.max(fft_power[pos_mask])
  peak_freq <- freqs[which.max(fft_power[pos_mask])]
  
  low_filtered_sigs <- get_low_freq(fft_signal, peak_freq, fft_freq, freqs, peak_indx)
  
  return(list(sample_freq = fft_freq, pos_mask = pos_mask, power = fft_power,
              low_filtered_sigs = low_filtered_sigs))
}
```

```{r}
result <- multiscale_fft(new_d$Frequency, 1)
sample_freq <- result$sample_freq
pos_mask <- result$pos_mask
power <- result$power
low_filtered_sigs <- result$low_filtered_sigs
high_filtered_sigs <- result$high_filtered_sigs
```

```{r}
# for (filt in low_filtered_sigs) {
#   plot(new_d$Frequency, type = "l")
#   lines(filt, col = "red")
# }

for (filt in low_filtered_sigs) {
  plot(filt, type = "l")+
  plot(new_d$Frequency, type = "l", col = "red")
}
```

```{r}
library(ggplot2)
# Create a data frame with the new_d$Frequency and low_filtered_sigs values
df <- data.frame(Frequency = rep(new_d$Frequency, length(low_filtered_sigs)),
                 Signal = unlist(low_filtered_sigs),
                 Group = rep(seq_along(low_filtered_sigs), each = length(new_d$Frequency)))
# Plot the data frame using ggplot
ggplot(df, aes(x = Frequency, y = Signal)) +
  geom_line() +
  facet_wrap(~ Group) +
  geom_line(aes(y = sign), col = "red")
```

```{r}
for (filt in low_filtered_sigs) {
plot(filt, type = "l")
}
plot(new_d$Frequency, type = "l", col = "red")

```
