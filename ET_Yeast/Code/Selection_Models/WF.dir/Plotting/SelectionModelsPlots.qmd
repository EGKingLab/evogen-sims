---
title: "Selection Models Plots"
author: "Esdras TUYISHIMIRE"
format: html
editor: visual
---

## Selection models

Here is the list of the parameters considered:

-   Heritability

-   Number of loci

-   Fitness function (First fitness considers the change between phenotype and optimum divided by the scaling factor which is 100. The second function considers the exponent of the distance and scaling factor)

-   Changing generation for Optimum

-   Shift in Optimum based on standard deviations and,

-   The consideration of sinusoidal function for optimum. This also considers unequal generations when shifting the optimum.

## Plots

We're only considering plots with 0.5 heritability and 3 standard deviations and 100 loci. Note that we also run models for 0.5 and 0.8 heritability. Also, we had 1, 10. 70 and 300 loci.

## Constant Selection

#### Allele frequency plots

```{r}
#| echo: false
#| message: false
#| warning: true
#| 
library(tidyverse)
library(stringr)
library(cowplot)
theme_set(theme_cowplot())
# source("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Selection_Models/WF.dir/Plotting/SelectPlots.R")
```

You can add options to executable code like this

```{r}
#| echo: false
# mygenomefiles <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "^genome.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)
```

```{r}
#| echo: false
# for (mygenomefile in mygenomefiles){
#   df <- read.csv(mygenomefile)
#   allele_plots(df, mygenomefile)
# }

mytheme <- function() {
  theme_set(theme_cowplot()) +
    theme(axis.title = element_text(face = "bold"),
          axis.text = element_text(face = "italic"),
          plot.title = element_text(hjust = 0.5),
          legend.position = "none")
  }
```

```{r}
#| echo: false
allele_plots <- function(df, mygenomefile) {
  
  replicate <- str_extract(mygenomefile, "(?<=genome)[0-9]+")
  
  df$replicate <- replicate
  
  Freq_plot <- ggplot(df, aes(x = Generation, y = Frequency, color = as.character(Position))) +
    geom_line(linewidth = 0.5) +
    mytheme() +
    facet_grid(~replicate)
  
  return(list(replicate = replicate, plot = Freq_plot))
}

mygenomefiles <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "^genome.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)

plots_list <- list()

for (mygenomefile in mygenomefiles){
  df <- read.csv(mygenomefile)
  result <- allele_plots(df, mygenomefile)
  replicate <- result$replicate
  plot <- result$plot
  
  if (!is.null(plots_list[[replicate]])) {
    plots_list[[replicate]][[mygenomefile]] <- plot
  } else {
    plots_list[[replicate]] <- list(mygenomefile = plot)
  }
}

for (replicate in names(plots_list)) {
  print(plot_grid(plotlist = plots_list[[replicate]], ncol = 3))  
}
```

```{r}
#| echo: false
# 
# library(tidyverse)
# library(cowplot)
# 
# mytheme <- function() {
#   theme_set(theme_cowplot()) +
#     theme(axis.title = element_text(face = "bold"),
#           axis.text = element_text(face = "italic"),
#           plot.title = element_text(hjust = 0.5),
#           legend.position = "none")
# }
# 
# allele_plots <- function(df, mygenomefile) {
# 
#   # Extract the variable code from the file name using stringr
#   replicate <- str_extract(mygenomefile, "(?<=genome)[0-9]+")
# 
#   # Add the variable code as a column to the data frame
#   df$replicate <- replicate
# 
#   Freq_plot <- ggplot(df, aes(x = Generation, y = Frequency, color = as.character(Position))) +
#     geom_line(linewidth = 0.5) +
#     mytheme() +
#     facet_wrap(~replicate, ncol = 4)
# 
#   return(Freq_plot)
# }
# 
# mygenomefiles <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "^genome.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)
# 
# # Initialize an empty list to store all the plots
# plots_list <- list()
# 
# for (mygenomefile in mygenomefiles){
#   df <- read.csv(mygenomefile)
#   plots_list[[mygenomefile]] <- allele_plots(df, mygenomefile)
# }
# 
# # Use plot_grid to arrange all the plots in a grid
# plot_grid(plotlist = plots_list)  # Adjust ncol as needed
```

#### Phenotype plots

```{r}
#| echo: false
pheno_plots <- function(df, myphenofile) {
  replicate <- str_extract(myphenofile, "(?<=MeanPhenotypes)[0-9]*")
  
  df$replicate <- replicate
  
  pheno_plot <- ggplot(df, aes(x = Generation, y = Phenotype)) +
    geom_line(linewidth = 0.5) +
    mytheme() +
    facet_grid(~replicate)
    #ggtitle(paste0(basename(myphenofile)))
  
  return(list(replicate = replicate, plot = pheno_plot))
}

myphenofiles <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "^MeanPhenotypes.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)

plots_list <- list()

for (myphenofile in myphenofiles){
  df <- read.csv(myphenofile)
  result <- pheno_plots(df, myphenofile)
  replicate <- result$replicate
  plot <- result$plot
  
  if (!is.null(plots_list[[replicate]])) {
    plots_list[[replicate]][[myphenofile]] <- plot
  } else {
    plots_list[[replicate]] <- list(myphenofile = plot)
  }
}

for (replicate in names(plots_list)) {
  print(plot_grid(plotlist = plots_list[[replicate]], ncol = 3))
}
```

#### Spectral density plots

```{r}
#| echo: false
#| 
files <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir//", pattern = "^genome.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)

files_df <- data.frame(file_name = files) %>%
  mutate(myloci_full = str_extract(file_name, "genome\\d+_n\\d+")) %>%
  mutate(myloci = str_remove(myloci_full, "genome\\d+_n"))

files_by_myloci <- split(files_df, files_df$myloci)


fft_fx <- function(files_df){
  all_results <- data.frame()
  
  # Iterate files in the data frame
  for (i in 1:nrow(files_df)) {
    file_name <- files_df$file_name[i]
    myloci <- files_df$myloci[i]

    file <- read.csv(file_name) %>% dplyr::select(-Origin, -Effect)
  
    dat_wide <- pivot_wider(file[,c("Generation","Position","Frequency")], names_from=Position, values_from=Frequency)
    dat_wide[is.na(dat_wide)] <- 0 
    ff1 <- dat_wide[,2:(as.numeric(files_df$myloci[i])+1)]
    
    # Apply spectrum and calculate row means
    ttest <- spectrum(ff1, spans=2, plot=FALSE)
    
    # If ttest$spec is not a matrix, skip this file
    if (!is.matrix(ttest$spec)) {
      next
    }
    
    out.spect <- rowMeans(ttest$spec)
    
    # Prepare data frame for plot
    dd <- data.frame("Frequency" = rep(ttest$freq), 
                     "File" = basename(file_name),
                     "sel" = rep("FS", each = 1000),
                     "spec" = out.spect,
                     "myloci" = myloci)  
    
    # Combine with previous results
    all_results <- rbind(all_results, dd)
  }
  
  # Return the result
  return(all_results)
}

# Apply the function to each group of files and combine the results
all_results <- do.call(rbind, lapply(files_by_myloci, fft_fx))

fft1 <- all_results %>%
  mutate(Frequency= 1/Frequency) %>% 
  filter(Frequency < 40) %>% 
  ggplot(aes(Frequency, spec, color = File)) + 
  geom_line(linewidth=1.1) +
  facet_wrap(~myloci, scales = "free") + 
  theme(legend.position = "none") +
  xlab("Periodicity") +
  ylab("Spectral Density")

fft1
```

## Fluctuating Selection (Linear)

#### Allele frequencies

```{r}
#| echo: false
# 
# source("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Selection_Models/WF.dir/Plotting/SpectralAnalysis.R")
# plot_files(dir_path, pattern, 3)
# 

# allele_plots <- function(df, mygenomefile) {
#   
#   replicate <- str_extract(mygenomefile, "(?<=genome)[0-9]+")
#   
#   df$replicate <- replicate
#   
#   Freq_plot <- ggplot(df, aes(x = Generation, y = Frequency, color = as.character(Position))) +
#     geom_line(linewidth = 0.5) +
#     mytheme() +
#     facet_grid(~replicate)
#   
#   return(list(replicate = replicate, plot = Freq_plot))
# }

mygenomefiles <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir//", pattern = "^genome.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)

plots_list <- list()

for (mygenomefile in mygenomefiles){
  df <- read.csv(mygenomefile)
  result <- allele_plots(df, mygenomefile)
  replicate <- result$replicate
  plot <- result$plot
  
  if (!is.null(plots_list[[replicate]])) {
    plots_list[[replicate]][[mygenomefile]] <- plot
  } else {
    plots_list[[replicate]] <- list(mygenomefile = plot)
  }
}

for (replicate in names(plots_list)) {
  print(plot_grid(plotlist = plots_list[[replicate]], ncol = 3))  
}
```

#### Phenotypes

```{r}
#| echo: false
myphenofiles <- list.files("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/", pattern = "^MeanPhenotypes.*0\\.5SD3Gen20\\.csv$", full.names = TRUE)

# Initialize an empty list to store all the plots
plots_list <- list()

for (myphenofile in myphenofiles){
  df <- read.csv(myphenofile)
  result <- pheno_plots(df, myphenofile)
  replicate <- result$replicate
  plot <- result$plot
  
  if (!is.null(plots_list[[replicate]])) {
    plots_list[[replicate]][[myphenofile]] <- plot
  } else {
    plots_list[[replicate]] <- list(myphenofile = plot)
  }
}

# Use plot_grid to arrange all the plots in a grid for each replicate
for (replicate in names(plots_list)) {
  print(plot_grid(plotlist = plots_list[[replicate]], ncol = 3))  # Adjust ncol as needed
}
```

#### Spectral Density

```{r}
#| echo: false
source("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Selection_Models/WF.dir/Plotting/SpectralAnalysis.R")

dir_path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/"
pattern = "^genome.*0\\.5SD3Gen20\\.csv$"
spectrum_span = 2

all_results <- fft_fx(dir_path, pattern, spectrum_span)

fft1 <- all_results %>%
  mutate(Frequency= 1/Frequency) %>% 
  filter(Frequency < 40) %>% 
  ggplot(aes(Frequency, spec, color = File)) + 
  geom_line(linewidth=1.1) +
  facet_wrap(~myloci, scales = "free") + 
  theme(legend.position = "none") +
  xlab("Periodicity") +
  ylab("Spectral Density")

fft1

```

## Fluctuating Selection (Sinusoidal)

#### Allele frequencies

```{r}
#| echo: false
source("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Selection_Models/WF.dir/Plotting/SpectralAnalysis.R")

dir_path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern = "^genome.*0\\.5SD3Gen20\\.csv$"

plot_files(dir_path, pattern, 3)

```

```{r}
#| echo: false
source("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Selection_Models/WF.dir/Plotting/SpectralAnalysis.R")
dir_path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern = "^MeanPhenotypes.*0\\.5SD3Gen20\\.csv$"

pheno_files(dir_path, pattern, 3)
```

```{r}
#| echo: false
source("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Selection_Models/WF.dir/Plotting/SpectralAnalysis.R")

dir_path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern = "^genome.*0\\.5SD3Gen20\\.csv$"
spectrum_span = 2

all_results <- fft_fx(dir_path, pattern, spectrum_span)

fft1 <- all_results %>%
  mutate(Frequency= 1/Frequency) %>% 
  filter(Frequency < 40) %>% 
  ggplot(aes(Frequency, spec, color = File)) + 
  geom_line(linewidth=1.1) +
  facet_wrap(~myloci, scales = "free") + 
  theme(legend.position = "none") +
  xlab("Periodicity") +
  ylab("Spectral Density")

fft1
```
