initialize() {
	// Set seed and SLiM options
	setSeed(seed);
	initializeSLiMOptions(keepPedigrees=T);
	
	// Define constants and mutation types
	
	initializeSex("A");
	initializeMutationRate(0);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	// Define script for QTLs and initialize genomic element types
	scriptForQTLs = "rexp(1);";
	initializeMutationType("m2", 0.5, "s", scriptForQTLs);
	initializeGenomicElementType("g2", m2, 1.0);
	
	defineConstant("nloci", loci);
	defineConstant("nneutral", region);
	pos = 0;
	q = NULL;
	
	for (locus in 1:nloci){
		initializeGenomicElement(g1, pos, pos + nneutral - 1);
		pos = pos + nneutral;
		initializeGenomicElement(g2, pos, pos);
		q = c(q, pos);
		pos = pos + 1;
		initializeGenomicElement(g1, pos, pos + nneutral - 1);
		pos = pos + nneutral;
	}
	// Define Q and recombination rate
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "l";
	defineConstant("Q", q);
	initializeRecombinationRate(1e-8);
	
	// Set colors for mutation types
	m1.color = "blue";
	m2.color = "red";
}

// Initial generation
1 late() {
	// Add a subpopulation for individuals that will be used for selecting QTLs
	sim.addSubpop("p2", 2);
	// Add a mutation of type m2 to the first genome in subpopulation p2
	g = p2.genomes[0];
	muts = g.addNewMutation(m2, rexp(loci), Q);
	// Add a subpopulation of individuals that will be used for the main simulation
	sim.addSubpop("p1", 10000);
	// Assign each individual in p1 a probability of carrying the QTL mutation based on a random marker
	markers = runif(loci,0,1);
	ind = 0;
	for (position in Q){
		for (g in p1.genomes){
			if(rbinom(1,1, markers[ind]) == 1){g.addMutations(muts[ind]);}
		}
		ind = ind + 1;
	}
	// Set the size of the selecting population to 0
	p2.setSubpopulationSize(0);
	// Set the sex ratio of the main population to 0.5
	p1.setSexRatio(0.5);
	// Set the cloning rate of the main population to 0
	p1.setCloningRate(0);
	// Set the selfing rate of the main population to 0
	p1.setSelfingRate(0);
	
	// Create FSV file for genome data and mean phenotype data
	writeFile(paste0("../../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome",repl,"_","n",loci,"_H",h,"SD",SD,"Gen",gen,".csv"), paste0("Generation,Position,Frequency,Effect,Origin"));
	writeFile(paste0("../../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes",repl,"_","n",loci,"_H",h,"SD",SD,"Gen",gen,".csv"), paste0("Generation,meanFitness,Phenotype,Optimum"));
}

// Function to calculate mutation effect
mutationEffect(m2) {
	return 1.0;
}

// Late generations
// Define the heritability constant h2 and get the sum of all additive mutations
1 late() {
	defineConstant("h2", h);
	defineConstant("stdv", SD);
	defineConstant("gener", gen);
	defineConstant("ranges", rang);
	inds = sim.subpopulations.individuals;
	additive = inds.sumOfMutationsOfType(m2);
	
	// Calculate the genetic variance and define the environmental variance
	V_A = sd(additive)^2;
	defineConstant("V_E",(V_A - h2 * V_A) / h2);
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	
	// Calculate the phenotypes by adding the genetic and environmental components
	phenotypes = additive + env;
	//phenotypes = (phenotypes/sd(phenotypes))+100;
	
	phenotypes = ((phenotypes - (nloci/2))/sd(phenotypes)) + 100;
	
	scaleFactor = mean(phenotypes);
	defineConstant("scaling", scaleFactor);
	
	// Define the lower and upper bounds of the optimal phenotype and define a global variable newopt
	lower_opt = mean(phenotypes) - sd(phenotypes)*stdv;
	upper_opt = mean(phenotypes) + sd(phenotypes)*stdv;
	nopt = rep(c(rep(lower_opt,gener),rep(upper_opt,gener)), ranges);
	
	defineGlobal("newopt", nopt);
	
	//inds.fitnessScaling = exp(-(3/(scaling)) * (phenotypes - newopt[sim.cycle])^2);
	
	
	//mean_fitness =sum(ind.fitness(for(ind in inds))) / len(inds)
	mean_fitness = mean(inds.fitnessScaling);
	
	// Add the phenotypes as a tag to the individuals
	inds.tagF = phenotypes;
	
	// Get the mutation information and order them by frequency
	qtls = sim.mutationsOfType(m2);
	freq = sim.mutationFrequencies(NULL, qtls);
	selCoef = qtls.selectionCoeff;
	posit = qtls.position;
	origin = qtls.originTick;
	//q_a = 1 - freq;	
	//het = 2*q_a*freq;
	indices = order(freq, F);
	
	/*
	for (i in indices)
		
		writeFile(paste0("../../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome",repl,"_","n",loci,"_H",h,"SD",SD,"Gen",gen,".csv"), paste0(sim.cycle,",", posit[i], ",", format("%.6f",freq[i]), ",", format("%.6f",selCoef[i]),",", origin[i]), append = T);
	
	// Calculate mean phenotype for the population
	meanPhenotype = mean(phenotypes);
	
	// Output information about mean phenotype and mean fitness to a FSV file (MeanPhenotypes_singl.csv)
	writeFile(paste0("../../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes",repl,"_","n",loci,"_H",h,"SD",SD,"Gen",gen,".csv"), paste0(sim.cycle,",", mean_fitness,",",format("%.6f", meanPhenotype),",", newopt[sim.cycle]), append=T);
*/

}

// Implement the selection process for generations 2 to 2000

1:2000 late(){
	// Get individuals in the population
	inds = sim.subpopulations.individuals;
	
	// Calculate additive genetic values for each individual based on the sum of their m2 mutations
	additive = inds.sumOfMutationsOfType(m2);
	
	// Calculate environmental values for each individual using a normal distribution with mean 0 and variance V_E
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	
	// Calculate phenotype values for each individual as the sum of their additive genetic and environmental values
	phenotypes = additive + env;
	//phenotypes = (phenotypes/sd(phenotypes))+100;
	
	
	phenotypes = ((phenotypes - (nloci/2))/sd(phenotypes)) + 100;
	
	//inds.fitnessScaling = exp(-(1/(phenotypes)) * (phenotypes - newopt[sim.cycle])^2);
	inds.fitnessScaling = exp(-(3/scaling) * (phenotypes - newopt[sim.cycle])^2);
	
	// Get the mean fitness and phenotype and write them to a FSV file
	
	//mean_fitness =sum(ind.fitness(for(ind in inds))) / len(inds)
	mean_fitness = mean(inds.fitnessScaling);
	
	// Add the phenotypes as a tag to the individuals
	inds.tagF = phenotypes;
	
	// Get information about all mutations of type m2
	qtls = sim.mutationsOfType(m2);
	freq = sim.mutationFrequencies(NULL, qtls);
	selCoef = qtls.selectionCoeff;
	posit = qtls.position;
	origin = qtls.originTick;
	
	// Calculate heterozygosity for each individual's genome
	//het = 2*q_a*freq;
	//het = calcHeterozygosity(p1.genomes);
	
	// Order mutations by frequency (descending) and output information for each mutation to a FSV file (genome_singl.csv)
	indices = order(freq, F);
	for (i in indices)
		
		// q_a = 1 - freq[i];
		// het = 2*q_a*freq[i];
		
		writeFile(paste0("../../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome",repl,"_","n",loci,"_H",h,"SD",SD,"Gen",gen,".csv"), paste0(sim.cycle,",", posit[i], ",", format("%.6f",freq[i]), ",", format("%.6f",selCoef[i]),",", origin[i]), append = T);
	
	// Calculate mean phenotype for the population
	meanPhenotype = mean(phenotypes);
	
	// Output information about mean phenotype and mean fitness to a FSV file (MeanPhenotypes_singl.csv)
	writeFile(paste0("../../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes",repl,"_","n",loci,"_H",h,"SD",SD,"Gen",gen,".csv"), paste0(sim.cycle,",", mean_fitness,",",format("%.6f", meanPhenotype),",", newopt[sim.cycle]), append=T);
}

2001 late(){
	sim.outputFixedMutations();
}

