---
title: "CSCP_QTL_Plots"
author: "Esdras T."
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
library(ggforce)
library(caret)
library(here)
library(patchwork)
theme_set(theme_cowplot())
```

## Notes

This documents provides the plots for genetic simulation in consideration with different QTL numbers, while selection and population size are constnat

```{r, echo=FALSE}
myGfile <- read.csv("../../../output.dir/Selection_Models/genome1_70_0.5.csv")
myPfile <- read.csv("../../../output.dir/Selection_Models/MeanPhenotypes1_70_0.5.csv")
```

### Genomic Plots


```{r, echo=FALSE, include=FALSE}

myGfile %>% ggplot(aes(x = Generation, y = Frequency, color = as.character(Position)))+
  geom_line()+
  theme(legend.position = "none")+
  facet_zoom(x = Generation > 850 & Generation < 1500)

myGfile %>% ggplot(aes(Effect))+
  geom_density()
  theme(legend.position = "none")
  
myGfile %>% ggplot(aes(Heterozygosity))+
  geom_density()
  theme(legend.position = "none")
  
myGfile %>% ggplot(aes(Frequency))+
  geom_density(bins = 1000)
  theme(legend.position = "none")

  myfreq <- myGfile %>% group_by(Frequency, Generation) %>% count(Frequency)
  myfreqfix <- myfreq %>% rename(Counts = n) %>% filter(Frequency %in% c(0,1))
  myfreq %>% ggplot(aes(x = n, y = Frequency))+
  geom_point()+
  theme(legend.position = "none")
  
```

```{r, include=FALSE}
# The code here is for plotting frequencies with 25 intervals and zooming in some area

#ggplot()+geom_rect(data = rectgl, aes(xmin = x, xmax = y, ymin = -Inf, ymax = 1), fill = "gray")+
#    geom_line(data = myGfile, aes(x = Generation, y = Frequency, color = as.character(Position)))+
#    theme(legend.position = "none")+
#    facet_zoom(x = Generation > 850 & Generation < 1500)
```

### Phenotype related Plots

```{r, echo=FALSE, include=FALSE}

x = seq(1, 2000, 50)
y = seq(from  = 26, to = 2025, by = 50)
rectgl = tibble(x,y)
# geom_rect(data = rectgl, aes(xmin = x, xmax = y, ymin = 100, ymax = Inf), fill = "gray")+


ggplot()+
 # geom_rect(data = rectgl, aes(xmin = x, xmax = y, ymin = 100, ymax = Inf), fill = "gray")+
  geom_line(data = myPfile, (aes(x = Generation, y = Phenotype)), color = "red")+
  facet_zoom(x = Generation > 355 & Generation < 510)

myPfile %>% ggplot(aes(x = Generation, y = meanFitness))+
  geom_line()+
  geom_vline(xintercept = 1000, color = "red")

 myPfile %>% ggplot(aes(x = Phenotype, y = meanFitness))+
  geom_point()

myPfile %>% ggplot(aes(x = Phenotype))+
  geom_histogram(bins = 200)

myPfile %>% ggplot(aes(x = meanFitness))+
  geom_density()

```

## Designing a function that reads all plots at the same time

```{r, echo=FALSE, include=FALSE}

source("../../../Code/Plotting/CSCP_QTL.dir/usetheme.R")

myQTL.plot <- function(file1, file2, name){

  myGfile <- read.csv(file1)

  myPfile <- read.csv(file2)
  name <- name

  FreqPlot <- myGfile %>% ggplot(aes(x = Generation, y = Frequency, color = as.character(Position)))+
    geom_line()+
    facet_zoom(x = Generation > 850 & Generation < 1500)+
    ggtitle(paste(name, "Generation vs Frequency"))+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

  EffectDens <- myGfile %>% ggplot(aes(Effect))+
    geom_density()+
    theme(legend.position = "none")+
    ggtitle(paste(name, "Effect Density"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  FreqDens <- myGfile %>% ggplot(aes(Frequency))+
  geom_density()+
  theme(legend.position = "none")+
    ggtitle(paste(name, "Allele Frequency Density"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")


  PhenoGen <- ggplot()+
  geom_rect(data = rectgl, aes(xmin = x, xmax = y, ymin = 100, ymax = Inf), fill = "gray")+
  geom_line(data = myPfile, (aes(x = Generation, y = Phenotype)), color = "red")+
  facet_zoom(x = Generation > 355 & Generation < 510)+
    ggtitle(paste(name, "Generation vs Phenotype"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

  FitGen <- myPfile %>% ggplot(aes(x = Generation, y = meanFitness))+
    geom_line()+
    geom_vline(xintercept = 1000, color = "red")+
    ggtitle(paste(name, "Generation vs Fitness"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")


  PhenoDens <- myPfile %>% ggplot(aes(x = Phenotype))+
    geom_histogram(bins = 200)+
    ggtitle(paste(name, "Phenotype Histogram"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

  FitDens <- myPfile %>% ggplot(aes(x = meanFitness))+
    geom_density()+
    ggtitle(paste(name, "Fitness Density"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

  Pheno_Fit <- plot_grid(PhenoGen, FitGen, PhenoDens, FitDens)
  Freq_Effect <- wrap_plots(FreqDens, EffectDens)
  
  return(list(Pheno_Fit, Freq_Effect, FreqPlot))
}

```

### Implementig our Function

#### Plots for 100 QTL 

##### Fist replicate
```{r, echo = FALSE}
# "../../../output.dir/Selection_Models/genome1_70_0.5.csv"
# "../../../output.dir/Selection_Models/MeanPhenotypes1_70_0.5.csv"

myQTL.plot("../../../output.dir/Selection_Models/genome1_100_0.5.csv", "../../../output.dir/Selection_Models/MeanPhenotypes1_100_0.5.csv", "QT7.1")

```


##### Second replicate

```{r, echo = FALSE}
myQTL.plot("../../../output.dir/Selection_Models/genome2_100_0.5.csv", "../../../output.dir/Selection_Models/MeanPhenotypes2_100_0.5.csv", "QT7.2")
```

##### 3rd replicate

```{r, echo = FALSE}
myQTL.plot("../../../output.dir/Selection_Models/genome3_100_0.5.csv", "../../../output.dir/Selection_Models/MeanPhenotypes3_100_0.5.csv", "QT7.3")
```


##### 4th replicate

```{r, echo = FALSE}
myQTL.plot("../../../output.dir/Selection_Models/genome4_100_0.5.csv", "../../../output.dir/Selection_Models/MeanPhenotypes4_100_0.5.csv", "QT7.4")
```


##### 5th replicate

```{r, echo = FALSE}
myQTL.plot("../../../output.dir/Selection_Models/genome5_100_0.5.csv", "../../../output.dir/Selection_Models/MeanPhenotypes5_100_0.5.csv", "QT7.5")
```


```{r}

```
