---
title: "Geno_Plots_CSCP"
author: "Ezra T"
format: html
editor: visual
---

## Plotting Allele Frequency and Phenotype Information

This file takes all genome files for every replicate given the number of QTL positions(e.g if 1 qtl or 100 qtls).

**Packages**

```{r}
library(tidyverse)
library(cowplot)
library(ggforce)
library(purrr)
library(caret)
library(here)
library(patchwork)
theme_set(theme_cowplot())
#setwd("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Plotting/test.dir/")
```

## Allele Frequency and Effect Plots

`# Get list of CSV files in directory`

`mygenomefiles <- list.files(pattern = "\\.csv$")`

```{r}
#| echo: false
my_plots <- function(df, mygenomefile, mypath){
  
  #source("../../../Code/Plotting/CSCP_QTL.dir/usetheme.R")
  
  Freq_plot <- 
    ggplot(df, aes(x = Generation, y = Frequency, color = as.character(Position)))+
    geom_line(linewidth = 0.2)+
    labs(title = "Gen vs Freq")+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
   
  
  Effect_plot <- ggplot(df, aes(Effect))+
    geom_density()+
    labs(title = "QTL Effect Density")+ 
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  ggsave(file.path(mypath, paste0(basename(mygenomefile), "Freq_plot.png")), Freq_plot, width = 6, height = 4, dpi = 300)
  ggsave(file.path(mypath, paste0(basename(mygenomefile), "Effect_plot.png")), Effect_plot, width = 6, height = 4, dpi = 300)
}

mypath <- "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/plots.dir/CSCP_Plots.dir"
mygenomefiles <- list.files(path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/", pattern = "^genome.*\\.csv$", full.names = TRUE)

dfs <- map(mygenomefiles, read.csv)
walk2(dfs, mygenomefiles, my_plots, mypath)

```

## Phenotype, and Fitness Plots

```{r}
mon_plots <- function(data, myphenofile, mypath){
  
  #source("../../../Code/Plotting/CSCP_QTL.dir/usetheme.R")
  
  pheno_plot <- 
    ggplot(data, aes(x = Generation, y = Phenotype))+
    geom_line()+
    labs(title = "Pheno vs Gen")+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
   
  
  Fitness_plot <- ggplot(data, aes(x = Generation, y = meanFitness))+
    geom_line()+
    labs(title = "Pheno vs Gen")+ 
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  PhenoDens <- ggplot(data, aes(x = Phenotype))+
    geom_histogram(bins = 200)+
    ggtitle(paste("Phenotype Histogram"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  FitDens <- ggplot(data, aes(x = meanFitness))+
    geom_density()+
    ggtitle(paste("Fitness Density"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  Pheno_Fit <- plot_grid(pheno_plot, Fitness_plot, PhenoDens, FitDens)
  
  ggsave(file.path(mypath, paste0(basename(myphenofile), "Pheno_plots.png")), Pheno_Fit, width = 6, height = 4, dpi = 300)
 
}
mypath <- "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/plots.dir/CSCP_Plots.dir"
myphenofiles <- list.files(path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/", pattern = "^MeanPhenotypes.*\\.csv$", full.names = TRUE)

dfs <- map(myphenofiles, read.csv)
walk2(dfs, myphenofiles, mon_plots, mypath = mypath)
```

    `fklist=list.files(c(path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/", pattern = "^MeanPhenotypes.*\\.csv$"))`


    `#myphenofiles <- c("../../../output.dir/Selection_Models/MeanPhenotypes1_1_0.5.csv", "../../../output.dir/Selection_Models/MeanPhenotypes1_1_0.5.csv")`

## Fourier Transformation

This is to try Fourier transform

```{r}
#geno <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models#/CSFP.1.dir/genomeCSFP_A1_300_0.5.csv")

geno1 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/CSCP.dir/genome1_100_0.5.csv")
geno2 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/FSFP_4sd_1.dir/genomeFSFP4sd_A1_300_0.5.csv")

ft_geno1 <- geno1 %>% 
  group_by(Position) %>% 
  mutate(FFT_PowerDensity = abs((fft(Frequency)^2)/2000)*2.5e-4,
         Freq =  0:(n_distinct(Position)-1)/2000) %>% 
  select(Generation, Position, Frequency, FFT_PowerDensity, Freq) 

i11 <- ggplot(geno1, aes(x = Generation, y = Frequency, color = as.character(Position)))+
  geom_line(linewidth = 0.2)+
  labs(title = "Gen vs Freq")+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

i12 <- ggplot(geno2, aes(x = Generation, y = Frequency, color = as.character(Position)))+
  geom_line(linewidth = 0.2)+
  labs(title = "Gen vs Freq")+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

i11 
  i12 

i2 <- ggplot(ft_geno, aes(x = Generation, y = FFT_PowerDensity, color = as.character(Position)))+
  geom_line(linewidth = 0.2)+
  labs(title = "Gen vs Freq")+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

i1 | i2

```

```{r}
set.seed(56778)
r <- sample(rep(seq(1:4), each = 5))
y <- rnorm(20)
x <- rep(1:5, each = 4) %>% sample()
z <- tibble(r, x, y) %>% mutate(x = factor(x))
z_wide <- z %>% group_by(r) %>% spread(key = x, value = y)

```

```{r}
z %>% filter(x==1) %>% fft(y)

```

```{r}
library(dplyr)
library(tidyr)
library(purrr)

set.seed(56778)
y <- rnorm(20)
x <- rep(1:5, each = 4) %>% sample()
z <- tibble(x, y)

t <- z %>% 
  group_by(x) %>% 
  mutate(fourier_transform = Mod(fft(y)))

t %>% ggplot(aes(x,y))+
  geom_line()

ggplot()+
  geom_line(data = t, aes(x,y), color = "red")+
  geom_line(data = t, aes(x,fourier_transform), color = "blue", linetype = "dotdash")

```

```{r}
geno2 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/FSFP_4sd_1.dir/genomeFSFP4sd_A1_300_0.5.csv")

dirt <- geno2 %>% select(Generation, Position, Frequency) %>% group_by(Generation) %>% spread(key = Position, value = Frequency) #%>% filter(Generation != 1)

View(dirt)

dirt_ft <- dirt[-1]
fttr <- abs(apply(dirt_ft, 2, fft))
pow_fr <- apply(fttr, 2, Mod)

pow_frr <-pow_fr/2000

pow_frm <- cbind(dirt[1], as_tibble(pow_frr))

View(pow_frm)

pow_fr_long <- pow_frm %>% pivot_longer(-1, names_to = "Position", values_to = "Power")

pow_fr_long %>% filter(Power < 0.05 & Position == 18301) %>% ggplot(aes(x = Generation, y = Power, color = factor(Position)))+
  geom_line()+
  theme(legend.position = "none")


pow_fro <- pow_fr %>% as.matrix(pow_fr)
df_long <- gather(pow_fr, key = "variable", value = "value")
```

```{r}
ty <- geno2 %>% group_by(Generation) %>% select( Frequency, Generation)

pow_frm= as_tibble(pow_fr[-1,])

pow_frm %>% ggplot(aes(`42710`))+
  geom_density()

plot(pow_frm$pow_fr)
```

```{python}

# import pandas and numpy modules
import pandas as pd
import numpy as np

# read csv file using pandas
geno2 = pd.read_csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/FSFP_4sd_1.dir/genomeFSFP4sd_A1_300_0.5.csv")

# select columns and reshape data using pandas
dirt = geno2[["Generation", "Position", "Frequency"]].pivot(index="Generation", columns="Position", values="Frequency").drop(1)

# view dirt using pandas
print(dirt)

# get dirt values as a numpy array
dirt_ft = dirt.values

# apply fft to each column using numpy
fttr = np.abs(np.fft.fft(dirt_ft, axis=0))

# get the power spectrum using numpy
pow_fr = np.abs(fttr)


```
