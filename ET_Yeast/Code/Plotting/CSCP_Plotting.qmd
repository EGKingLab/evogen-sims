---
title: "Geno_Plots_CSCP"
author: "Ezra T"
format: html
editor: visual
---

## Plotting Allele Frequency and Phenotype Information

This file takes all genome files for every replicate given the number of QTL positions(e.g if 1 qtl or 100 qtls).

**Packages**

```{r}
library(tidyverse)
library(pracma)
library(cowplot)
library(ggforce)
library(purrr)
library(caret)
library(here)
library(patchwork)
theme_set(theme_cowplot())
#setwd("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/Code/Plotting/test.dir/")
```

## Allele Frequency and Effect Plots

`# Get list of CSV files in directory`

`mygenomefiles <- list.files(pattern = "\\.csv$")`

```{r}
#| echo: false
my_plots <- function(df, mygenomefile, mypath){
  
  #source("../../../Code/Plotting/CSCP_QTL.dir/usetheme.R")
  
  Freq_plot <- 
    ggplot(df, aes(x = Generation, y = Frequency, color = as.character(Position)))+
    geom_line(linewidth = 0.2)+
    labs(title = "Gen vs Freq")+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
   
  
  Effect_plot <- ggplot(df, aes(Effect))+
    geom_density()+
    labs(title = "QTL Effect Density")+ 
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  ggsave(file.path(mypath, paste0(basename(mygenomefile), "Freq_plot.png")), Freq_plot, width = 6, height = 4, dpi = 300)
  ggsave(file.path(mypath, paste0(basename(mygenomefile), "Effect_plot.png")), Effect_plot, width = 6, height = 4, dpi = 300)
}

mypath <- "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/plots.dir/CSCP_Plots.dir"
mygenomefiles <- list.files(path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/", pattern = "^genome.*\\.csv$", full.names = TRUE)

dfs <- map(mygenomefiles, read.csv)
walk2(dfs, mygenomefiles, my_plots, mypath)

```

## Phenotype, and Fitness Plots

```{r}
mon_plots <- function(data, myphenofile, mypath){
  
  #source("../../../Code/Plotting/CSCP_QTL.dir/usetheme.R")
  
  pheno_plot <- 
    ggplot(data, aes(x = Generation, y = Phenotype))+
    geom_line()+
    labs(title = "Pheno vs Gen")+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
   
  
  Fitness_plot <- ggplot(data, aes(x = Generation, y = meanFitness))+
    geom_line()+
    labs(title = "Pheno vs Gen")+ 
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  PhenoDens <- ggplot(data, aes(x = Phenotype))+
    geom_histogram(bins = 200)+
    ggtitle(paste("Phenotype Histogram"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  FitDens <- ggplot(data, aes(x = meanFitness))+
    geom_density()+
    ggtitle(paste("Fitness Density"))+
    theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
  
  Pheno_Fit <- plot_grid(pheno_plot, Fitness_plot, PhenoDens, FitDens)
  
  ggsave(file.path(mypath, paste0(basename(myphenofile), "Pheno_plots.png")), Pheno_Fit, width = 6, height = 4, dpi = 300)
 
}
mypath <- "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/plots.dir/CSCP_Plots.dir"
myphenofiles <- list.files(path = "/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/", pattern = "^MeanPhenotypes.*\\.csv$", full.names = TRUE)

dfs <- map(myphenofiles, read.csv)
walk2(dfs, myphenofiles, mon_plots, mypath = mypath)
```

## Fourier Transformation

This is to try Fourier transform

```{r}
#geno <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models#/CSFP.1.dir/genomeCSFP_A1_300_0.5.csv")

geno1 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/genome1_100_0.5.csv") #%>% filter(Position == 1006747)
geno2 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/FSFP_2sd_1.dir/genomeFSFP2sd_A1_100_0.5.csv")


ft_geno <- geno2 %>%
  group_by(Position) %>%
  mutate(FFT_PowerDensity = abs(fft(Frequency)),
         FFT_Freq = spectrum(Frequency)$freq[1:n_distinct(Generation)]) %>%
  mutate(FFT_PowerDensity = case_when(FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
         TRUE~ FFT_PowerDensity),
         FFT_back = Re(fft(FFT_PowerDensity, inverse = TRUE))/length(Frequency))

View(ft_geno)

ft_geno %>% ggplot(aes(Generation, FFT_back, color = factor(Position)))+
  geom_line()+
  theme(legend.position = "none")


```

```{r}
# geno2 = read.csv("genome.csv")
# ft_geno1 <- geno2 %>%
#   group_by(Position, Generation) %>% summarise(Mu_Freq = mean(Frequency))
# 
# Positions = unique(ft_geno1$Position)
# for(QTL in Position){
#   FFT_Power = abs(fft(ft_geno1$Mu_Freq))
#   FFT_Freq = spectrum(ft_geno1$Mu_Freq)$freq
#   FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Frequency)
#   Position = QTL
#   Generation = ft_geno1$Generation
#   Newd[[QTL]] = cbind(Position,Generation,FFT_Power,FFT_Freq, FFT_back) %>%
#   mutate(FFT_PoweR = case_when(FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
#          TRUE~ FFT_Power),
#          FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Frequency))
# }



# create an empty list to store results
Newdata_geno <- list()

# loop over positions
Positions = unique(geno2$Position)
for(QTL in Positions){
  # filter data by position
  geno2_pos <- geno2 %>%
    filter(Position == QTL)
  
  # group by generation and calculate mean frequency
  ft_geno1 <- geno2_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  # convert Mu_Freq column to numeric
  Mu_Freq_num <- as.numeric(ft_geno1$Mu_Freq)
  
  # apply fft() and spectrum() functions
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = spectrum(Mu_Freq_num)$freq[seq_len(length(Mu_Freq_num))]
  FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  # create a data frame with results
  Newdata_geno[[QTL]] <- data.frame(
    Position = QTL,
    Generation = ft_geno1$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
}

```

```{r}

fft_fun <- function(data, pos){
  data_pos <- data %>%
    filter(Position == pos)
  
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = spectrum(Mu_Freq_num)$freq[seq_len(length(Mu_Freq_num))]
  FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  mydf <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
  
  return(mydf)
}

```

```{r}

Newd <- list()

Positions = unique(geno2$Position)

for(QTL in Positions){
  Newd[[QTL]] <- fft_fun(geno2, QTL)
}

```

```{r}

library(ggplot2)

Newd_df <- do.call(rbind, Newd)

ggplot(Newd_df, aes(x = Generation, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "Generation", y = "Frequency", color = "Position") +
  theme(legend.position = "none") 

ggplot(Newd_df, aes(x = FFT_Power, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none")

```

```{r}
# load ggplot2 package
library(ggplot2)

# combine the results from the list into one data frame
Newd_df <- do.call(rbind, Newd)

# make a line plot of FFT_power and FFT_back using Newd_df
ggplot(Newd_df, aes(x = FFT_Power, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none") # remove legend

# group by position and calculate the approximate maximum FFT_back
Newd_df_max <- Newd_df %>%
  group_by(Position) %>%
  summarise(Max_FFT_back = max(FFT_back))

# join the maximum FFT_back with the original data frame
Newd_df_joined <- left_join(Newd_df, Newd_df_max, by = "Position")

# add a vertical line at the approximate maximum FFT_back for each position
ggplot(Newd_df_joined, aes(x = FFT_Power, y = FFT_back, color = factor(Position))) +
  geom_line() +
  geom_vline(aes(xintercept = Max_FFT_back), linetype = "dashed") +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none") # remove legend


```

```{r}
# load ggplot2 package
library(ggplot2)

Newd_df <- do.call(rbind, Newd)

Newd_df_filtered <- Newd_df %>%
  filter(FFT_Power == 125)

Newd_df_max <- Newd_df_filtered %>%
  group_by(Position) %>%
  summarise(Max_FFT_back = max(FFT_back))

Newd_df_joined <- left_join(Newd_df, Newd_df_max, by = "Position")

ggplot(Newd_df_joined, aes(x = FFT_Power, y = FFT_back, color = factor(Position))) +
  geom_line() +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none") 

ggplot(Newd_df_joined, aes(x = FFT_Power, y = FFT_back, color = factor(Position))) +
  geom_line() +
  geom_vline(aes(xintercept = 125), linetype = "dashed") +
  labs(x = "FFT_Power", y = "FFT_back", color = "Position") +
  theme(legend.position = "none")

```

\#######################

This includes Post Processing of FFT

```{r}
# load packages
library(zoo)
library(wavelets)

# define a function that takes a data frame and a position as arguments
fft_fun <- function(data, pos){
  # filter data by position
  data_pos <- data %>%
    filter(Position == pos)
  
  # group by generation and calculate mean frequency
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  # convert Mu_Freq column to numeric
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  
  # apply fft() and spectrum() functions
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = spectrum(Mu_Freq_num)$freq[seq_len(length(Mu_Freq_num))]
  FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  # create a data frame with results
  result <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
  
  # return the result
  return(result)
}


# create an empty list to store results
Newd <- list()

# loop over positions
Positions = unique(geno2$Position)
for(QTL in Positions){
  # apply the function to each position and store the result in the list
  Newd[[QTL]] <- fft_fun(geno2, QTL)
}

# combine the results from the list into one data frame
Newd_df <- do.call(rbind, Newd)

# perform a Box-Cox transformation to stabilize the variance of FFT_back
Newd_df$FFT_back_transformed <- boxcox(Newd_df$FFT_back, plotit = FALSE)

# estimate the spectral density of FFT_back using the periodogram method
Newd_df_spec <- spec.pgram(Newd_df$FFT_back_transformed, taper = 0.1, log = "no")

# plot the spectral density
plot(Newd_df_spec)

# identify the dominant frequencies or periodicities of FFT_back
Newd_df_peaks <- Newd_df_spec$freq[which(diff(sign(diff(Newd_df_spec$spec)))==-2)+1]
Newd_df_periods <- 1/Newd_df_peaks

# print the dominant frequencies or periodicities of FFT_back
cat("The dominant frequencies of FFT_back are:", Newd_df_peaks, "\n")
cat("The corresponding periods of FFT_back are:", Newd_df_periods, "\n")

```

### 

\##################

NEW vibes of Post Processing

```{r}
# load packages
library(zoo)
library(wavelets)
library(dplyr)
library(MASS)

# define a function that takes a data frame and a position as arguments
fft_fun <- function(data, pos){
  # filter data by position
  data_pos <- data %>%
    filter(Position == pos)
  
  # group by generation and calculate mean frequency
  ft_data <- data_pos %>%
    group_by(Generation) %>%
    summarise(Mu_Freq = mean(Frequency))
  
  # convert Mu_Freq column to numeric
  Mu_Freq_num <- as.numeric(ft_data$Mu_Freq)
  
  # apply fft() and spectrum() functions
  FFT_Power = abs(fft(Mu_Freq_num))
  FFT_Freq = spectrum(Mu_Freq_num)$freq[seq_len(length(Mu_Freq_num))]
  FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num)
  
  # create a data frame with results
  result <- data.frame(
    Position = pos,
    Generation = ft_data$Generation,
    FFT_Power = FFT_Power,
    FFT_Freq = FFT_Freq,
    FFT_back = FFT_back
  ) %>%
    mutate(FFT_Power = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_Power
    ),
    FFT_back = Re(fft(FFT_Power, inverse = TRUE))/length(Mu_Freq_num))
  
  # return the result
  return(result)
}


# create an empty list to store results
Newd <- list()

# loop over positions
Positions = unique(geno2$Position)
for(QTL in Positions){
  # apply the function to each position and store the result in the list
  Newd[[QTL]] <- fft_fun(geno2, QTL)
}

# combine the results from the list into one data frame
Newd_df <- do.call(rbind, Newd)

# perform a Box-Cox transformation to stabilize the variance of FFT_back
#Newd_df$FFT_back_transformed <- boxcox(Newd_df$FFT_back, plotit = FALSE, lambda = 0)$y

# replace negative values with NA
Newd_df$FFT_back[Newd_df$FFT_back < 0] <- NA

# remove rows with NA
Newd_df <- na.omit(Newd_df)

# perform the Box-Cox transformation with lambda = 0
Newd_df$FFT_back_transformed <- boxcox(Newd_df$FFT_back, plotit = FALSE, lambda = 0)$y

# estimate the spectral density of FFT_back using the periodogram method
dt <- 0.1 # change this according to your sampling interval
Newd_df_spec <- spec.pgram(Newd_df$FFT_back_transformed, taper = 0.1, log = "no", spans = 1/dt)

# plot the spectral density
plot(Newd_df_spec)

# identify the dominant frequencies or periodicities of FFT_back
Newd_df_peaks <- Newd_df_spec$freq[which(diff(sign(diff(Newd_df_spec$spec)))==-2)+1]
Newd_df_periods <- 1/Newd_df_peaks

# print the dominant frequencies or periodicities of FFT_back
cat("The dominant frequencies of FFT_back are:", Newd_df_peaks, "\n")
cat("The corresponding periods of FFT_back are:", Newd_df_periods, "\n")

```

\#########################

```{r}
ft_geno <- geno2 %>%
  group_by(Position) %>%
  mutate(
    Frequency = as.numeric(Frequency), # convert to numeric
    FFT_PowerDensity = abs(fft(Frequency)), # get absolute values
    FFT_Freq = spectrum(Frequency)$freq[seq_len(length(Frequency))], # use seq_len()
    FFT_PowerDensity = case_when(
      FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_PowerDensity
    ),
    FFT_back = Re(fft(FFT_PowerDensity, inverse = TRUE)) / length(Frequency) # use Re() and length()
  )


ft_geno <- geno2 %>%
  group_by(Position) %>%
  mutate(FFT_PowerDensity = abs(fft(Frequency)),
         FFT_Freq = spectrum(Frequency)$freq[1:n_distinct(Generation)]) %>%
  mutate(FFT_PowerDensity = ifelse(FFT_Freq < max(FFT_Freq) - sd(FFT_Freq), 0, FFT_PowerDensity),
         FFT_back = Re(fft(FFT_PowerDensity, inverse = TRUE)) / n_distinct(Generation))

ft_geno <- geno2 %>%
  group_by(Position) %>%
  mutate(
    Frequency = as.numeric(Frequency), # convert to numeric
    FFT_PowerDensity = abs(fft(Frequency)), # get absolute values
    FFT_Freq = spectrum(Frequency)$freq[seq_len(length(Frequency))], # use seq_len()
    FFT_PowerDensity = case_when(
      FFT_Freq < max(FFT_Freq) - 2 * sd(FFT_Freq) ~ 0,
      TRUE ~ FFT_PowerDensity),
    FFT_back = Re(fft(FFT_PowerDensity, inverse = TRUE)) / length(Frequency) 
  )

ft_geno %>% ggplot(aes(FFT_PowerDensity, FFT_back))+
  geom_line()

View(ft_geno)

ft_geno1 <- geno1 %>%
  group_by(Position) %>% 
  mutate(FFT_PowerDensity = abs((fft(Frequency)^2)/2000)*2.5e-4,
         Freq =  (0:n_distinct(Generation) - 1) / n_distinct(Generation)) %>% 
  select(Generation, Position, Frequency, FFT_PowerDensity, Freq)



ft_geno %>% ggplot(aes(FFT_PowerDensity, FFT_back, color = factor(Position)))+
  geom_line()+
  theme(legend.position = "none")

fftfreq <- function(n, d = 1) {
  if (n %% 2 == 0) {
    k <- c(seq(0, n/2 - 1), seq(-n/2, -1))
  } else {
    k <- c(seq(0, (n - 1)/2), seq(-(n - 1)/2, -1))
  }
  return(k / (n * d))
}

# ft_geno2 <- geno1 %>%
#   group_by(Position) %>% 
#   mutate(FFT_PowerDensity = abs((fft(Frequency)^2)/2000)*2.5e-4,
#        Freq = fftfreq(length((1:n_distinct(Generation))))) %>% 
#   select(Generation, Position, Frequency, FFT_PowerDensity, Freq) 

ft_geno2 <- geno1 %>%
  group_by(Position) %>% 
  mutate(FFT_PowerDensity = abs(fft(Frequency)),
       FFT_Freq = fftfreq(length((1:n_distinct(geno1$Generation))))) %>%
  mutate(FFT_PowerDensity = case_when(FFT_Freq < max(FFT_Freq) - sd(FFT_Freq) ~ 0,
                                      TRUE ~ FFT_PowerDensity),
         FFT_back = Re(fft(FFT_PowerDensity, inverse = TRUE))/ n_distinct(geno1$Generation))

View(ft_geno2)

ft_geno2 %>% ggplot(aes(FFT_PowerDensity, FFT_back))+
  geom_line()+
  theme(legend.position = "none")

ft_geno2 %>% ggplot(aes(Generation, FFT_back))+
  geom_line()+
  theme(legend.position = "none")


```

```{r}

i11 <- ggplot(geno1, aes(x = Generation, y = Frequency, color = as.character(Position)))+
  geom_line(linewidth = 0.2)+
  labs(title = "Gen vs Freq")+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

i12 <- ggplot(geno2, aes(x = Generation, y = Frequency, color = as.character(Position)))+
  geom_line(linewidth = 0.2)+
  labs(title = "Gen vs Freq")+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

i11 
  i12 

i2 <- ggplot(ft_geno, aes(x = Generation, y = FFT_PowerDensity, color = as.character(Position)))+
  geom_line(linewidth = 0.2)+
  labs(title = "Gen vs Freq")+
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")

i1 | i2

```

```{r}
ft_geno %>% ggplot(aes(FFT_PowerDensity, FFT_Freq))+
  geom_line()+
  theme(legend.position = "none")

plot(ft_geno$FFT_Freq, type = "l")
```

```{r}
set.seed(56778)
r <- sample(rep(seq(1:4), each = 5))
y <- rnorm(20)
x <- rep(1:5, each = 4) %>% sample()
z <- tibble(r, x, y) %>% mutate(x = factor(x))
z_wide <- z %>% group_by(r) %>% spread(key = x, value = y)

```

```{r}
z %>% filter(x==1) %>% fft(y)

```

```{r}
library(dplyr)
library(tidyr)
library(purrr)

set.seed(56778)
y <- rnorm(20)
x <- rep(1:5, each = 4) %>% sample()
z <- tibble(x, y)

t <- z %>% 
  group_by(x) %>% 
  mutate(fourier_transform = Mod(fft(y)))

t %>% ggplot(aes(x,y))+
  geom_line()

ggplot()+
  geom_line(data = t, aes(x,y), color = "red")+
  geom_line(data = t, aes(x,fourier_transform), color = "blue", linetype = "dotdash")

```

```{r}
geno2 <- read.csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/FSFP_4sd_1.dir/genomeFSFP4sd_A1_300_0.5.csv")

dirt <- geno2 %>% select(Generation, Position, Frequency) %>% group_by(Generation) %>% spread(key = Position, value = Frequency) #%>% filter(Generation != 1)

View(dirt)

dirt_ft <- dirt[-1]
fttr <- abs(apply(dirt_ft, 2, fft))
pow_fr <- apply(fttr, 2, Mod)

pow_frr <-pow_fr/2000

pow_frm <- cbind(dirt[1], as_tibble(pow_frr))

View(pow_frm)

pow_fr_long <- pow_frm %>% pivot_longer(-1, names_to = "Position", values_to = "Power")

pow_fr_long %>% filter(Power < 0.05 & Position == 18301) %>% ggplot(aes(x = Generation, y = Power, color = factor(Position)))+
  geom_line()+
  theme(legend.position = "none")


pow_fro <- pow_fr %>% as.matrix(pow_fr)
df_long <- gather(pow_fr, key = "variable", value = "value")
```

```{r}
ty <- geno2 %>% group_by(Generation) %>% select( Frequency, Generation)

pow_frm= as_tibble(pow_fr[-1,])

pow_frm %>% ggplot(aes(`42710`))+
  geom_density()

plot(pow_frm$pow_fr)
```

```{python}

# import pandas and numpy modules
import pandas as pd
import numpy as np

# read csv file using pandas
geno2 = pd.read_csv("/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Select_Press/FSFP_4sd_1.dir/genomeFSFP4sd_A1_300_0.5.csv")

# select columns and reshape data using pandas
dirt = geno2[["Generation", "Position", "Frequency"]].pivot(index="Generation", columns="Position", values="Frequency").drop(1)

# view dirt using pandas
print(dirt)

# get dirt values as a numpy array
dirt_ft = dirt.values

# apply fft to each column using numpy
fttr = np.abs(np.fft.fft(dirt_ft, axis=0))

# get the power spectrum using numpy
pow_fr = np.abs(fttr)


```

\#########################

```{r}
dataproc <- function(path) {
  n <- 5
  
  read_csv_format <- function() {
    df <- read.csv(path)
    return(df)
  }
  
  pick_random <- function() {
    df <- read_csv_format()
    unique_QTL <- unique(df$Position)
    select_QTLs <- sample(unique_QTL, n)
    df_filter <- df[df$Position %in% select_QTLs, ]
    return(df_filter)
  }
  
  visualize <- function(df) {
    plot_list = list()
    for (position in unique(df$Position)) {
      position_data <- df[df$Position == position, ]
      plot_list[[position]] = lines(position_data$Generation, position_data$Frequency, col=position)
    }
    plot(1, type='n', xlab='', ylab='', xlim=c(0, max(df$Generation)), ylim=c(0, max(df$Frequency)))
    mapply(function(...) {do.call(lines, list(...))}, plot_list)
  }
  
  fft_filter <- function(df, time_step, plot) {
    if (plot) {
      plot_list = list()
      for (position in unique(df$Position)) {
        position_data <- df[df$Position == position, ]
        sign <- position_data$Frequency
        
        fft_sig <- fft(sign)
        power <- abs(fft_sig)
        sample_freq <- fftfreq(length(sign), d=time_step)

        pos_mask = sample_freq > 0.01
        freqs = sample_freq[pos_mask]
        peak_indx = which.max(power[pos_mask])
        peak_freq = freqs[which.max(power[pos_mask])]

        copy_freq_fft = fft_sig
        copy_freq_fft[abs(sample_freq) > 0.05] = 0
        lf_signal = Re(fft(copy_freq_fft, inverse=TRUE))/length(sign)

        if (plot) {
          plot_list[[position]] = lines(sample_freq[pos_mask], power[pos_mask], col=position)
        }
      }
      plot(1, type='n', xlab='', ylab='', xlim=c(0.01, max(freqs)), ylim=c(0, max(power)))
      mapply(function(...) {do.call(lines, list(...))}, plot_list)
    }
  }
  
  return(list(read_csv_format=read_csv_format,
              pick_random=pick_random,
              visualize=visualize,
              fft_filter=fft_filter))
}

# Example usage
path = '/home/etb68/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/CSCP.dir/genome1_100_0.5.csv'
data_processor = dataproc(path)
df = data_processor$read_csv_format()

data_processor$visualize(df)

time_step = 1
data_processor$fft_filter(df, time_step, plot=TRUE)



```
