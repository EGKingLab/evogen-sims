---
title: "Publication_Figures"
author: "ET"
format: docx
editor: visual
---

## Allele Frequency

```{r, echo=FALSE, message=FALSE}
############ Libraries and theme function ########
library(forcats)
library(dplyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)

theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
}
```

## Linear Polygenic Models

### Small vs High parameters

```{r, warning=FALSE, fig.width = 16, fig.height = 8, echo=FALSE}

# Read and mutate datasets
geno_file <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen10.csv") %>% mutate(Selection = "Smaller Parameters")
geno_file2 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.8SD4Gen30.csv")  %>% mutate(Selection = "Higher parameters")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Smaller Parameters", 
                                 "Higher parameters"))

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(Genome_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~., strip.position = "top") +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines"))

# Print the plot
print(freqplot)
```

### Heritability Effect

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Read and mutate datasets
geno_file <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen10.csv") %>% mutate(Selection = "Small")
geno_file2 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.5SD1Gen10.csv")  %>% mutate(Selection = "Intermediate")
geno_file3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.8SD1Gen10.csv") %>% mutate(Selection = "High")


# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, "Small","Intermediate", "High"))

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(Genome_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~., strip.position = "top", ncol=3) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines"))

# Print the plot
print(freqplot)
```

### Heritability and Selection Pressure

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Read and mutate datasets
geno_file <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen10.csv") %>% mutate(Selection = "Small")
geno_file2 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.5SD4Gen10.csv")  %>% mutate(Selection = "Intermediate")
geno_file3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.8SD4Gen10.csv") %>% mutate(Selection = "High")


# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, "Small","Intermediate", "High"))

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(Genome_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~., strip.position = "top", ncol=3) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines"))

# Print the plot
print(freqplot)
```

### Selection Length Effect

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Read and mutate datasets
geno_file <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen10.csv") %>% mutate(Selection = "Small")
geno_file2 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen20.csv")  %>% mutate(Selection = "Intermediate")
geno_file3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen30.csv") %>% mutate(Selection = "High")


# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, "Small","Intermediate", "High"))

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(Genome_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~., strip.position = "top", ncol=3) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines"))

# Print the plot
print(freqplot)
```

### Selection Length vs Heritability Effect

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Read and mutate datasets
geno_file <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD1Gen10.csv") %>% mutate(Selection = "Small")
geno_file3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.8SD1Gen30.csv") %>% mutate(Selection = "High")


# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, "Small", "High"))

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(Genome_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~., strip.position = "top", ncol=3) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines"))

# Print the plot
print(freqplot)
```

### Selection Length vs Selection Strength Effect

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Read and mutate datasets
geno_file <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD4Gen10.csv") %>% mutate(Selection = "Small")
geno_file3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n300_H0.1SD4Gen30.csv") %>% mutate(Selection = "High")


# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, "Small", "High"))

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(Genome_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~., strip.position = "top", ncol=3) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines"))

# Print the plot
print(freqplot)
```

## All in one

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "genome1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="644619", "highlighted", "other")), size = 0.5) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)
# 
# 
# freqplot2 <- filtered_dataset %>%
#   filter(Generation <= 500) %>%
#   ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
#   geom_line(linewidth = 0.5) +
#   facet_wrap(H + Gen ~ SD , labeller = label_both) +
#   geom_text(data = unique_combinations, aes(x = -Inf, y = Inf, label = label),
#             hjust = -2, vjust = 1.1, size = 6, fontface = "bold",
#             inherit.aes = FALSE) +
#   theme_cowplot() +
#   theme(legend.position = "none",
#         axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
#         axis.text.y = element_text(size = 15, face = "bold"),
#         axis.line = element_line(linewidth = 3),
#         axis.title = element_text(size = 15, face = "bold"),
#         strip.text = element_text(size = 15, face = "bold"),
#         panel.spacing = unit(3, "lines")) +
#   theme(panel.grid = element_blank())
# 
# # Add position effect for each line
# freqplot2 <- freqplot2 +
#   geom_text(data = filtered_dataset %>%
#   filter(Generation <= 500)  %>% filter(!is.na(Effect)),
#             aes(x = max(Generation) + 10, y = Frequency, label = round(Effect, 1)),
#             hjust = 0, vjust = 0.15, size = 3, angle = 45)
# 
# freqplot2

```


####Let's try frequency with Effect

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# # Add the labels to your plot
# freqplot2 <- filtered_dataset %>% 
#   filter(Generation <= 500) %>% 
#   ggplot(aes(x = Generation, y = Frequency, group = factor(Position), 
#              color = factor(Position)=="644619")) +
#   geom_line(size = 0.5) +
#   facet_grid(H ~ SD + Gen, labeller = label_both) +
#   geom_text(data = unique_combinations, aes(x = -Inf, y = Inf, label = label), 
#             hjust = -2, vjust = 1.1, size = 6, fontface = "bold", inherit.aes = FALSE) +
#   theme_minimal() +
#   theme(legend.position = "none",
#         axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
#         axis.text.y = element_text(size = 15, face = "bold"),
#         axis.line = element_line(size = 3),
#         axis.title = element_text(size = 15, face = "bold"),
#         strip.text = element_text(size = 15, face = "bold"),
#         panel.spacing = unit(3, "lines")) +
#   theme(panel.grid = element_blank())
# 
# # Add position effect for each line
# freqplot2 <- freqplot2 +
#   geom_text(data = filtered_dataset %>% 
#   filter(Generation <= 500)  %>% filter(!is.na(Effect)) %>% 
#   group_by(Position) %>% 
#   filter(Generation == max(Generation)),  # keep only the maximum Generation for each Position
#             aes(x = Generation + 50, y = Frequency, label = round(Effect, 1)), 
#             hjust = 0, vjust = 0.15, size = 5, angle = 25, alpha = 0.5)
# 
# freqplot2

```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Add the labels to your plot
freqplot2 <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(size = 0.5) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Calculate the standard deviation of Frequency for each Position
position_sd <- filtered_dataset %>%
  group_by(Position) %>%
  summarise(sd = sd(Frequency))

# Find the Position with the highest standard deviation
highlight_position <- position_sd %>%
  filter(sd == max(sd)) %>%
  pull(Position)

# Highlight only the Position with the highest fluctuations
freqplot2 <- freqplot2 +
  geom_line(data = filter(filtered_dataset, Position == highlight_position, Generation <= 500), size = 1.5, color = "red")

freqplot2

```


### Effect of QTL and Initial Frequency

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Create the plot with faceting by H, SD, and Gen
heatmap_plot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = factor(Position), fill = Frequency)) +
  geom_tile() +
  scale_fill_viridis_c(option = "C") +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_minimal() +
  labs(title = "Heat Map of Frequency Over Generations",
       x = "Generation",
       y = "Position",
       fill = "Frequency") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom",
        plot.title = element_text(hjust = 0.5),
        strip.text = element_text(size = 10, face = "bold"),
        panel.spacing = unit(1, "lines"))

# Add text annotations for Effect labels on the right side
heatmap_plot <- heatmap_plot +
  geom_text(data = filtered_dataset %>% 
  filter(Generation <= 500)  %>% filter(!is.na(Effect)), 
            aes(x = max(Generation) + 10, y = factor(Position), label = round(Effect, 1)), 
            hjust = 0, vjust = 0.15, size = 3, angle = 30)


# Print the plot
print(heatmap_plot)

```


```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
library(ggplot2)
library(dplyr)
library(cowplot)

# Manually specify the labels and their positions in correct order
unique_combinations <- data.frame(
  H = rep(c(0.1, 0.5, 0.8), each = 4),
  Gen = rep(c(10, 10, 30, 30), times = 3),
  SD = rep(c(1, 4, 1, 4), times = 3),
  label = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"),
  x = rep(50, 12),  # Adjust as necessary to position labels
  y = rep(0.95, 12)  # Adjust as necessary to position labels
)


freqplot2 <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(SD ~ Gen + H , labeller = label_both) +
  geom_text(data = unique_combinations, aes(x = x, y = y, label = label), 
            hjust = 2, vjust = 1, size = 6, fontface = "bold", inherit.aes = FALSE) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

freqplot2

```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "genome1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})
# 
# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot4 <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot4)
```

### Many replicates

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, Gen, and Replicate values from filename
extract_params <- function(filename) {
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  replicate_value <- str_extract(filename, "(?<=genome)\\d+")
  
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  replicate_value <- as.numeric(replicate_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value, Replicate = replicate_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", 
                        pattern = "genome(1|2|3|4|5|6|7|8|9|10)_n300_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen, Replicate = params$Replicate)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Aggregate data to compute mean and standard deviation for each position, generation, and combination of H, SD, Gen
aggregated_dataset <- filtered_dataset %>%
  group_by(H, SD, Gen, Generation, Position) %>%
  summarise(MeanFrequency = mean(Frequency),
            SDFrequency = sd(Frequency),
            .groups = 'drop')

# Create a list to store individual plots
plot_list <- list()

# Loop over unique combinations of H, SD, and Gen to create individual plots
unique_combinations <- aggregated_dataset %>%
  distinct(H, SD, Gen)

for (i in 1:nrow(unique_combinations)) {
  subset_data <- aggregated_dataset %>%
    filter(H == unique_combinations$H[i],
           SD == unique_combinations$SD[i],
           Gen == unique_combinations$Gen[i])
  
  p <- subset_data %>%
    ggplot(aes(x = Generation, y = MeanFrequency, color = factor(Position), fill = factor(Position))) +
    geom_line(size = 0.5) +
    geom_ribbon(aes(ymin = MeanFrequency - SDFrequency, ymax = MeanFrequency + SDFrequency), alpha = 0.1) +
    theme_cowplot() +
    ggtitle(paste("H =", unique_combinations$H[i], 
                  "SD =", unique_combinations$SD[i], 
                  "Gen =", unique_combinations$Gen[i])) +
    theme(legend.position = "none",
          axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
          axis.text.y = element_text(size = 15, face = "bold"),
          axis.line = element_line(size = 3),
          axis.title = element_text(size = 15, face = "bold"),
          plot.title = element_text(size = 18, face = "bold", hjust = 0.5))
  
  plot_list[[i]] <- p
}

# Print the plots
for (plot in plot_list) {
  print(plot)
}
```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, Gen, and Replicate values from filename
extract_params <- function(filename) {
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  replicate_value <- str_extract(filename, "(?<=genome)\\d+")
  
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  replicate_value <- as.numeric(replicate_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value, Replicate = replicate_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", 
                        pattern = "genome(1|2|3|4|5|6|7|8|9|10)_n300_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen, Replicate = params$Replicate)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create a list to store individual plots
plot_list <- list()

# Loop over unique combinations of H, SD, and Gen to create individual plots
unique_combinations <- filtered_dataset %>%
  distinct(H, SD, Gen)

for (i in 1:nrow(unique_combinations)) {
  subset_data <- filtered_dataset %>%
    filter(H == unique_combinations$H[i],
           SD == unique_combinations$SD[i],
           Gen == unique_combinations$Gen[i])
  
  p <- subset_data %>%
    ggplot(aes(x = Generation, y = factor(Position), fill = Frequency)) +
    geom_tile() +
    scale_fill_gradient(low = "blue", high = "red") +
    theme_cowplot() +
    ggtitle(paste("H =", unique_combinations$H[i], 
                  "SD =", unique_combinations$SD[i], 
                  "Gen =", unique_combinations$Gen[i])) +
    theme(legend.position = "bottom",
          axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
          axis.text.y = element_text(size = 15, face = "bold"),
          axis.line = element_line(size = 3),
          axis.title = element_text(size = 15, face = "bold"),
          plot.title = element_text(size = 18, face = "bold", hjust = 0.5))
  
  plot_list[[i]] <- p
}

# Print the plots
for (plot in plot_list) {
  print(plot)
}
```

### Phenotypes

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "MeanPhenotypes1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
phenoplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line(size = 0.5) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoplot)
```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
freqplot <- freqplot + labs(title = "A")
phenoplot <- phenoplot + labs(title = "B")
plot_grid(freqplot, phenoplot, ncol = 2)

```

#### Monogenic model

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "genome1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
   ylim(0, 1) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

freqplot

```

```{r, echo=FALSE}
# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "MeanPhenotypes1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# Create the plot with faceting by H, SD, and Gen
phenoplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line(size = 0.5) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
freqplot <- freqplot + labs(title = "A")
phenoplot <- phenoplot + labs(title = "B")
plot_grid(freqplot, phenoplot, ncol = 2)
```

#### Oligogenic model

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "genome1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="915217", "highlighted", "other")), size = 0.5, alpha = 0.7) +
  scale_color_manual(values = c("highlighted" = "darkred", "other" = "grey")) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```

```{r, echo=FALSE}
# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir", pattern = "MeanPhenotypes1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})


# Create the plot with faceting by H, SD, and Gen
phenoplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line(size = 0.5) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
freqplot <- freqplot + labs(title = "A")
phenoplot <- phenoplot + labs(title = "B")
plot_grid(freqplot, phenoplot, ncol = 2)
```

## 

## Comparisons

```{r, echo=FALSE}
### Function for allele frequency

#################### Data Processing and plotting ###############

# The first part deals with constant and sinusoidal II
process_files <- function(dirpath, pattern, plot_type) {
  files <- list.files(dirpath, pattern, full.names = TRUE)

  dataframes <- list()
  for(file in files){
    replicate_id <- as.numeric(str_extract(file, "(?<=genome)\\d+"))
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

    data <- read.csv(file, header = TRUE) %>%
      select(Generation, Position, Frequency, Effect) %>%
      group_by(Position) %>%
      mutate(Position = factor(Position),
             replicate = replicate_id,
             herit = herit,
             loci = loci,
             sd = sd,
             initFreq = Frequency[Generation == 1],
             h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
             postion_effect_init = paste("position = ", Position," ",
                                         "Effect = ", round(Effect, 2)," ", 
                                         "Initial Freq = ", 
                                         round(initFreq, 2)," ",
                                         "repl = ", " ",replicate, sep = ""))


    # argument for linear and sinusoidal I selections

    if(!is.na(gen)) {
      data$gen <- rep(gen, nrow(data))
    }

    dataframes[[file]] <- data
  }
  combined_data <- bind_rows(dataframes) %>%
    mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
           loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""))

  # plots for either linear or sinusoidal selections

  plots <- list()
  if (plot_type == "loci_gen") {
    loci_gens <- unique(combined_data$loci_gen)
    for(loci_geni in loci_gens){
      locus_data <- combined_data %>%
        filter(loci_gen == loci_geni)
      
      p <- locus_data %>%
        ggplot(aes(Generation, Frequency, group = postion_effect_init,
                   color = postion_effect_init))+#ostion_effect_init
        geom_line(size = 0.2)+
        facet_wrap(~h2_sd, ncol = 4)+
        ylim(min = 0, max = 1)+
        theme_bw()+
        theme(legend.position = "none")
      
      plots[[loci_geni]] <- ggplotly(p) #ggplotly
    }

    # plots for constant or sinusoidal II selections

  } else if (plot_type == "loci") {
    loci <- unique(combined_data$loci)
    for(locus in loci){
      locus_data <- combined_data %>%
        filter(loci == locus)#,
               #Generation %% (gen+1) == 0,
               #Effect > 1.5)

      # Select 10 random positions
      #selected_positions <- sample(locus_data$Position,
      #size = min(10, nrow(locus_data)), replace = F)
      # Filter the data for the selected positions
      #locus_data <- locus_data %>%
        #filter(Position %in% selected_positions)
      
      p <- locus_data %>%
        ggplot(aes(Generation, Frequency, group = postion_effect_init, #postion_effect_init 
                   color = postion_effect_init))+
        geom_line(size = 0.2)+
        facet_wrap(~h2_sd, ncol = 4)+
        ylim(min = 0, max = 1)+
        theme_bw()#+
        #theme(legend.position = "none")
      plots[[locus]] <- ggplotly(p) #ggplotly
    }
  }

  return(list(combined_data = combined_data, plots = plots))
}

```

### Figure 1: Monogenic Two-Season

### Figure 2: Models Comparison

```{r, echo=FALSE}
#dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
mono1 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD2Gen10.csv")
mono2 <-  read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/genome1_n10_H0.1SD2Gen10.csv")
mono3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/genome1_n10_H0.1SD2.csv")
```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Add a column to distinguish the datasets
geno_file <- mono1 %>% mutate(Selection = "Instantaneous Model")
geno_file2 <- mono2 %>% mutate(Selection = "Gradual 2-Seasons Model")
geno_file3 <- mono3 %>% mutate(Selection = "Gradual 4-Seasons Model")

# Combine the datasets
Genome_dataset <- rbind(geno_file, 
                        geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Instantaneous Model", 
                                 "Gradual 2-Seasons Model", 
                                 "Gradual 4-Seasons Model"))

# Create the plot
freqplot <- Genome_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~.) +
  theme_cowplot()+
  theme(legend.position = "none",
        axis.text = element_text( size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text( size = 15, face = "bold"))

freqplot
```

### Neutral vs Gradual 4 seasons

```{r, echo=FALSE}
neutr1 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/genome1_n10_H0.5.csv")
mono3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/genome1_n10_H0.5SD2.csv")
```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Add a column to distinguish the datasets
geno_file <- neutr1 %>% mutate(Selection = "Neutral Model")
geno_file3 <- mono3 %>% mutate(Selection = "Gradual 4-Seasons Model")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Neutral Model",  
                                 "Gradual 4-Seasons Model"))

# Create the plot
freqplot <- Genome_dataset %>% ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.2) +
  facet_wrap(Selection~.) +
  theme_cowplot()+
  theme(legend.position = "none",
        axis.text = element_text( size = 12, face = "bold"),
        axis.line = element_line(size = 1),
        axis.title = element_text( size = 12, face = "bold"))

freqplot
```

### Genome Size

```{r, echo=FALSE}
Mono <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n1_H0.1SD3Gen10.csv")
Oligo <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD3Gen10.csv")
Poly<- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n100_H0.1SD3Gen10.csv")
```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
# Add a column to distinguish the datasets
geno_file <- Mono %>% mutate(Selection = "Monogenic")
geno_file2 <- Oligo %>% mutate(Selection = "Oligogenic")
geno_file3 <- Poly %>% mutate(Selection = "Polygenic")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Monogenic",  
                                 "Oligogenic", 
                                 "Polygenic"))

# Create the plot
freqplot <- Genome_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.2) +
  facet_wrap(~Selection, ncol = 3) +
  theme_cowplot()+
  theme(legend.position = "none",
        axis.text = element_text( size = 12, face = "bold"),
        axis.line = element_line(size = 1),
        axis.title = element_text( size = 12, face = "bold"))

freqplot
```

 
### Gradual I

#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir", pattern = "genome1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="644619", "highlighted", "other")), size = 1) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir", pattern = "genome1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="915217", "highlighted", "other")), size = 0.5) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}


# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir", pattern = "genome1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)Gen(10|30)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD, Gen = params$Gen)
  return(data)
})

# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
   ylim(0, 1) +
  scale_color_manual(values = "red") +
  facet_grid(H ~ SD + Gen, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

freqplot
```


## Gradual II

### Allele Frequency

#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/", pattern = "genome1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="644619", "highlighted", "other")), size = 1) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/", pattern = "genome1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="915217", "highlighted", "other")), size = 0.5) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}


# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/", pattern = "genome1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
   ylim(0, 1) +
  scale_color_manual(values = "red") +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

freqplot
```


### Phenotypes


#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(cowplot)

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/", pattern = "MeanPhenotypes1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/", pattern = "MeanPhenotypes1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/", pattern = "MeanPhenotypes1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```


## Constant

### Allele Frequency

#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "genome1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="644619", "highlighted", "other")), size = 1) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "genome1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="915217", "highlighted", "other")), size = 0.5) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}


# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "genome1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
   ylim(0, 1) +
  scale_color_manual(values = "red") +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

freqplot
```


### Phenotypes


#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(cowplot)

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "MeanPhenotypes1_n300_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "MeanPhenotypes1_n10_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  
  return(list(H = h_value, SD = sd_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/", pattern = "MeanPhenotypes1_n1_H(0\\.1|0\\.5|0\\.8)SD(1|4)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H, SD = params$SD)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(H ~ SD, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```

## Neutral

### Allele Frequency

#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  
  return(list(H = h_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/", pattern = "genome1_n300_H(0\\.1|0\\.5|0\\.8)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="644619", "highlighted", "other")), size = 1) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_wrap(~H, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  
  return(list(H = h_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/", pattern = "genome1_n10_H(0\\.1|0\\.5|0\\.8)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H)
  return(data)
})

# Set seed for reproducibility and randomly select at most 30 positions
set.seed(123)
unique_positions <- unique(combined_dataset$Position)
selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))

# Filter dataset to include only selected positions
filtered_dataset <- combined_dataset %>% 
  filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- filtered_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = ifelse(factor(Position)=="915217", "highlighted", "other")), size = 0.5) +
  scale_color_manual(values = c("highlighted" = "red", "other" = "grey")) +
  facet_wrap(~H , labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(freqplot)
```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}


# Function to extract H, SD, and Gen values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  
  return(list(H = h_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/", pattern = "genome1_n1_H(0\\.1|0\\.5|0\\.8)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H)
  return(data)
})

# # Set seed for reproducibility and randomly select at most 30 positions
# set.seed(123)
# unique_positions <- unique(combined_dataset$Position)
# selected_positions <- sample(unique_positions, size = min(30, length(unique_positions)))
# 
# # Filter dataset to include only selected positions
# filtered_dataset <- combined_dataset %>% 
#   filter(Position %in% selected_positions)

# Create the plot with faceting by H, SD, and Gen
freqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(size = 0.5) +
   ylim(0, 1) +
  scale_color_manual(values = "red") +
  facet_wrap(~H, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 15, face = "bold"),
        axis.text.y = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 3),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

freqplot
```


### Phenotypes


#### Polygenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

library(stringr)
library(dplyr)
library(purrr)
library(ggplot2)
library(cowplot)

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  
  return(list(H = h_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/", pattern = "MeanPhenotypes1_n300_H(0\\.1|0\\.5|0\\.8)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(~H, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```

#### Oligogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}

# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  
  return(list(H = h_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/", pattern = "MeanPhenotypes1_n10_H(0\\.1|0\\.5|0\\.8)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(~H, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)

```


#### Monogenic

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}


# Function to extract H and SD values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  
  # Convert to numeric
  h_value <- as.numeric(h_value)
  
  return(list(H = h_value))
}

# List all relevant files using specific numbers in the pattern
file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/", pattern = "MeanPhenotypes1_n1_H(0\\.1|0\\.5|0\\.8)\\.csv", full.names = TRUE)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(H = params$H)
  return(data)
})

# Create the plot with faceting by H and SD
phenoqplot <- combined_dataset %>% 
  filter(Generation <= 500) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line() +
  facet_wrap(~H, labeller = label_both) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1, size = 17, face = "bold"),
        axis.text.y = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 5),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"),
        panel.spacing = unit(3, "lines")) +
  theme(panel.grid = element_blank())

# Print the plot
print(phenoqplot)


```



