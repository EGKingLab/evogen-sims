---
title: "Allele Heat Maps"
format: pdf
editor: visual
---

## Fixed Loci

The idea here is to make a heatmap of fixed and lost loci for all 30 replicates of each qtl.

Is there any better way to present this? all i want is to see the effect of qt number, size effect, and initial allele frequency. this should al be different across heritability values, standard deviations, and generations.

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
source('~/YeastProj.dir/evogen-sims/ET_Yeast/Writing1.dir/Code.dir/FixationView.R')
# Example usage
path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome\\d+_n(1|10|100|300)_H0.(1|8)(SD[1|4])?(Gen10|30)?\\.csv$"
plots <- run_analysis(path, pattern)

# Display the first plot (if using an interactive environment)
#print(plots[[1]])

# Save plots (if needed)
# for (i in seq_along(plots)) {
#   ggsave(filename = paste0("plot_loci_", loci_values[i], ".png"), plot = plots[[i]], width = 12, height = 8)
# }
print(plots)
```

### Data Processing to count fixed vs lost

```{r}
############ Libraries and theme function ########
rm(list = ls())
library(dplyr)
library(tidyr)
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
library(data.table)
library(ggplot2)

theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
}

#################### Data Processing and plotting ###############

# Directory path and pattern
path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome\\d+_n(1|10|100|300)_H0.(1|8)(SD[1|4])?(Gen10|30)?\\.csv$"

# Function to process files in chunks
process_files_in_chunks <- function(files, chunk_size, num_cores) {
  combined_data <- list()
  
  for (i in seq(1, length(files), by = chunk_size)) {
    chunk <- files[i:min(i + chunk_size - 1, length(files))]
    
    cl <- makeCluster(num_cores)
    registerDoParallel(cl)
    
    data_list <- foreach(file = chunk, .packages = c("dplyr", "stringr", "data.table"), .errorhandling = 'remove') %dopar% {
      repl <- as.numeric(str_extract(file, "(?<=genome)\\d+"))
      herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
      loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
      sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
      gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
      
      data <- fread(file) %>%
        select(-Origin) %>%
        mutate(Position = factor(Position), repl = repl,
               herit = herit, loci = loci, sd = sd, gen = gen,
               h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
               loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""),
               Loci_h_gen_sd = paste("Loci = ", loci, " ",
                                     "Herit = ", round(herit, 2), " ", 
                                     "Gen = ", gen, " ",
                                     "sd = ", sd, sep = ""))
      return(data)
    }
    
    stopCluster(cl)
    closeAllConnections()  # Close all connections
    
    combined_data <- c(combined_data, data_list)
  }
  
  combined_data <- bind_rows(combined_data)
  
  return(combined_data)
}

# Main function to list files and process them in chunks
myheatmaps <- function(path, pattern, chunk_size = 50, num_cores = 8) {
  files <- list.files(path, pattern, full.names = TRUE)
  combined_data <- process_files_in_chunks(files, chunk_size, num_cores)
  return(combined_data)
}

mydata <- myheatmaps(path, pattern)

mydata2 <- mydata %>%
  group_by(herit, loci, sd, gen, repl, Position) %>%
  mutate(
    Fixation = case_when(
      Frequency == 1 ~ "Fixed",
      Frequency < 1 & Generation == max(Generation) & max(Generation) < 2000 ~ "Lost",
      TRUE ~ NA_character_
    ),
    InitFreq = case_when(Generation == 1 ~ Frequency, 
                         TRUE ~ NA_real_)
  ) %>%
  ungroup()

mydata3 <- mydata2 %>% dplyr::select(Generation, Position, Fixation, Frequency, Effect, InitFreq, repl, loci, Loci_h_gen_sd)
```

```{r}
mydata4 <- mydata3 %>% 
  group_by(Loci_h_gen_sd, repl, Position) %>% 
  mutate(InitFreq = ifelse(is.na(InitFreq), lag(InitFreq), InitFreq)) %>% 
  fill(InitFreq) %>% drop_na() %>% select(-Generation, -Frequency) %>% distinct()

```

```{r}
library(dplyr)

summary_df <- mydata4 %>%
  group_by(loci, Loci_h_gen_sd, repl) %>%
  summarize(
    num_fixed = sum(Fixation == "Fixed", na.rm = TRUE),
    num_lost = sum(Fixation == "Lost", na.rm = TRUE)
  ) %>%
  ungroup()

# Display the result
print(summary_df)

```

```{r}
# library(ggplot2)
# 
# # Create a scatter plot
# ggplot(mydata4, aes(x = Effect, y = InitFreq, color = Fixation, size = Effect)) +
#   geom_point(alpha = 0.7) +
#   labs(title = "Relationship among Position, Fixation, Effect, and InitFreq",
#        x = "Effect",
#        y = "Initial Frequency",
#        color = "Fixation Status",
#        size = "Effect") +
#   theme_minimal() +
#   scale_color_manual(values = c("Fixed" = "blue", "Lost" = "red"))

```

```{r}
# ggplot(mydata4, aes(x = Effect, y = InitFreq, color = Fixation, size = Effect)) +
#   geom_point(alpha = 0.7) +
#   facet_wrap(~ Position) +
#   labs(title = "Relationship among Position, Fixation, Effect, and InitFreq",
#        x = "Effect",
#        y = "Initial Frequency",
#        color = "Fixation Status",
#        size = "Effect") +
#   theme_minimal() +
#   scale_color_manual(values = c("Fixed" = "blue", "Lost" = "red"))

```

```{r, warning=FALSE, fig.width = 22, fig.height = 20, echo=FALSE}
# # Create a scatter plot with text labels for Position and formatted Effect values
# ggplot(mydata4, aes(x = Effect, y = InitFreq, color = Fixation, size = Effect)) +
#   geom_point(alpha = 0.7) +
#   geom_text(aes(label = paste0("Pos: ", Position, "\nEff: ", sprintf("%.2f", Effect))),
#             vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, fontface = "bold") +
#   labs(title = "Relationship among Position, Fixation, Effect, and InitFreq",
#        x = "Effect",
#        y = "Initial Frequency",
#        color = "Fixation Status",
#        size = "Effect") +
#   facet_wrap(~ Loci_h_gen_sd, ncol = 2, scales = "free_y") +
#   theme_minimal() +
#   theme(
#     plot.title = element_text(hjust = 0.5, face = "bold"),
#     axis.title = element_text(face = "bold"),
#     legend.position = "bottom",
#     legend.justification = "center",
#     panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "gray"),
#     panel.grid.minor = element_blank(),
#     panel.grid.major.x = element_line(size = 0.5, linetype = 'solid', colour = "gray"),
#     panel.grid.major.y = element_line(size = 0.5, linetype = 'solid', colour = "gray"),
#     panel.grid = element_line(size = 1.5)
#   ) +
#   scale_color_manual(values = c("Fixed" = "blue", "Lost" = "red"))

library(ggplot2)
library(dplyr)

# Create a summary data frame
summary_df <- mydata4 %>%
  group_by(Loci_h_gen_sd) %>%
  summarize(
    num_fixed = sum(Fixation == "Fixed", na.rm = TRUE),
    num_lost = sum(Fixation == "Lost", na.rm = TRUE)
  ) %>%
  mutate(label = paste("F: ", num_fixed, "\nL: ", num_lost))

# Create a labeling function
custom_labels <- function(labels) {
  labels <- LETTERS[1:length(labels)]
  return(setNames(labels, names(labels)))
}

# Apply the custom labels to the plot
ggplot(mydata4, aes(x = Effect, y = InitFreq, size = Effect, color = Fixation)) +
  geom_point(alpha = 0.5) +
  geom_text(aes(label = paste0(sprintf("%.2f", Effect))), 
            vjust = 1, hjust = 1, size = 2, check_overlap = TRUE, fontface = "bold") +
  labs(title = "Relationship among Position, Fixation, Effect, and Initial Frequency",
       x = "Effect",
       y = "Initial Frequency",
       color = "Fixation Status",
       size = "Effect") +
  facet_wrap(~ Loci_h_gen_sd, ncol = 2, scales = "free_y", labeller = labeller(Loci_h_gen_sd = custom_labels)) +
  geom_label(data = summary_df, aes(x = Inf, y = Inf, label = label), 
            vjust = 1.1, hjust = 1.1, size = 4, fontface = "bold", inherit.aes = FALSE, label.padding = unit(0.2, "lines"), label.size = 0.5) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
    axis.title = element_text(face = "bold", size = 17),
    axis.text = element_text(face = "bold", size = 12),
    legend.title = element_text(face = "bold", size = 17),
    legend.text = element_text(face = "bold", size = 17),
    legend.position = "bottom",
    legend.justification = "center",
    panel.grid = element_line(size = 1.5),
    strip.text = element_text(face = "bold", size = 15)  # Bold facet labels
  ) +
  scale_color_manual(values = c("Fixed" = "blue", "Lost" = "red"))

```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
library(ggplot2)
library(dplyr)

# Create a summary data frame
summary_df <- mydata4 %>%
  group_by(loci, Loci_h_gen_sd) %>%
  summarize(
    num_fixed = sum(Fixation == "Fixed", na.rm = TRUE),
    num_lost = sum(Fixation == "Lost", na.rm = TRUE)
  ) %>%
  mutate(label = sprintf("Fixed: %d\nLost : %d", num_fixed, num_lost))

# Create a labeling function
custom_labels <- function(labels) {
  labels <- LETTERS[1:length(labels)]
  return(setNames(labels, names(labels)))
}

# Function to create plots for each loci
create_plot <- function(loci_value) {
  plot_data <- mydata4 %>% filter(loci == loci_value)
  summary_data <- summary_df %>% filter(loci == loci_value)
  
  p <- ggplot(plot_data, aes(x = Effect, y = InitFreq, size = Effect, color = Fixation)) +
    geom_point(alpha = 0.5) +
    geom_text(aes(label = paste0(sprintf("%.2f", Effect))), 
              vjust = 1, hjust = 1, size = 2, check_overlap = TRUE, fontface = "bold", color = "black") +
    labs(title = paste("Relationship among Position, Fixation, Effect, and Initial Frequency for Loci", loci_value),
         x = "Effect",
         y = "Initial Frequency",
         color = "Fixation Status",
         size = "Effect") +
    facet_wrap(~ Loci_h_gen_sd, ncol = 2, scales = "free_y", labeller = labeller(Loci_h_gen_sd = custom_labels)) +
    geom_label(data = summary_data, aes(x = Inf, y = Inf, label = label), 
               vjust = 1.1, hjust = 1.1, size = 4, fontface = "bold", family = "mono", inherit.aes = FALSE, label.padding = unit(0.2, "lines"), label.size = 0.5) +
    theme_classic() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
      axis.title = element_text(face = "bold", size = 12),
      axis.text = element_text(face = "bold", size = 10),
      legend.title = element_text(face = "bold", size = 12),
      legend.text = element_text(face = "bold", size = 10),
      legend.position = "bottom",
      legend.justification = "center",
      panel.grid = element_line(size = 1.5),
      strip.text = element_text(face = "bold", size = 12)  # Bold facet labels
    ) +
    scale_color_manual(values = c("Fixed" = "blue", "Lost" = "red"))
  
  return(p)
}

# Get unique loci values
loci_values <- unique(mydata4$loci)

# Create and save plots for each loci
plots <- lapply(loci_values, create_plot)

# Display the first plot (if using an interactive environment)
print(plots[[1]])

# Save plots (if needed)
# for (i in seq_along(plots)) {
#   ggsave(filename = paste0("plot_loci_", loci_values[i], ".png"), plot = plots[[i]], width = 12, height = 8)
# }

```

```{r, warning=FALSE, fig.width = 26, fig.height = 14, echo=FALSE}
plots[2]
```

### 

```{r}
classifiers <- unique(mydata3$Loci_h_gen_sd)

plots <- list()

for(classifier in seq_along(classifiers)){
  
  filtered_data_long <- mydata3 %>%
  group_by(Position) %>%
  mutate(Effect_label = ifelse(row_number() == 1 | row_number() %% n() == 0, Effect, NA)) %>%
  ungroup()
  
  plots[[classifier]] <- mydata3 %>% 
    filter(Loci_h_gen_sd==classifiers[classifier]) %>% 
    ggplot(aes(x = Generation, y = factor(Position), fill = Frequency), color = repl)+
    geom_tile() + 
    scale_fill_viridis_c(option = "C") + 
    #facet_wrap(~repl, ncol=5, scales = "free_y")+
    theme_minimal() + 
    labs(title = "Heat Map of Frequency Over Generations", 
         x = "Generation", y = "Position", fill = "Frequency") + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "bottom", 
          plot.title = element_text(hjust = 0.5)) #+ 
    # geom_text(data = filtered_data_long %>% filter(!is.na(Effect_label)), 
    #           aes(x = 2050, y = factor(Position), label = Effect_label),
    #           hjust = 0, vjust = 0.5, size = 3, color = "black")
}

```

```{r, warning=FALSE, fig.width = 26, fig.height = 8}
plots
```

```{r}
# Filter out rows with NA in InitFreq
filtered_data <- mydata3 %>% filter(!is.na(Fixation))

# Group by Loci_h_gen_sd and Position, then count Fixed and Lost positions
fixed_lost_counts <- filtered_data %>%
  group_by(Loci_h_gen_sd, Position, Effect, InitFreq, loci) %>%
  summarise(
    num_fixed = sum(Fixation == "Fixed"),
    num_lost = sum(Fixation == "Lost")
  ) %>%
  ungroup()

# Create a new dataframe with the desired columns
new_dataframe <- fixed_lost_counts %>%
  select(
    group = Loci_h_gen_sd,
    loci = loci,
    position = Position,
    effect = Effect,
    init_freq = InitFreq,
    num_lost_positions = num_lost,
    num_fixed_positions = num_fixed
  )

# Display the new dataframe
head(new_dataframe)

```

### Does Gen affect fixation or loss?

```{r}
############ Libraries and theme function ########
rm(list = ls())
library(dplyr)
library(tidyr)
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
library(data.table)
library(ggplot2)

theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
}

#################### Data Processing and plotting ###############

# Directory path and pattern
path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome\\d+_n(1|10|300)_H0.(1|8)(SD[1|2|3|4])?(Gen(10|20|30))?\\.csv$"

# Function to process files in chunks
process_files_in_chunks <- function(files, chunk_size, num_cores) {
  combined_data <- list()
  
  for (i in seq(1, length(files), by = chunk_size)) {
    chunk <- files[i:min(i + chunk_size - 1, length(files))]
    
    cl <- makeCluster(num_cores)
    registerDoParallel(cl)
    
    data_list <- foreach(file = chunk, .packages = c("dplyr", "stringr", "data.table"), .errorhandling = 'remove') %dopar% {
      repl <- as.numeric(str_extract(file, "(?<=genome)\\d+"))
      herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
      loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
      sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
      gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
      
      data <- fread(file) %>%
        select(-Origin) %>%
        mutate(Position = factor(Position), repl = repl,
               herit = herit, loci = loci, sd = sd, gen = gen,
               h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
               loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""),
               Loci_h_gen_sd = paste("Loci = ", loci, " ",
                                     "Herit = ", round(herit, 2), " ", 
                                     "Gen = ", gen, " ",
                                     "sd = ", sd, sep = ""))
      return(data)
    }
    
    stopCluster(cl)
    closeAllConnections()  # Close all connections
    
    combined_data <- c(combined_data, data_list)
  }
  
  combined_data <- bind_rows(combined_data)
  
  return(combined_data)
}

# Main function to list files and process them in chunks
myheatmaps <- function(path, pattern, chunk_size = 50, num_cores = 8) {
  files <- list.files(path, pattern, full.names = TRUE)
  combined_data <- process_files_in_chunks(files, chunk_size, num_cores)
  return(combined_data)
}

mydata <- myheatmaps(path, pattern)

mydata2 <- mydata %>%
  group_by(herit, loci, sd, gen, repl, Position) %>%
  mutate(
    Fixation = case_when(
      Frequency == 1 ~ "Fixed",
      Frequency < 1 & Generation == max(Generation) & max(Generation) < 2000 ~ "Lost",
      TRUE ~ NA_character_
    ),
    InitFreq = case_when(Generation == 1 ~ Frequency, 
                         TRUE ~ NA_real_)
  ) %>%
  ungroup()

mydata3 <- mydata2 %>% dplyr::select(Generation, Position, Fixation, Frequency, Effect, InitFreq, repl, loci, Loci_h_gen_sd)
```

```{r}
mydata4 <- mydata3 %>% 
  group_by(Loci_h_gen_sd, repl, Position) %>% 
  mutate(InitFreq = ifelse(is.na(InitFreq), lag(InitFreq), InitFreq)) %>% 
  fill(InitFreq) %>% drop_na() %>% select(-Generation, -Frequency) %>% distinct()

```

```{r}
# library(dplyr)
# 
# summary_df <- mydata4 %>%
#   group_by(loci, Loci_h_gen_sd, repl) %>%
#   summarize(
#     num_fixed = sum(Fixation == "Fixed", na.rm = TRUE),
#     num_lost = sum(Fixation == "Lost", na.rm = TRUE)
#   ) %>%
#   ungroup()
```

```{r, fig.width = 20, fig.height = 28, echo=FALSE}
library(ggplot2)
library(dplyr)

# Create a summary data frame
summary_df <- mydata4 %>%
  group_by(Loci_h_gen_sd) %>%
  summarize(
    num_fixed = sum(Fixation == "Fixed", na.rm = TRUE),
    num_lost = sum(Fixation == "Lost", na.rm = TRUE)
  ) %>%
  mutate(label = paste("F: ", num_fixed, "\nL: ", num_lost))

# Apply the custom labels to the plot
ggplot(mydata4, aes(x = Effect, y = InitFreq, size = Effect, color = Fixation)) +
  geom_point(alpha = 0.5) +
  geom_text(aes(label = paste0(sprintf("%.2f", Effect))), 
            vjust = 1, hjust = 1, size = 5, check_overlap = TRUE, fontface = "bold") +
  labs(title = "Relationship among Position, Fixation, Effect, and Initial Frequency",
       x = "Effect",
       y = "Initial Frequency",
       color = "Fixation Status",
       size = "Effect") +
  facet_wrap(~ Loci_h_gen_sd, ncol = 4, scales = "free_y") +  # Use actual facet values
  geom_label(data = summary_df, aes(x = Inf, y = Inf, label = label), 
            vjust = 1.1, hjust = 1.1, size = 10, fontface = "bold", inherit.aes = FALSE, label.padding = unit(0.2, "lines"), label.size = 0.5) +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
    axis.title = element_text(face = "bold", size = 25),
    axis.text = element_text(face = "bold", size = 18),
    legend.title = element_text(face = "bold", size = 25),
    legend.text = element_text(face = "bold", size = 25),
    legend.position = "bottom",
    legend.justification = "center",
    panel.grid = element_line(size = 3),
    strip.text = element_text(face = "bold", size = 25)  # Bold facet labels
  ) +
  scale_color_manual(values = c("Fixed" = "blue", "Lost" = "red"))

```
