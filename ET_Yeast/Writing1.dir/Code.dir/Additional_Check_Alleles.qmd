---
title: "Additional_Check_Alleles"
author: "Esdras T"
format: html
editor: visual
---

```{r, echo=FALSE, message=FALSE}
library(tidyverse)
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
theme_set(theme_cowplot())
mytheme <- function(){
  theme_set(theme_cowplot())+
    theme(axis.title = element_text(face = "bold"),
          axis.text = element_text(face = "italic"),
          plot.title = element_text(hjust = 0.5),
          legend.position = "none")
}
```

## Neutral Selection

```{r}
# Define the directory path and pattern
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/"
pattern <- "^genome15\\D"

# List the files in the directory that match the pattern
files <- list.files(dirpath, pattern, full.names = TRUE)

# Define the function to process the plots
process_plots <- function(file) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  
  data <- read.csv(file, header = TRUE) %>% 
    select(Generation, Position, Frequency, Effect) %>% 
    group_by(Position) %>% 
    mutate(Position = factor(Position),
           herit = herit,
           initFreq = Frequency[Generation == 1],
           postion_effect_init = 
             paste("position = ", Position," ","Effect = ", 
                   round(Effect, 2)," ", "Initial Freq = ", 
                   round(initFreq, 2) , sep = "")) %>% 
    filter(Effect > 1.5)
  
  # Select 10 random positions
  selected_positions <- sample(data$Position, 
                               size = min(10, nrow(data)), replace = F)
  
  # Filter the data for the selected positions
  data <- data %>% 
    filter(Position %in% selected_positions)
  
  ggplot(data, 
         aes(Generation, Frequency, group = postion_effect_init, 
             color = postion_effect_init, 
             linetype = postion_effect_init))+
    geom_line(linewidth = 0.5)+
    labs(x = "", y = "") +
    ylim(min = 0, max = 1)+
    theme_bw()+
    theme(legend.position = "none")
}

# Apply the function to each file to get a list of plots
plots_list <- lapply(files, process_plots)

# Now you can use wrap_plots()
p <- wrap_plots(plots_list, ncol = 3)
ggplotly(p)

```


## Constant Selection

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/"
pattern <- "^genome15\\D"
files <- list.files(dirpath, pattern, full.names = TRUE)

process_file <- function(file) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  
  data <- read.csv(file, header = TRUE) %>% 
    select(Generation, Position, Frequency, Effect) %>% 
    group_by(Position) %>% 
    mutate(Position = factor(Position),
           herit = herit,
           loci = loci, 
           sd = sd,
           initFreq = Frequency[Generation == 1],
           h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
           postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
  
  return(data)
}

dataframes <- lapply(files, process_file)
combined_data <- bind_rows(dataframes)

plots <- lapply(unique(combined_data$loci), function(locus) {
  locus_data <- combined_data %>% 
    filter(loci == locus,
           #Generation %% (gen+1) == 0,
           Effect > 1.5)
  
  # Select up to 10 random positions
  num_positions <- min(10, length(unique(locus_data$Position)))
  selected_positions <- sample(unique(locus_data$Position), size = num_positions)
  
  # Filter the data for the selected positions
  locus_data <- locus_data %>% 
    filter(Position %in% selected_positions)
  
  ggplotly(ggplot(locus_data, aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.5)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw())
})

plots
```



## Fluctuating Selection

### Linear Selection

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome15\\D" #"" #(\\D|$) ^genome15_n(1|2|3|4|5|6|7|8|9|10)($|[^0-9])
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

data <- read.csv(file, header = TRUE) %>% 
  select(Generation, Position, Frequency, Effect) %>% 
  group_by(Position) %>% 
  mutate(Position = factor(Position),
         herit = herit,
         loci = loci, 
         sd = sd,
         gen = gen,
         initFreq = Frequency[Generation == 1])

dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
         postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
```


```{r, fig.width = 16, fig.height = 8}
#path <- "~/OneDrive - University of Missouri/Test_Test/LinFS.dir/Plots/"

plots <- list()
loci_gens <- unique(combined_data$loci_gen)
for(loci_geni in loci_gens){
  locus_data <- combined_data %>% 
    filter(loci_gen == loci_geni,
           Generation %% (gen+1) == 0,
           Effect > 1.5)
  
  # Select 10 random positions
  selected_positions <- sample(locus_data$Position, size = min(10, nrow(locus_data)), replace = F)
  
  # Filter the data for the selected positions
  locus_data <- locus_data %>% 
    filter(Position %in% selected_positions)
  
  p <- locus_data %>% 
    ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.5)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw()#+
    #theme(legend.position = "none")
  #plotname <- paste(path, "Allele_plot_for_loci ", locus, ".png", sep = "")
  #ggsave(filename = plotname, plot = plots[[locus]], width = 12, height = 8, units = "in")
  plots[[loci_geni]] <- ggplotly(p)
}
plots
```


### Sinusoidal I

```{r}
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^genome15\\D"
files <- list.files(dirpath, pattern, full.names = TRUE)

process_file <- function(file) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
  
  data <- read.csv(file, header = TRUE) %>% 
    select(Generation, Position, Frequency, Effect) %>% 
    group_by(Position) %>% 
    mutate(Position = factor(Position),
           herit = herit,
           loci = loci, 
           sd = sd,
           gen = gen,
           initFreq = Frequency[Generation == 1],
           h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
           loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
           postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
  
  return(data)
}

dataframes <- lapply(files, process_file)
combined_data <- bind_rows(dataframes)

plots <- lapply(unique(combined_data$loci_gen), function(loci_geni) {
  locus_data <- combined_data %>% 
    filter(loci_gen == loci_geni,
           #Generation %% (gen+1) == 0,
           Effect > 1.5)
  
  # Select up to 15 random positions
  num_positions <- min(10, length(unique(locus_data$Position)))
  selected_positions <- sample(unique(locus_data$Position), size = num_positions)
  
  # Filter the data for the selected positions
  locus_data <- locus_data %>% 
    filter(Position %in% selected_positions)
  
  ggplotly(ggplot(locus_data, aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.5)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw())
})

plots

```



### Sinusoidal II

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir//"
pattern <- "^genome15\\D"
files <- list.files(dirpath, pattern, full.names = TRUE)

process_file <- function(file) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  
  data <- read.csv(file, header = TRUE) %>% 
    select(Generation, Position, Frequency, Effect) %>% 
    group_by(Position) %>% 
    mutate(Position = factor(Position),
           herit = herit,
           loci = loci, 
           sd = sd,
           initFreq = Frequency[Generation == 1],
           h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
           postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
  
  return(data)
}

dataframes <- lapply(files, process_file)
combined_data <- bind_rows(dataframes)

plots <- lapply(unique(combined_data$loci), function(locus) {
  locus_data <- combined_data %>% 
    filter(loci == locus,
           #Generation %% (gen+1) == 0,
           Effect > 1.5)
  
  # Select up to 10 random positions
  num_positions <- min(10, length(unique(locus_data$Position)))
  selected_positions <- sample(unique(locus_data$Position), size = num_positions)
  
  # Filter the data for the selected positions
  locus_data <- locus_data %>% 
    filter(Position %in% selected_positions)
  
  ggplotly(ggplot(locus_data, aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.5)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw())
})

plots
```

