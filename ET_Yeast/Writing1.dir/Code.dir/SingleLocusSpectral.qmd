---
title: "SingleLocusSpectral"
author: "ET"
format: html
editor: visual
---

```{r}
#| echo: false
library(tidyverse)
library(cowplot)
library(lubridate)
library(future)
library(future.apply)
theme_set(theme_cowplot())

# Define a custom theme function
mytheme <- theme(
  axis.title = element_text(face = "bold"),
  axis.text = element_text(face = "italic"),
  plot.title = element_text(hjust = 0.5),
  legend.position = "none"
)

run2_fft_analysis <- function(dirpath, pattern, spectrum_span = 2) {
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  # Extract information from file names
  files_df <- data.frame(file_name = files) %>%
    mutate(
      myloci = str_extract(file_name, "(?<=_n)\\d+"),
      myGen = str_extract(file_name, "(?<=Gen)\\d*"),
      mySD = str_extract(file_name, "(?<=SD)\\d*"),
      myHert = str_extract(file_name, "(?<=H)\\d*\\.?\\d*"),
      loci_Gen = paste(myloci, myGen, sep="_"),
      SD_H2 = paste(mySD, myHert, sep="_")
    )
  
  all_results <- data.frame()
  
  # Process each file
  for (i in seq_along(files_df$file_name)) {
    file_name <- files_df$file_name[i]
    loci_Gen <- files_df$loci_Gen[i]
    SD_H2 <- files_df$SD_H2[i]
    
    file <- read.csv(file_name) %>%
      select(-Origin, -Effect) %>%
      pivot_wider(names_from = Position, values_from = Frequency, 
                  values_fill = list(Frequency = 0))
    
    ff1 <- file[, -1] # Exclude non-FFT columns
    
    # Apply FFT and calculate spectrum
    ttest <- spectrum(ff1, spans = spectrum_span, plot = FALSE)
    
    # Calculate the mean of the spectrum
    out.spect <- if (is.matrix(ttest$spec)) {
      rowMeans(ttest$spec)
    } else {
      ttest$spec
    }
    
    # Prepare results for plotting
    dd <- data.frame(
      Frequency = ttest$freq,
      File = basename(file_name),
      spec = out.spect,
      loci_Gen = loci_Gen,
      SD_H2 = SD_H2
    )
    
    all_results <- rbind(all_results, dd)
  }
  
  # Plot results with conditional filtering
  nloci <- unique(all_results$loci_Gen)
  fft1 <- list()
  for (loci in nloci) {
    threshold <- ifelse(grepl("_30$", loci), 80, ifelse(grepl("_20$", loci), 60, 30))
    fft1[[loci]] <- all_results %>%
      filter(loci_Gen == loci) %>%
      mutate(Frequency = 1 / Frequency) %>%
      filter(Frequency < threshold) %>%
      ggplot(aes(Frequency, spec, color = File)) + 
      geom_line(linewidth = 1.1) +
      facet_wrap(~SD_H2, scales = "free_y") +
      xlab("Periodicity") +
      ylab("Spectral Density") +
      mytheme
  }
  
  return(fft1)
}


```

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir"
pattern <- "^genome[1-3]_n\\d+_H0\\.(1)(SD(1|4))?(Gen(10|30|20))?\\.csv$"
#source('~/YeastProj.dir/evogen-sims/ET_Yeast/Writing1.dir/Code.dir/ComboSpec.R')
run2_fft_analysis(dirpath, pattern)
```

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir"
pattern <- "^genome[1-3]_n\\d+_H0\\.(1)(SD(1|4))?(Gen(10|30|20))?\\.csv$"
run2_fft_analysis(dirpath, pattern)
```

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome[1-3]_n\\d+_H0\\.(1)(SD(1|4))?(Gen(10|30|20))?\\.csv$"
run2_fft_analysis(dirpath, pattern)
```

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/r"
pattern <- "^genome[1-3]_n\\d+_H0\\.(1)(SD(1|4))?(Gen(10|30|20))?\\.csv$"
run2_fft_analysis(dirpath, pattern)
```

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome[1-3]_n\\d+_H0\\.(1)(SD(1|4))?(Gen(10|30|20))?\\.csv$"
run2_fft_analysis(dirpath, pattern)
```
