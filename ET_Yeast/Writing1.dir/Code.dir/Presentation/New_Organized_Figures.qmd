---
title: "New Organized Figures"
author: "E.T"
format:
  pdf:
    toc: true
    fontsize: 10pt
    fig-cap-location: bottom
    fig-numbering: false  
  html:
    toc: true
  docx:
    toc: true
editor: visual
---

> This file contains all plots for publication in sequency.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
############ Libraries and theme function ########
library(forcats)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)

theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5),
        legend.position = "none")
}
```

## 0. Fitness under C = 125

```{r, echo=FALSE,fig.width=15, fig.height=10, dpi = 1200, warning=FALSE}
#| label: Fitness_Values_Optima
# Setting up phenotypes and possible optimum values
phenotypes <- seq(-10, 10, by = 1)
optimum <- seq(-4, 4, by = 1)
C_values <- seq(25, 200, by = 25)

# Function to plot fitness for a given C value
plot_fitness <- function(C) {
  fitfx <- function(p, o){
    w = exp(-(1/C)*(p-o)^2)
    return(w)
  }

  dfw <- crossing(phenotypes, optimum) %>% 
    mutate(fitness = fitfx(phenotypes, optimum))

  dfw <- dfw %>%
    group_by(optimum) %>%
    mutate(y_at_x0 = fitfx(0, optimum),
           y_at_optimum = fitfx(optimum, optimum))

  p <- ggplot() +
    geom_line(data = dfw, 
              aes(x = phenotypes, y = fitness, color = factor(optimum)), size = 2) +  # Increased line size
    geom_hline(data = dfw, aes(yintercept = y_at_x0, color = factor(optimum)), linetype = "dashed", size = 1.5) +  # Increased line size
    geom_text(data = dfw %>% filter(phenotypes == 0), 
              aes(x = 0, y = y_at_x0, label = round(y_at_x0, 3)), 
              hjust = -1, vjust = 3, size = 3.5, fontface = "bold") +
    facet_wrap(~abs(optimum), ncol = 3) +
    labs(y = "Fitness", x = "Phenotypes")+
    theme_set(theme_bw()) +
    theme(
      text = element_text(family = "sans"),  
      legend.position = c(0.85, 0.2),
      legend.box = "square", 
      legend.box.background = element_rect(color = "black", size = 1),
      legend.key.size = unit(2, "cm"),
      legend.title = element_text(face = "bold", size = 12),  
      legend.text = element_text(face = "bold", size = 12),   
      plot.title = element_text(hjust = 0.5, size = 30, face = "bold"),  
      axis.title.x = element_text(size = 12, face = "bold"),  
      axis.title.y = element_text(size = 12, face = "bold"),  
      axis.text.x = element_text(size = 12, face = "bold", hjust = 1, angle = 45),  
      axis.text.y = element_text(size = 12, face = "bold"),   
      strip.text = element_text(size = 12, face = "bold"),
      panel.spacing = unit(1, "lines")) +
    guides(color = guide_legend(ncol = 3, title = '           Optima Values', size = 12))

  return(p)
}

# Generate and save plots for each C value
plots <- lapply(C_values, plot_fitness)

ggsave("Fitness_Values_Optima.png", plot = plots[[5]], dpi = 1200, width = 8, height = 4, units = "in", path = "New_Publication_Plots")

print(plots[[5]]) 

```

## 1. Selection Model Setting

### 1.0 Infinitessimal model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Exponential_Model
########### Infinitisimal Model #################
a = 5
b = 25
x = seq(1:100)
y <- function(x){
  Y = a*exp(-x/b)
}
Y <- y(x)
z = data.frame(Y, x)

Inf_ModPlot <- z %>% ggplot(aes(x,Y))+
  geom_line(linewidth = 2)+
  annotate("text", x = 55, y = max(Y)/1.5, label = "Exponential Effects", fontface = "bold", size = 10) +  #  Add this line
  labs(title = "A", x = "Loci", y = "Effect")+
  theme_set(theme_bw())+
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 20, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 20, face = "bold"),
        panel.spacing = unit(4, "lines"))

ggsave("Exponential_Model.png", plot = Inf_ModPlot, dpi = 1200, width = 7, height = 4, units = "in", path = "New_Publication_Plots")

Inf_ModPlot
```
### 1.1 Infinitessimal model
```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
# Generation sequence from 1 to 2000
Generation <- c(1:2000)


# Initialize Optimum vector
Optimum = rep(0, length(Generation))

Optimum <- seq(-4, 4, length.out = 2000)
df <- data.frame(Generation, Optimum) %>% filter(Generation <= 100)

 ggplot(df) + 
  geom_blank(aes(Generation, Optimum, ymax = 4)) +
 # geom_hline(yintercept = 0, color = "darkred", size = 3)+
 #annotate("text", x = 100, y = 0, 
  #         label = "Mean Phenotype", 
  #         size = 10, vjust = -.5, col = "darkred")+
  geom_hline(yintercept = 2, size = 3)+
#annotate("text", x = 100, y = 2.1, label = "Optium", size = 10, vjust = -.5, col = "black")+
  labs(title = "A", x = "Generation", y = "Optimum")+
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))

```


### 1.2 Instantaneous Selection model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Instant_Model
Opti_Gen <- tibble(Generation = seq(1:100),
                   Optimum1 = rep(c(rep(110, 10), rep(90, 10)), 5),
                   Optimum2 = rep(c(rep(105, 10), rep(95, 10)), 5))

mu_pheno = mean(Opti_Gen$Optimum1)

Opt_Data <- Opti_Gen %>% 
  filter(Generation == 0 | Generation %% 25 != 0)

Instant_Model <- ggplot()+
  geom_line(data = Opt_Data, aes(x = Generation, y = (Optimum1 - 100)/2.5), size = 1)+
  labs(title = "B", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))


ggsave("Instant_Model.png", plot = Instant_Model, dpi = 1200, width = 7, height = 4, units = "in", path = "New_Publication_Plots")
 
Instant_Model
```

### 1.3 Gradual Two Season Selection model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Gradual_Two_Season_Model
Generation <- seq(1, 100, length.out = 400) 
phenotypes <- rnorm(10000, 0, 1)
Optimum <- 10 *sin( pi* Generation / 25) /2.5
df <- data.frame(Generation, Optimum) 

GradI <- ggplot(df) + 
  geom_line(aes(Generation, Optimum), size = 3) + 
  theme_set(theme_bw())+
  labs(title = "C", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))


ggsave("Gradual_Two_Season_Model.png", plot = GradI, dpi = 1200, width = 7, height = 4, units = "in", path = "New_Publication_Plots")
 
GradI
```

### 1.4 Gradual Two Season Selection model

```{r, echo=FALSE, fig.width=8, fig.height=4, dpi = 1200, warning=FALSE}
#| label: Gradual_Four_Season_Model
# Generation sequence from 1 to 2000
Generation <- c(1:100)
phenotypes <- rnorm(10000, 0, 1)

# Signals vector
signals = c(12, 22, 10, 16) # 5, 10, 20, 30

# Initialize Optimum vector
Optimum = rep(0, length(Generation))

# Loop over each signal to calculate the Optimum
for (i in signals) {
  Optimum = Optimum + (mean(phenotypes) + sd(phenotypes)*4) * sin((22/7) * Generation / i)
}
Optimum = Optimum / 4

df <- data.frame(Generation, Optimum)

# Plot the Optimum over the first 501 generations

GradII <- ggplot(df %>% filter(Generation < 502)) + 
    geom_line(aes(Generation, Optimum), size = 3) + 
  ylim(-4, 4) +  
  labs(title = "D", x = "Generation", y = "Optimum")+
  theme_set(theme_bw())+ 
  theme(text = element_text(family = "sans"), 
        legend.position = "none",
        axis.text = element_text(size = 20, face = "bold"),
        axis.line = element_line(size = 3),
        strip.text = element_text(size = 17, face = "bold"),
        plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
        axis.title.x = element_text(margin = margin(t = 20), size = 30, face = "bold"),
        axis.title.y = element_text(margin = margin(r = 25), size = 30, face = "bold"),
        panel.spacing = unit(4, "lines"))


ggsave("Gradual_Four_Season_Model.png", plot = GradII, dpi = 1200, width = 7, height = 4, units = "in", path = "New_Publication_Plots")
 
GradII
```

## 2. Instantaneous Selection for Polygenic Traits

```{r}
###############################################################################
# Required Libraries
###############################################################################
library(parallel)
library(doParallel)
library(foreach)
library(dplyr)
library(ggplot2)
library(future)
library(purrr)
library(furrr)
library(cowplot)  
library(stringr)
###############################################################################
# Custom Theme
###############################################################################
mythemes <- theme_bw() +
  theme(
    text            = element_text(family = "sans"), 
    legend.position = "none",
    axis.text.x     = element_text(face = "bold", size = 50, angle =25, margin = margin(t = 20), hjust = 1),
    axis.text.y     = element_text(face = "bold", size = 50, angle = 15, margin = margin(r = 10)),
    axis.line       = element_line(size = 3),
    plot.title      = element_text(hjust = 0.01, face = "bold", size = 70, margin = margin(b = 1, unit = "lines")),
    plot.margin     = unit(c(5, 1, 1, 1), "lines"),
    axis.title.x    = element_text(size = 50, face = "bold", margin = margin(t = 30)),
    axis.title.y    = element_text(size = 50, face = "bold", margin = margin(r = 35)),
    strip.text      = element_text(size = 50, face = "bold"),
    panel.spacing   = unit(5, "lines"),
    panel.grid      = element_blank()
  )

```


### 2.1. Polygenic Instantaneous AF

```{r, warning=FALSE, fig.width = 30, fig.height = 25, dpi = 1200, echo=FALSE}
#| label: Instant_Poly_AF

###############################################################################
# Function to extract H, SD, and Gen values from filename
###############################################################################
extract_params <- function(filename) {
  # Extract values using regular expressions
  h_value  <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  
  # Convert to numeric
  h_value  <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  
  return(list(H = h_value, SD = sd_value, Gen = gen_value))
}

###############################################################################
# Main function to read files, process data, and create the plot
###############################################################################
create_plot <- function(path, pattern) {
  # 1. List all relevant files using the provided path and pattern
  file_list <- list.files(path = path, pattern = pattern, full.names = TRUE)
  
  # 2. Read and combine datasets with extracted parameters
  combined_dataset <- map_df(file_list, function(file) {
    data <- read.csv(file) %>% filter(Generation <= 1000)
    params <- extract_params(file)
    data <- data %>%
      mutate(H = params$H, SD = params$SD, Gen = params$Gen)
    return(data)
  })
  
  # 3. Randomly select at most 14 positions for clarity
  set.seed(123)
  unique_positions <- unique(combined_dataset$Position)
  selected_positions <- sample(unique_positions, size = min(15, length(unique_positions)))
  
  # 4. Filter dataset to include only selected positions
  filtered_dataset <- combined_dataset %>% 
    filter(Position %in% selected_positions)
  
  # 5. Create a plot with faceting by H, SD, and Gen
  Freq_Instant_Poly <- filtered_dataset %>%
    mutate(
      H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen)
    ) %>% 
    ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
    geom_line(aes(
      color = ifelse(Position == 323379, "highlighted", "other"),
      size  = ifelse(Position == 323379, 3, 1)
    )) +
    scale_color_manual(values = c("highlighted" = "magenta", "other" = "grey")) +
    scale_size_identity() +
    facet_wrap(~ H_SD_Gen, scales = "free", ncol = 2, dir = "v") +
    theme_bw() +
    labs(title = "A) Allele Frequency", x = "Generation", y = "Frequency") +
    mythemes
  
  return(Freq_Instant_Poly)
}

path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir"
pattern <- "genome10_n100_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv"
Freq_Instant_Poly <- create_plot(path, pattern)

#############################################################
################## Saving the plot ##########################
############################################################

ggsave(
  filename = "Instant_Poly_AF.png",
  plot     = Freq_Instant_Poly,
  dpi      = 600,
  width    = 30,
  height   = 25,
  units    = "in",
  path     = "New_Publication_Plots"  # Adjust to your preferred directory
)
# 
 print(Freq_Instant_Poly)

```

### 2.2. Polygenic Instantaneous Phenotypes

```{r, warning=FALSE, fig.width = 20, fig.height = 15, dpi = 1200, echo=FALSE}
#| label: Instant_Poly_Pheno

# # Function to extract H, SD, Gen, and Replicate values from filename
# extract_params <- function(filename) {
#   # Extract the values using regular expressions
#   h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
#   sd_value <- str_extract(filename, "(?<=SD)\\d+")
#   gen_value <- str_extract(filename, "(?<=Gen)\\d+")
#   replicate_value <- str_extract(filename, "(?<=MeanPhenotypes)\\d+")
# 
#   # Convert to numeric
#   h_value <- as.numeric(h_value)
#   sd_value <- as.numeric(sd_value)
#   gen_value <- as.numeric(gen_value)
#   replicate_value <- as.numeric(replicate_value)
# 
#   return(list(H = h_value, SD = sd_value, Gen = gen_value, Replicate = replicate_value))
# }
# 
# # List all relevant files using a pattern that captures any number of replicates
# file_list <- list.files(
#   path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir",
#   pattern = "MeanPhenotypes\\d+_n100_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv",
#   full.names = TRUE
# )
# 
# # Read and combine datasets with extracted parameters
# combined_dataset <- map_df(file_list, function(file) {
#   data <- read.csv(file)
#   params <- extract_params(file)
#   data <- data %>%
#     mutate(
#       H = params$H,
#       SD = params$SD,
#       Gen = params$Gen,
#       Replicate = params$Replicate,
#       Optimum = ifelse(Optimum == max(Optimum, na.rm = TRUE), "High", "Low")
#     ) %>% 
#     filter(Replicate != 1)
#   
#   return(data)
# })
# 
# # Filter the data to include Generation 1 and every generation divisible by 90, up to Generation 2000
# filtered_data <- combined_dataset %>%
#   filter(
#    # (Generation == 1 | (Generation %% 150 == 0))
#   )
# 
# # Create the boxplot with faceting by H, SD, and Gen
# Pheno_Instant_Poly <- filtered_data %>% 
#   mutate(SD_Gen = paste0("SD = ", SD, " Gen = ", Gen),
#          H_SD_Gen = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen),
#          H_SD = paste0("H = ", H, " SD = ", SD),
#          H_label = paste0("H = ", H)) %>% 
#   ggplot(aes(x = factor(Generation), y = Phenotype)) + #
#   geom_line(size = 1) +
#   facet_wrap(~ H_SD_Gen, scales = "free", ncol = 2) +
#   theme_set(theme_bw())+ 
#   labs(title = "B", x = "Generation", y = "Phenotype") +
#   theme(text = element_text(family = "sans"), 
#         legend.position = "none",
#         axis.text.x = element_text(face = "bold", 
#                                    size = 30, angle  = 15, margin = margin(t = 10)),
#         axis.text.y = element_text(face = "bold", 
#                                    size = 30, angle = 15, margin = margin(r = 10)),
#         axis.line = element_line(size = 2),
#         plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
#         axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 30)),
#         axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 35)),
#         strip.text = element_text(size = 40, face = "bold"),
#         panel.spacing = unit(5, "lines"),
#         panel.grid = element_blank()
#     )
# 
# 
# ggsave("Instant_Poly_Pheno.png", plot = Pheno_Instant_100 Loci, dpi = 1200, width = 25, height = 15, units = "in", path = "New_Publication_Plots")
# 
# print(Pheno_Instant_Poly)

# Function to extract H, SD, Gen, and Replicate values from filename
extract_params <- function(filename) {
  # Extract the values using regular expressions
  h_value <- str_extract(filename, "(?<=H)\\d\\.\\d")
  sd_value <- str_extract(filename, "(?<=SD)\\d+")
  gen_value <- str_extract(filename, "(?<=Gen)\\d+")
  replicate_value <- str_extract(filename, "(?<=MeanPhenotypes)\\d+")

  # Convert to numeric
  h_value <- as.numeric(h_value)
  sd_value <- as.numeric(sd_value)
  gen_value <- as.numeric(gen_value)
  replicate_value <- as.numeric(replicate_value)

  return(list(H = h_value, SD = sd_value, Gen = gen_value, Replicate = replicate_value))
}

# List all relevant files using a pattern that captures any number of replicates
file_list <- list.files(
  path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir",
  pattern = "MeanPhenotypes\\d+_n100_H(0\\.1|0\\.8)SD(1|4)Gen(10|30)\\.csv",
  full.names = TRUE
)

# Read and combine datasets with extracted parameters
combined_dataset <- map_df(file_list, function(file) {
  data <- read.csv(file)
  params <- extract_params(file)
  data <- data %>%
    mutate(
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Replicate = params$Replicate,
      Optimum = ifelse(Optimum == max(Optimum, na.rm = TRUE), "High", "Low")
    ) %>% 
    filter(Generation <= 1000,
           (H == 0.1 & SD == 1 & Gen == 10) | 
        (H == 0.8 & SD == 4 & Gen == 30))
  
  return(data)
})

# OPTIONAL: Filter the data if needed
# (Currently commented out. Uncomment if you want to filter only certain generations.)
# filtered_data <- combined_dataset %>%
#   filter(
#     (Generation == 1 | (Generation %% 150 == 0))
#   )

# If no filtering is actually required, just rename for clarity
filtered_data <- combined_dataset

# Create the plot
Pheno_Instant_Poly <- filtered_data %>% 
  mutate(
    SD_Gen = paste0("SD = ", SD, " Gen = ", Gen),
    H_SD_Gen = paste0("h\u00B2 = ", H, " SD = ", SD, " Gen = ", Gen),
    H_SD = paste0("h\u00B2 = ", H, " SD = ", SD),
    H_label = paste0("h\u00B2 = ", H)
  ) %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +          
  geom_line(aes(group = Replicate),                    
            color = "gray50", 
            alpha = 0.5, 
            size = 1) +
  stat_summary(fun = mean,                              
               aes(group = 1), 
               geom = "line", 
               color = "red", 
               alpha = 1, 
               size = 3) +
  facet_wrap(~ H_SD_Gen, scales = "free", ncol = 1, dir = "v") +
  theme_bw() +
  labs(title = "B) Phenotypes", x = "Generation", y = "Phenotype") +
  mythemes

# Save plot
ggsave(
  "Instant_Poly_Pheno.png", 
  plot = Pheno_Instant_Poly, 
  dpi = 1200, 
  width = 25, 
  height = 15, 
  units = "in", 
  path = "New_Publication_Plots"
)
# 
 print(Pheno_Instant_Poly)
```

### 2.3. Polygenic Instantaneous Spec Analysis

```{r, warning=FALSE, fig.width = 20, fig.height = 15, dpi = 1200, echo=FALSE}
# mythemes <- theme_set(theme_bw())+
#     theme(text = element_text(family = "sans"),
#         legend.position = "none",
#         axis.text.x = element_text(face = "bold", size = 30, angle = 15,
#                                    hjust = 1, margin = margin(t = 10)),
#         axis.text.y = element_text(face = "bold",
#                                    size = 30, angle = 15, margin = margin(r = 10)),
#         axis.line = element_line(size = 2),
#         plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
#         axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 30)),
#         axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 35)),
#         strip.text = element_text(size = 40, face = "bold"),
#         panel.spacing = unit(5, "lines"),
#         panel.grid = element_blank()
#     )
# 
# run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
#   # Load necessary libraries
#   library(parallel)
#   library(doParallel)
#   library(foreach)
#   library(dplyr)
#   library(ggplot2)
#   library(cowplot)
#   library(stringr)
# 
#   # Create the directory to save images if it doesn't exist
#   last_dir <- basename(normalizePath(folder_path))
#   save_dir <- file.path("myimages", last_dir)
#   if (!dir.exists(save_dir)) {
#     dir.create(save_dir, recursive = TRUE)
#   }
# 
#   # Get a list of all replicate files matching the pattern
#   file_list <- list.files(
#     path = folder_path,
#     pattern = pattern,
#     full.names = TRUE
#   )
# 
#   # Check if files are found
#   if (length(file_list) == 0) {
#     stop("No files found with the given pattern.")
#   }
# 
#   # Create a data frame with filenames and extract parameter information
#   files_df <- data.frame(file_name = file_list) %>%
#     mutate(
#       base_name = basename(file_name),
#       genome = str_extract(base_name, "genome\\d+") %>% str_remove("genome"),
#       n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
#       H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
#       SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),  # Adjusted regex
#       SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
#       Gen = str_extract(base_name, "Gen\\d+"),
#       Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen"))
#     ) %>%
#     mutate(
#       n = as.numeric(n),
#       H = as.numeric(H),
#       SD = as.numeric(SD),
#       Gen = as.numeric(Gen),
#       param_combination = paste0(
#         "n_", n, "_H", H,
#         ifelse(!is.na(SD), paste0("_SD", SD), ""),
#         ifelse(!is.na(Gen), paste0("_Gen", Gen), "")
#       )
#     )
# 
#   # Set up parallel backend
#   num_cores <- detectCores()
#   num_cores_to_use <- max(1, num_cores - 16)  # Leave at least 16 cores unused
# 
#   cl <- makeCluster(num_cores_to_use)
#   registerDoParallel(cl)
# 
#   # Read and combine data from all replicate files in parallel
#   combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
#     file <- files_df$file_name[i]
#     params <- files_df[i, ]
#     df <- read.csv(file)
#     data <- df %>%
#       mutate(
#         allele_id = as.factor(Position),
#         generation = as.numeric(Generation),
#         allele_frequency = Frequency,
#         sample_size = 10000,
#         file = params$base_name,
#         genome = params$genome,
#         n = params$n,
#         H = params$H,
#         SD = params$SD,
#         Gen = params$Gen,
#         param_combination = params$param_combination
#       ) %>%
#       dplyr::select(
#         allele_id, generation, allele_frequency, sample_size, file,
#         genome, n, H, SD, Gen, param_combination
#       )
#     data
#   }
#   combined_data <- bind_rows(combined_data_list)
# 
#   # Calculate the mean allele frequency for each grouping
#   mean_allele_data <- combined_data %>%
#     group_by(generation, n, genome, H, SD, Gen, param_combination) %>%
#     summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
# 
#   # Create time series objects
#   ts_data_list <- mean_allele_data %>%
#     group_by(n, genome, H, SD, Gen, param_combination) %>%
#     summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
# 
#   # Compute spectral density estimates in parallel
#   spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
#     ts_data <- ts_data_list$ts_data[[i]]
#     spectrum(ts_data, spans = spectrum_span, plot = FALSE)
#   }
# 
#   # Prepare data for plotting in parallel
#   plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
#     spec_result <- spec_results_list[[i]]
#     params <- ts_data_list[i, ]
#     # Compute period
#     period <- 1 / spec_result$freq
#     data.frame(
#       Period = period,
#       Spectrum = spec_result$spec,
#       n = params$n,
#       genome = params$genome,
#       H = params$H,
#       SD = params$SD,
#       Gen = params$Gen,
#       param_combination = params$param_combination
#     ) %>% filter(genome!=1)
#   }
# 
#   # Stop cluster
#   stopCluster(cl)
# 
#   # Combine all plot data
#   plot_data <- bind_rows(plot_data_list)
# 
#   # Filter Period after grouping by param_combination
#   plot_data <- plot_data %>%
#     group_by(param_combination) %>%
#     mutate(
#       # Set threshold based on Gen value
#       threshold = case_when(
#         Gen == 10 ~ 40,
#         #Gen == 20 ~ 50,
#         Gen == 30 ~ 80,
#         TRUE ~ max(Period)  # Default threshold if Gen is not 10, 20, or 30
#       )
#     ) %>%
#     filter(Period < threshold & H == 0.1 & SD == 1 & Gen == 10 |
#              H == 0.8 & SD == 4 & Gen == 30) %>%
#     ungroup()
# 
#   # Prepare data for faceting
#   plot_data <- plot_data %>%
#     mutate(
#       H_label = paste0("H = ", H),
#       SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
#       Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
#       n_label = paste0("n_", n),
#       SD_Gen = paste0("SD = ", SD, " Gen = ", Gen),
#       H_SD_Gen = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen)
#     )
# 
#   # Generate plots for each unique combination of n and Gen
#   unique_n_Gen_values <- unique(paste0("n_", plot_data$n))
# 
#   fft_plots <- list()
# 
#   for (n_Gen_value in unique_n_Gen_values) {
#     # Split n_Gen_value back into n and Gen
#     n_value <- as.numeric(str_extract(n_Gen_value, "(?<=n_)[^_]+"))
#     Gen_value <- as.numeric(str_extract(n_Gen_value, "(?<=Gen)[^_]+"))
# 
#     plot_df <- plot_data %>%
#       filter(n == n_value)
# 
#     # Determine the faceting variables
#     if (all(plot_df$SD_label == "No SD")) {
#       # If SD is missing, facet only by H_label
#       facet_formula <- ~ H_label
#     } else {
#       facet_formula <- ~ H_SD_Gen
#     }
# 
#     p <- ggplot(plot_df, aes(x = Period, y = Spectrum, color = genome, group = genome)) +
#       geom_line(linewidth = 1.1) +
#       facet_wrap(facet_formula, scales = "free", ncol = 2) +
#       scale_y_continuous(labels = scales::label_number())
# 
#     fft_plots[[n_Gen_value]] <- p
# 
#     # # Save the plot with n and Gen in filename
#     # filename <- paste0("Spectral_", n_Gen_value, ".png")
#     # ggsave(filename = file.path(save_dir, filename), plot = p)
#   }
# 
#   return(fft_plots)
# }
# 
# dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
# #source('~/YeastProj.dir/evogen-sims/ET_Yeast/Writing1.dir/Code.dir/ComboSpec.R')
# pattern = "^genome\\d+_n100_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"
# 
# spec_plots <- run_fft_analysis(dirpath, pattern)
# spec_plot1 <- spec_plots[1]
# Instant_Poly_Spec <- spec_plot1$n_100 +
#     labs(title = "C", x = "Period (Generations)", y = "Spectral Density") + mythemes
# 
# ggsave("Instant_Poly_SpecAnalysis.png", plot = Instant_100 Loci_Spec, dpi = 1200, width = 25, height = 15, units = "in", path = "New_Publication_Plots")



# Optionally save again (already saved inside the function above, but you can do it here too):
# ggsave("Instant_Poly_SpecAnalysis_Combined.png", 
#        plot = final_plot, 
#        dpi = 1200, width = 25, height = 15, units = "in", 
#        path = "New_Publication_Plots")

#print(final_plot)

```

```{r, warning=FALSE, fig.width = 20, fig.height = 15, echo=FALSE, dpi = 1200}
#| label: Instant_Poly_SpecAnalysis

###############################################################################
################## Function for spectral analysis ############################
###############################################################################

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  
  # Create the directory to save images if it doesn't exist
  last_dir <- basename(normalizePath(folder_path))
  save_dir <- file.path("myimages", last_dir)
  if (!dir.exists(save_dir)) {
    dir.create(save_dir, recursive = TRUE)
  }
  
  #### Function for AF files
  file_list <- list.files(
    path       = folder_path,
    pattern    = pattern,
    full.names = TRUE
  )
  
###########################################
######## DataFrame for all replicates #####
###########################################
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      genome    = str_extract(base_name, "genome\\d+") %>% str_remove("genome"),
      n         = str_extract(base_name, "_n\\d+")     %>% str_remove("_n"),
      H         = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD        = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD        = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen       = str_extract(base_name, "Gen\\d+"),
      Gen       = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen"))
    ) %>%
    mutate(
      n   = as.numeric(n),
      H   = as.numeric(H),
      SD  = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0(
        "n_", n, "_H", H,
        ifelse(!is.na(SD),  paste0("_SD", SD),  ""),
        ifelse(!is.na(Gen), paste0("_Gen", Gen), "")
      )
    )

###...................................#######
### parallelization for files reading #######
###...................................#######
  
  num_cores <- detectCores()
  num_cores_to_use <- max(1, num_cores - 16)  # leave at least 16 cores free
  
  cl <- makeCluster(num_cores_to_use)
  registerDoParallel(cl)
  
  # Read and combine data in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name),
                                .packages = c("dplyr", "stringr")) %dopar% {
    file   <- files_df$file_name[i]
    params <- files_df[i, ]
    df     <- read.csv(file)
    df %>%
      mutate(
        allele_id        = as.factor(Position),
        generation       = as.numeric(Generation),
        allele_frequency = Frequency,
        sample_size      = 10000,
        file             = params$base_name,
        genome           = params$genome,
        n                = params$n,
        H                = params$H,
        SD               = params$SD,
        Gen              = params$Gen,
        param_combination= params$param_combination
      ) %>%
      dplyr::select(
        allele_id, generation, allele_frequency, sample_size, file,
        genome, n, H, SD, Gen, param_combination
      )
  }
  
  # Combine data into one data frame
  combined_data <- bind_rows(combined_data_list)
  
  stopCluster(cl)
  
  # Compute mean allele frequency for each generation/param
  mean_allele_data <- combined_data %>%
    group_by(generation, n, genome, H, SD, Gen, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")

####'''''''''''''''''''''''#####
#### Convert to time series ####
####'''''''''''''''''''''''#####

  ts_data_list <- mean_allele_data %>%
    group_by(n, genome, H, SD, Gen, param_combination) %>%
    summarize(
      ts_data = list(ts(mean_allele_frequency,
                        start = min(generation),
                        frequency = 1)), #frequency = 1
      .groups = 'drop'
    )
  
### Compute spectral density ####
  
  spec_results_list <- lapply(ts_data_list$ts_data, function(ts_data) {
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  })
  
  # Prepare data for plotting
  plot_data_list <- list()
  for (i in seq_along(spec_results_list)) {
    spec_result <- spec_results_list[[i]]
    params      <- ts_data_list[i, ]
    # compute period
    period      <- 1 / spec_result$freq
    
    df_spec <- data.frame(
      Period    = period,
      Spectrum  = spec_result$spec,
      n         = params$n,
      genome    = params$genome,
      H         = params$H,
      SD        = params$SD,
      Gen       = params$Gen,
      param_combination = params$param_combination
    ) #%>%
      # Example filter: remove genome=1 if you like
      #filter(genome != 1)
    
    plot_data_list[[i]] <- df_spec
  }
  
  # Combine spectral data
  plot_data <- bind_rows(plot_data_list)
  
  # Limit Period by threshold for each param_combination + filter to 2 combos
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(
      threshold = case_when(
        Gen == 10 ~ 40,  # keep period < 40 if Gen=10
        Gen == 30 ~ 80,  # keep period < 80 if Gen=30
        TRUE      ~ max(Period)
      )
    ) %>%
    ungroup() %>%
    # Keep only the two combos: (H=0.1,SD=1,Gen=10) or (H=0.8,SD=4,Gen=30)
    filter(
      Period < threshold &
      (
        (H == 0.1 & SD == 1 & Gen == 10) | 
        (H == 0.8 & SD == 4 & Gen == 30)
      )
    )
  
  # Create label for facet or titles
  plot_data <- plot_data %>%
    mutate(
      H_label  = paste0("H = ", H),
      SD_label = ifelse(!is.na(SD),  paste0("SD = ", SD),  "No SD"),
      Gen_label= ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      H_SD_Gen = paste0("h\u00B2 = ", H, " SD=", SD, " Gen=", Gen)
    )
  
  spec_plot_comb1 <- ggplot( plot_data, #plot_data_comb1, 
                            aes(x = Period, y = Spectrum, 
                                color = genome, group = genome)) +
    geom_line(linewidth = 3) +
    facet_wrap(~ H_SD_Gen, scales = "free", ncol = 1) +
    scale_y_continuous(labels = scales::label_number())+
    #scale_y_continuous(labels = scales::label_scientific())+
    labs(
      title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density") +
    mythemes
  
  return(spec_plot_comb1)
}

###############################################################################
################## Run The Function for Spectral Analysis ####################
###############################################################################

dirpath   <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
my_pattern<- "^genome\\d+_n100_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"


final_plot <- run_fft_analysis(dirpath, my_pattern)

ggsave("Instant_Poly_SpecAnalysis_Combined.png",
       plot = final_plot,
       dpi = 1200, width = 25, height = 15, units = "in",
       path = "New_Publication_Plots")


final_plot
```

### 2.4. Combined Polygenic Instantaneous for AF, Pheno, and Spec Analysis

```{r, warning=FALSE, fig.width = 30, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Instant_Poly_AF_Pheno_SpecAnalysis

# First, combine Freq_Instant_100 Loci and Pheno_Instant_100 Loci side-by-side
top_row <- plot_grid(
  Pheno_Instant_Poly, #+ theme(plot.margin = margin(l = 20)),
  final_plot, #+ theme(plot.margin = margin(r = 20)),
  ncol = 1, 
  rel_heights = c(1, 1)
)

# Then place final_plot below them
combined_plot <- plot_grid(
  Freq_Instant_Poly, #+ 
    #theme(plot.margin = margin(t = 20, r = 1, unit = "lines")),
  top_row, #+ 
    #theme(plot.margin = margin(t = 20, l = 1, unit = "lines")),
  ncol = 2,
  rel_widths = c(2, 1)
)


ggsave(
  filename = "Instant_Poly_AF_Pheno_SpecAnalysis.png",
  plot     = combined_plot,
  dpi      = 360,
  width    = 50,
  height   = 30,
  units    = "in",
  path     = "New_Publication_Plots"
)
combined_plot  

```

## 3. Genetic Architecture: Instantaneous models

### 3.1. AF monogenic, oligogenic, and Polygenic

```{r, warning=FALSE, fig.width = 20, fig.height = 15, dpi = 1200, echo=FALSE}
#| label: AF_Mono_Ologo_Poly_Instant
read_files <- function() {
  file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/", pattern = "genome10_n(1|10)_H0\\.(1|5|8)(SD(1|2|4))?Gen(10|20|30)\\.csv$", full.names = TRUE)
  
  datasets <- lapply(file_list, function(file) {
    data <- read.csv(file)
    matches <- str_match(file, "genome10_n([0-9]+)_H([0-9\\.]+)SD([0-9]+)Gen([0-9]+)")
    selection_type <- as.numeric(matches[2])
    selection_label <- ifelse(selection_type == 1, "1 Locus",
                              ifelse(selection_type == 10, "10 Loci", "100 Loci"))
    
    data <- data %>% 
      mutate(Selection = selection_label,
             H = as.numeric(matches[3]),
             SD = as.numeric(matches[4]),
             Gen = as.numeric(matches[5]))
    return(data)
  })
  
  return(bind_rows(datasets))
}

#########################
### Read in the data ####
##########################

Genome_dataset <- read_files() %>% 
  filter(Generation <= 1000) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "1 Locus",  
                                 "10 Loci", 
                                 "100 Loci"))

# select up to 15 unique positions for each group
set.seed(123)
selected_positions <- Genome_dataset %>%
  group_by(Selection) %>%
  group_map(~ {
    positions <- unique(.x$Position)
    if (length(positions) > 30) {
      sample(positions, 30)
    } else {
      positions
    }
  }) %>%
  unlist()

# Filter dataset to include only selected positions
filtered_dataset <- Genome_dataset %>%
  filter(Position %in% selected_positions)

filtered_dataset <- filtered_dataset %>%
  filter((H == 0.1 & SD == 1 & Gen == 10) |
         (H == 0.5 & SD == 2 & Gen == 20) |
          (H == 0.8 & SD == 4 & Gen == 30))

filtered_dataset <- filtered_dataset %>%
  mutate(Color = case_when(
    Selection == "1 Locus" ~ "magenta",
    Selection == "10 Loci" & Position == "427101" ~ "magenta", #1037246
    Selection == "100 Loci" & Position == "323379" ~ "magenta", # 201349
    TRUE ~ "black"
  ),
  LineSize = case_when(
    Color == "magenta" ~ 2,
    TRUE ~ 0.5
  ))

# Create the plot

AF_Mono_Ologo_Poly_Instant <- filtered_dataset %>%
  filter(Generation <= 1000) %>%
  mutate(H_SD_Gen = paste0("H = ", H, " SD =  ", SD, " Gen = ", Gen)) %>% 
  mutate(
    H_SD_Gen_short = case_when(
      H == 0.1 & SD == 1 & Gen == 10 ~ "Min combo",
      H == 0.5 & SD == 2 & Gen == 20 ~ "Med combo",
      H == 0.8 & SD == 4 & Gen == 30 ~ "High combo"
    )) %>%
  mutate(
    H_SD_Gen_short = fct_relevel(H_SD_Gen_short, "Min combo", "Med combo", "High combo")
  ) %>%
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position), 
             color = Color, size = LineSize)) +
  geom_line(alpha = 0.7) + 
  scale_color_identity() +
  scale_size_identity() +
  facet_grid(H_SD_Gen_short ~ Selection) +
  labs(title = "A) Allele Frequency", x = "Generation", y = "Frequency") +
  theme_bw() +
  mythemes
# 
 AF_Mono_Ologo_Poly_Instant
```

### 3.2. Pheno monogenic, oligogenic, and Polygenic

```{r, warning=FALSE, fig.width = 20, fig.height = 10, dpi = 1200, echo=FALSE}
#| label: Pheno_Mono_Oligo_Poly_Instant

# Directory path and file-name pattern
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n(1|10)_H0\\.(1|5|8)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$"

#---------------------------------------------------------
# Function to process phenotype files
#---------------------------------------------------------
process_files <- function(dirpath, pattern) {
  
  # List matching files
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  dataframes <- list()
  
  for (file in files) {
    
    # Extract replicate, H, loci, SD, and Gen from filename
    replicate <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    H         <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci      <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    SD        <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    Gen       <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    # Assign a selection label
    selection_label <- ifelse(loci == 1, "1 Locus",
                       ifelse(loci == 10, "10 Loci", "100 Loci"))
    
    # Read the CSV data
    data <- read.csv(file, header = TRUE) %>%
      mutate(
        # Add the extracted parameters as columns
        H         = H,
        loci      = loci,
        SD        = SD,
        Gen       = Gen,
        replicate = as.factor(replicate),
        Selection = selection_label,
        
        # A few helpful extra annotations
        h2_sd    = paste0("h2 = ", H, " sd = ", SD),
        loci_gen = paste0("loci = ", loci, " gen = ", Gen),
        Fitness  = exp(-(1/125) * (Phenotype - Optimum)^2),
       # Optimum  = ifelse(
       #   Optimum == max(Optimum, na.rm = TRUE), "High", "Low"
        #)
      ) %>%
      filter(
        Generation <= 1000
      )
    
    dataframes[[file]] <- data
  }
  
  # Combine all dataframes into one
  combined_data <- bind_rows(dataframes)
  
  # ------------------------------------------------------------------------
  # Remove replicates 1, 13, and 28
  # Note: replicate is a factor -> compare against character "1","13","28"
  # ------------------------------------------------------------------------
  combined_data <- combined_data %>%
    filter(!replicate %in% c("1", "13", "28"))
  
  return(combined_data)
}

#---------------------------------------------------------
# Process the files and get combined data
#---------------------------------------------------------
combined_data <- process_files(dirpath, pattern)

#---------------------------------------------------------
# Plotting phenotypes
#---------------------------------------------------------
# Pheno_Mono_Oligo_Poly <- combined_data %>%
#   mutate(
#     Sel_H_SD_Gen = paste0(Selection, ": H = ", H, " SD = ", SD, " Gen = ", Gen),
#     H_SD_Gen = paste0( "H = ", H, " SD = ", SD, " Gen = ", Gen)
#   ) %>% 
#   # Final filter for specific H, SD, and Gen combos
#   filter(
#     (H == 0.1 & SD == 1 & Gen == 10) |
#     (H == 0.8 & SD == 4 & Gen == 30)
#   ) %>%
#   ggplot(aes(x = Generation, y = Phenotype)) +
#   geom_line(aes(group = replicate),
#             color = "gray50", 
#             alpha = 0.5, 
#             size = 0.5) +
#   stat_summary(fun = mean,
#                aes(group = 1), 
#                geom = "line", 
#                color = "red", 
#                alpha = 0.7, 
#                size = 3) +
#   #facet_wrap(~ Sel_H_SD_Gen, scales = "free") +
#   facet_grid(H_SD_Gen ~ Selection, scales = "free") +
#   labs(
#     title = "B) Phenotypes",
#     x = "Generation",
#     y = "Phenotypes"
#   ) +
#   theme_bw() +
#   mythemes


Pheno_Mono_Oligo_Poly <- combined_data %>%
  # 1) Filter for the combos you want
  filter(
    (H == 0.1 & SD == 1 & Gen == 10) |
    (H == 0.8 & SD == 4 & Gen == 30)
  ) %>%
  mutate(
    H_SD_Gen_short = case_when(
      H == 0.1 & SD == 1 & Gen == 10 ~ "Min combo",
      H == 0.8 & SD == 4 & Gen == 30 ~ "High combo"
    )
  ) %>%
  mutate(
    H_SD_Gen_short = fct_relevel(H_SD_Gen_short, "Min combo", "High combo")
  ) %>%
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line(aes(group = replicate),
            color = "gray50", alpha = 0.5, size = 0.5) +
  stat_summary(
    fun = mean, aes(group = 1), geom = "line",
    color = "red", alpha = 0.7, size = 3
  ) +
  facet_grid(H_SD_Gen_short ~ Selection, scales = "free") +
  labs(
    title = "B) Phenotypes",
    x = "Generation",
    y = "Phenotypes"
  ) +
  theme_bw() +
  mythemes

# 
 Pheno_Mono_Oligo_Poly

```

### 3.3. Spec_Analysis monogenic, oligogenic, and Polygenic

```{r, warning=FALSE, fig.width = 10, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: Spec_Analysis_Mono_Oligo_Poly_Instant

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  
  # 1) Find all files
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replicate = str_extract(base_name, "genome\\d+"), 
      loci = str_extract(base_name, "_n\\d+") %>%
        str_remove("_n") %>%
        as.numeric(),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>%
        str_remove("_H") %>%
        as.numeric(),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?") %>%
        str_remove("SD") %>%
        as.numeric(),
      Gen = str_extract(base_name, "Gen\\d+") %>%
        str_remove("Gen") %>%
        as.numeric(),
      
      # Convert numeric `loci` into a selection label
      Selection = case_when(
        loci == 1 ~ "1 Locus",
        loci == 10 ~ "10 Loci",
        TRUE ~ "Unknown"
      ),
      
      # Build a param string (not mandatory, but handy)
      param_combination = paste0(
        "loci_", loci, "_H", H, 
        ifelse(!is.na(SD), paste0("_SD", SD), ""), 
        ifelse(!is.na(Gen), paste0("_Gen", Gen), "")
      )
    )

  # 3) Set up parallel backend
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))  
  registerDoParallel(cl)

  # 4) Read & combine data from each file in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), 
                                .packages = c("dplyr", "stringr")) %dopar% {
    file  <- files_df$file_name[i]
    params <- files_df[i, ]
    
    df <- read.csv(file) 
    data <- df %>%
      mutate(
        allele_id       = as.factor(Position),
        generation      = as.numeric(Generation),
        allele_frequency= Frequency,
        file            = params$base_name,
        replicate       = params$replicate,
        loci            = params$loci,
        H               = params$H,
        SD              = params$SD,
        Gen             = params$Gen,
        Selection       = params$Selection,
        param_combination = params$param_combination
      ) %>%
       # filter(
       #   replicate != 1, #"genome1",
       #   replicate != 13, #"genome13",
       #   replicate != 28 #"genome28"
       # ) %>%
      dplyr::select(
        allele_id, generation, allele_frequency, replicate, 
        loci, H, SD, Gen, Selection, param_combination
      )
    data
  }
  combined_data <- bind_rows(combined_data_list)

  # 5) Filter: Use the *Selection* column for 1 Locus or 100 Loci
  filtered_data <- combined_data %>%
    filter(
      (Selection == "1 Locus"  & H == 0.1 & SD == 1 & Gen == 10) |
      (Selection == "1 Locus"  & H == 0.8 & SD == 4 & Gen == 30) |
      (Selection == "10 Loci" & H == 0.1 & SD == 1 & Gen == 10) |
      (Selection == "10 Loci" & H == 0.8 & SD == 4 & Gen == 30)
    )

  # 6) Compute mean allele frequency
  mean_allele_data <- filtered_data %>%
    group_by(generation, loci, replicate, H, SD, Gen, Selection, param_combination) %>%
    summarize(
      mean_allele_frequency = mean(allele_frequency), 
      .groups = "drop"
    )

  # 7) Turn each replicate's data into a time series
  ts_data_list <- mean_allele_data %>%
    group_by(loci, replicate, H, SD, Gen, Selection, param_combination) %>%
    summarize(
      ts_data = list(ts(mean_allele_frequency, 
                        start = min(generation),
                        frequency = 1)),
      .groups = 'drop'
    )

  # 8) Compute spectral density in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }

  # 9) Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list),
                            .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    
    data.frame(
      Period    = period,
      Spectrum  = spec_result$spec,
      loci      = params$loci,
      replicate = params$replicate,
      H         = params$H,
      SD        = params$SD,
      Gen       = params$Gen,
      Selection = params$Selection,
      param_combination = params$param_combination
    )
  }

  stopCluster(cl)  # close the cluster
  
  # Combine for plotting
  plot_data <- bind_rows(plot_data_list) %>%
    group_by(param_combination) %>%
    mutate(
      # Example threshold logic:
      threshold = case_when(
        Gen == 10 ~ 40,
        Gen == 20 ~ 50,
        Gen == 30 ~ 80,
        TRUE      ~ max(Period)
      )
    ) %>%
    # Filter to exclude large periods:
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      H_SD_Gen  = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen),
      H_SD      = paste0("H = ", H, " SD = ", SD),
      H_SD_Gen_short = case_when(
            H == 0.1 & SD == 1 & Gen == 10 ~ "Min combo",
            H == 0.8 & SD == 4 & Gen == 30 ~ "High combo")
    ) %>%
    mutate(H_SD_Gen_short = fct_relevel(H_SD_Gen_short, "Min combo", "High combo"))

  # 10) Plot
  if (any(is.na(plot_data$Gen))) {
    # If some Gen are missing
    fft_plots <- ggplot(
      plot_data, 
      aes(x = Period, y = Spectrum, color = replicate, group = replicate)
    ) +
      geom_line(linewidth = 1.5) +
      facet_wrap(H_SD ~ Selection, scales = "free") +
      scale_y_continuous(labels = scales::label_number())+
      labs(title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density") +
      mythemes
  } else {
    # All Gens exist
    fft_plots <- ggplot(
      plot_data %>% mutate(facetgrouping = paste0(Selection, ": ", H_SD_Gen_short)) %>% 
        mutate(facetgrouping = fct_relevel(facetgrouping, "1 Locus: Min combo", 
                                           "1 Locus: High combo",
                                           "10 Loci: Min combo",
                                           "10 Loci: High combo")),
      aes(x = Period, y = Spectrum, color = replicate, group = replicate)
    ) +
      geom_line(linewidth = 1.5) +
      scale_y_continuous(labels = scales::label_number())+
      facet_wrap(~ facetgrouping, scales = "free", ncol = 1) +
      #facet_grid(Selection ~ H_SD_Gen_short, scales = "free") +
      labs(title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density") +
      mythemes
  }

  return(fft_plots)
}

# Example usage:
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome\\d+_n(1|10)_H0\\.(1|5|8)(SD(1|2|4))?Gen(10|20|30)\\.csv$"

Spec_Mono_Oligo_Poly <- run_fft_analysis(dirpath, pattern)
Spec_Mono_Oligo_Poly

```


### 3.4. Genome architecture all models Polygenic Instantaneous: AF, Pheno, and Spec Analysis

```{r, warning=FALSE, fig.width = 22, fig.height = 20, dpi = 1200, echo=FALSE}
#| label: All_Instant_Mono_Oligo_Poly
#| 
top_plot     <- AF_Mono_Ologo_Poly_Instant + theme(plot.margin = margin(b = 20))
bottom_left  <- Pheno_Mono_Oligo_Poly + theme(plot.margin = margin(r = 20, b = 20))
bottom_right <- Spec_Mono_Oligo_Poly   + theme(plot.margin = margin(l = 20, b = 20))

#bottom_row <- plot_grid(bottom_left, bottom_right, ncol = 1)

All_Mono_Oligo_Poly <- plot_grid(plot_grid(top_plot, bottom_left, 
                                           ncol = 1, 
                                           rel_heights = c(2.4, 2)), 
                                 bottom_right, rel_widths = c(2, 1.2))

ggsave("All_Instant_Mono_Oligo_Poly.png", 
       plot = All_Mono_Oligo_Poly, 
       dpi = 600, 
       width = 20, 
       height = 20, 
       units = "in", 
       path = "New_Publication_Plots")

All_Mono_Oligo_Poly

```


### 3.5 Fixed percentages for each architecture


```{r, fig.height=17, fig.width=25, echo=FALSE, dpi = 1200, message=FALSE}
# #| label: Fixation_Percentages
# install.packages(c("fs", "furrr"))
# library(furrr)
# library(fs)
# library(stringr)
# 
# #-------------------------------------------------------------
# # 1) Set Path and File Pattern
# #-------------------------------------------------------------
# path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
# pattern <- "^genome\\d+_n\\d+_H0.(1|5|8)(SD[1|4])?Gen(10|30)?\\.csv$" 
# 
# # List files using fs::dir_ls (full paths, filtering by regex)
# #files <- dir_ls(path, type = "file", regexp = pattern)
# files <- list.files(path, pattern, full.names = TRUE)
# 
# if (length(files) == 0) {
#   stop("No files found matching the pattern in the specified path.")
# }
# 
# #-------------------------------------------------------------
# # 2) Set Up Parallel Processing with furrr (reserve a few cores)
# #-------------------------------------------------------------
# available_cores <- parallel::detectCores()
# workers_to_use <- max(1, available_cores - 4)  # leave 4 cores free
# plan(multicore, workers = workers_to_use)
# 
# #-------------------------------------------------------------
# # 3) Define a Function to Process a Single File Using tidyverse
# #-------------------------------------------------------------
# process_file <- function(file) {
#   # Get the filename for extraction purposes
#   filename <- path_file(file)
#   
#   # Extract parameters from the filename using regex
#   # (Adjust these regexes if your filename structure is different.)
#   repl_val <- as.numeric(str_extract(filename, "(?<=genome)\\d+"))
#   H_val    <- as.numeric(str_extract(filename, "(?<=H)0\\.\\d+"))
#   loci_val <- as.numeric(str_extract(filename, "(?<=_n)\\d+"))
#   SD_val   <- as.numeric(str_extract(filename, "(?<=SD)\\d+"))
#   Gen_val  <- as.numeric(str_extract(filename, "(?<=Gen)\\d+"))
#   
#   # Read the CSV file; if the file doesn't have an "Origin" column,
#   # select(-Origin) will do nothing.
#   df <- read_csv(file, col_types = cols()) %>%
#     select(-any_of("Origin")) %>%
#     mutate(
#       Position = as_factor(Position),
#       repl = repl_val,
#       H    = H_val,
#       loci = loci_val,
#       SD   = SD_val,
#       Gen  = Gen_val
#     )
#   
#   # Check that the required columns exist in the output
#   required <- c("H", "loci", "SD", "Gen", "repl", "Position")
#   missing_cols <- setdiff(required, names(df))
#   if (length(missing_cols) > 0) {
#     warning("File ", filename, " is missing the following columns: ",
#             paste(missing_cols, collapse = ", "))
#   }
#   return(df)
# }
# 
# #-------------------------------------------------------------
# # 4) Process All Files in Parallel and Combine the Results
# #-------------------------------------------------------------
# combined_data <- future_map_dfr(files, process_file, .options = furrr_options(chunk_size = 100))
# 
# # Quick check: Print the names of the columns to ensure required columns are present.
# print(names(combined_data))
# if (!all(c("H", "loci", "SD", "Gen", "repl", "Position") %in% names(combined_data))) {
#   stop("One or more required columns are missing from the combined data.")
# }
# 
# #-------------------------------------------------------------
# # 5) Compute Fixation Status and Initial Frequency
# #-------------------------------------------------------------
# 
# data_with_fix <- combined_data %>%
#   group_by(H, loci, SD, Gen, repl, Position) %>%
#   filter(Frequency == 1|Frequency < 1 & Generation == max(Generation) & max(Generation) < 2000) %>% 
#   distinct(H, loci, SD, Gen, repl, Position) %>% 
#   #filter(-Generation) %>% 
#   distinct() %>% 
#   ungroup()
# 
# #-------------------------------------------------------------
# # 6) Summarise at the Replicate Level
# #-------------------------------------------------------------
# # We assume that each replicate (H, loci, SD, Gen, repl) has a fixed number of loci (Position).
# replicate_summary <- data_with_fix %>%
#   group_by(H, loci, SD, Gen, repl) %>%
#   summarise(
#     fixed_count = n_distinct(Position),
#     total_count = 30*loci,  # count of unique loci in this replicate
#     .groups = "drop"
#   ) %>% distinct()
# 
# 
# #-------------------------------------------------------------
# # 7) Aggregate Over Replicates to Get Parameter Combination Summary
# #-------------------------------------------------------------
# parameter_summary <- replicate_summary %>%
#   group_by(H, loci, SD, Gen, total_count) %>%
#   summarise(
#     total_fixed      = sum(fixed_count),
#     total_possible   = total_count,
#     Perc_Loci        = total_fixed * 100 / total_possible,
#     .groups = "drop"
#   ) %>%
#   mutate(
#     Gen_SD  = paste0("Gen = ", Gen, " SD = ", SD),
#     H_label = paste0("H = ", H)
#   ) %>% distinct()
# 
# #-------------------------------------------------------------
# # 8) Plot the Results with ggplot2
# #-------------------------------------------------------------
# plot <- ggplot(parameter_summary, aes(x = as.factor(loci), y = Perc_Loci, color = as.factor(loci))) +
#   geom_point(size = 10) +
#   geom_line(aes(group = 1), linewidth = 2) +
#   geom_text(aes(label = round(Perc_Loci, 0)),
#             vjust = -0.3, hjust = 1, size = 18, fontface = "bold",
#             angle = 45, show.legend = FALSE) +
#   facet_grid(H_label ~ Gen_SD, scales = "free") +
#   labs(
#     x = "Number of Loci",
#     y = "Percentage of Loci Fixed (%)",
#     color = "Number of Loci"
#   ) +
#   theme_bw() +
#   theme(
#     text         = element_text(family = "sans"),
#     axis.text.x  = element_text(face = "bold", size = 50, angle = 15,
#                                  hjust = 1, margin = margin(t = 10)),
#     axis.text.y  = element_text(face = "bold", size = 50, angle = 15,
#                                  margin = margin(r = 10)),
#     plot.title   = element_text(hjust = 0.01, face = "bold", size = 40),
#     axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
#     axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
#     strip.text   = element_text(size = 50, face = "bold"),
#     panel.spacing= unit(5, "lines"),
#     panel.grid   = element_blank(),
#     legend.position = "bottom",
#     legend.justification = "center",
#     legend.text  = element_text(size = 50, face = "bold"),
#     legend.title = element_text(size = 50, face = "bold")
#   ) +
#   guides(color = guide_legend(override.aes = list(shape = 16, size = 10),
#                               byrow = TRUE))
# 
# #-------------------------------------------------------------
# # 9) Display the Plot
# #-------------------------------------------------------------
# print(plot)

```



```{r, fig.height=10, fig.width=20, echo=FALSE, dpi = 1200, message=FALSE}
#| label: Fixation_Percentages
#### Parameter combination as colors
library(furrr)
library(fs)
library(stringr)
library(dplyr)
#-------------------------------------------------------------
# 1) Set Path and File Pattern
#-------------------------------------------------------------
path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome\\d+_n\\d+_H0.(1|5|8)(SD[1|4])?Gen(10|30)?\\.csv$" 

# List files using list.files (full paths, filtering by regex)
files <- list.files(path, pattern, full.names = TRUE)

if (length(files) == 0) {
  stop("No files found matching the pattern in the specified path.")
}

#-------------------------------------------------------------
# 2) Set Up Parallel Processing with furrr (reserve a few cores)
#-------------------------------------------------------------
available_cores <- parallel::detectCores()
workers_to_use <- max(1, available_cores - 4)  # leave 4 cores free
plan(multicore, workers = workers_to_use)

#-------------------------------------------------------------
# 3) Define a Function to Process a Single File Using tidyverse
#-------------------------------------------------------------
process_file <- function(file) {
  # Get the filename for extraction purposes
  filename <- path_file(file)
  
  # Extract parameters from the filename using regex
  repl_val <- as.numeric(str_extract(filename, "(?<=genome)\\d+"))
  H_val    <- as.numeric(str_extract(filename, "(?<=H)0\\.\\d+"))
  loci_val <- as.numeric(str_extract(filename, "(?<=_n)\\d+"))
  SD_val   <- as.numeric(str_extract(filename, "(?<=SD)\\d+"))
  Gen_val  <- as.numeric(str_extract(filename, "(?<=Gen)\\d+"))
  
  # Read the CSV file; if the file doesn't have an "Origin" column,
  # select(-Origin) will do nothing.
  df <- read.csv(file) %>%
    select(-any_of("Origin")) %>%
    mutate(
      Position = as_factor(Position),
      repl = (repl_val),
      H    = (H_val),
      loci = (loci_val),
      SD   = (SD_val),
      Gen  = (Gen_val)
    )
  
  # Check that the required columns exist in the output
  required <- c("H", "loci", "SD", "Gen", "repl", "Position")
  missing_cols <- setdiff(required, names(df))
  if (length(missing_cols) > 0) {
    warning("File ", filename, " is missing the following columns: ",
            paste(missing_cols, collapse = ", "))
  }
  return(df)
}

#-------------------------------------------------------------
# 4) Process All Files in Parallel and Combine the Results
#-------------------------------------------------------------
combined_data <- future_map_dfr(files, process_file, .options = furrr_options(chunk_size = 100))

# Quick check: Print the names of the columns to ensure required columns are present.
print(names(combined_data))
if (!all(c("H", "loci", "SD", "Gen", "repl", "Position") %in% names(combined_data))) {
  stop("One or more required columns are missing from the combined data.")
}

#-------------------------------------------------------------
# 5) Compute Fixation Status and Initial Frequency
#-------------------------------------------------------------
data_with_fix <- combined_data %>%
  group_by(H, loci, SD, Gen, repl, Position) %>%
  filter(Frequency == 1 | (Frequency < 1 & Generation == max(Generation) & max(Generation) < 2000)) %>% 
  distinct(H, loci, SD, Gen, repl, Position) %>% 
  ungroup()

#-------------------------------------------------------------
# 6) Summarise at the Replicate Level
#-------------------------------------------------------------
replicate_summary <- data_with_fix %>%
  group_by(H, loci, SD, Gen, repl) %>%
  summarise(
    fixed_count = n_distinct(Position),
    total_count = 30 * loci,  # count of unique loci in this replicate
    .groups = "drop"
  ) %>% 
  distinct()

#-------------------------------------------------------------
# 7) Aggregate Over Replicates to Get Parameter Combination Summary
#-------------------------------------------------------------
parameter_summary <- replicate_summary %>%
  group_by(H, loci, SD, Gen, total_count) %>%
  summarise(
    total_fixed    = sum(fixed_count),
    total_possible = total_count,
    Perc_Loci      = total_fixed * 100 / total_possible,
    .groups = "drop"
  ) %>%
  mutate(
    Gen_SD  = paste0("Gen = ", Gen, " SD = ", SD),
    H_label = paste0("H = ", H),
    Combo   = paste0(H_label, ", ", Gen_SD)
  ) %>% 
  distinct()

#-------------------------------------------------------------
# 8) Plot the Results with ggplot2
#-------------------------------------------------------------

Fixation_Percentages <-
  ggplot(parameter_summary %>%
           mutate(H    = as_factor(H),
                  loci = as_factor(loci),
                  SD   = as_factor(SD),
                  Gen  = as_factor(Gen)),
         aes(x = loci,
             y = Perc_Loci,
             shape = SD,
             color = H,
             linetype = Gen,
             group = interaction(H, Gen, SD))) +
  geom_point(size = 20) +
  geom_line(size = 5) +
  labs(
    x = "Number of Loci",
    y = "Percentage of Loci Fixed (%)",
    color = "Heritability (h\u00B2)",
    linetype = "Season Length (Gen)",
    shape = "Distance to Optimum (SD)") +
  scale_color_manual(values = c("darkblue", "gray50", "firebrick")) +
  theme_bw() +
  theme(
    text         = element_text(family = "sans"),
    axis.text.x  = element_text(face = "bold", size = 50, angle = 15,
                                 hjust = 1, margin = margin(t = 10)),
    axis.text.y  = element_text(face = "bold", size = 50, angle = 15,
                                 margin = margin(r = 10)),
    axis.line    = element_line(size = 5),
    plot.title   = element_text(hjust = 0.01, face = "bold", size = 40),
    axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
    axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
    strip.text   = element_text(size = 50, face = "bold"),
    panel.spacing= unit(5, "lines"),
    panel.grid   = element_blank(),
    legend.position = c(0.95, 0.95),
    legend.justification = c("right", "top"),
    legend.text  = element_text(size = 50, face = "bold"),
    legend.title = element_text(size = 50, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(shape = 16, size = 10),
                              byrow = TRUE))

#-------------------------------------------------------------
# 9) Display the Plot
#-------------------------------------------------------------
ggsave("Fixation_Percentages.png", 
       plot = Fixation_Percentages, 
       dpi = 300, 
       width = 15, 
       height = 22, 
       units = "in", 
       path = "New_Publication_Plots")

print(Fixation_Percentages)

```


```{r, fig.height=10, fig.width=20, echo=FALSE, dpi = 1200, message=FALSE}
# Fixation_Percentages <-
#   ggplot(parameter_summary %>%
#            mutate(H    = as_factor(H),
#                   loci = as_factor(loci),
#                   SD   = as_factor(SD),
#                   Gen  = as_factor(Gen)),
#          aes(x = loci,
#              y = Perc_Loci,
#              shape = SD,
#              color = H,
#              linetype = Gen,
#              group = interaction(H, Gen, SD))) +
#   geom_point(size = 20,
#              position = position_jitterdodge(jitter.width = 0.2,
#                                              jitter.height = 0.2,
#                                              dodge.width = 0.7)) +
#   geom_line(size = 5,
#             position = position_jitterdodge(jitter.width = 0.2,
#                                              jitter.height = 0.2,
#                                              dodge.width = 0.7)) +
#   labs(
#     x = "Number of Loci",
#     y = "Percentage of Loci Fixed (%)",
#     color = "Heritability (h\u00B2)",
#     linetype = "Season Length (Gen)",
#     shape = "Distance to Optimum (SD)") +
#   scale_color_manual(values = c("firebrick", "cyan", "gray50")) +
#   theme_bw() +
#   theme(
#     text         = element_text(family = "sans"),
#     axis.text.x  = element_text(face = "bold", size = 50, angle = 15,
#                                  hjust = 1, margin = margin(t = 10)),
#     axis.text.y  = element_text(face = "bold", size = 50, angle = 15,
#                                  margin = margin(r = 10)),
#     axis.line    = element_line(size = 5),
#     plot.title   = element_text(hjust = 0.01, face = "bold", size = 40),
#     axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
#     axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
#     strip.text   = element_text(size = 50, face = "bold"),
#     panel.spacing= unit(5, "lines"),
#     panel.grid   = element_blank(),
#     legend.position = c(0.95, 0.95),
#     legend.justification = c("right", "top"),
#     legend.text  = element_text(size = 50, face = "bold"),
#     legend.title = element_text(size = 50, face = "bold")
#   ) +
#   guides(color = guide_legend(override.aes = list(shape = 16, size = 10),
#                               byrow = TRUE))
# 
# Fixation_Percentages


```


## 4. Beyond instantaneous selection: gradual selection models

### 4.0. Allele Freq for Instant and Grad 2

```{r,  warning=FALSE, fig.width = 50, fig.height = 30, dpi = 1200, echo=FALSE}
# #| label: AF_InstantGradII
# # Load required libraries
# library(dplyr)
# library(forcats)
# library(ggplot2)
# library(stringr)    # Needed for str_extract()
# 
# # ------------------------------------------------------------------------------
# # If you want Monogenic (n=1), uncomment the lines below and remove the lines
# # that exclude n=1. Otherwise, you can safely ignore or remove monogenic code.
# # n_values <- c(1, 10, 100)
# # gene_number_labels <- c("1" = "Monogenic", "10" = "Oligogenic", "100" = "Polygenic")
# 
# # For 10 Oligogenic and 100 Polygenic:
# n_values <- c(10, 100)
# gene_number_labels <- c("10" = "Oligogenic", "100" = "Polygenic")
# 
# # Define the directories and their corresponding Selection labels
# selections <- list(
#   "LinFS.dir" = "Instantaneous",
#   "SinFS.dir" = "Gradual 2-Seasons"
# )
# 
# # Initialize an empty list to store datasets
# dataset_list <- list()
# 
# # Loop over n_values and selections to read and process the datasets
# for (n in n_values) {
#   for (dir_name in names(selections)) {
#     selection_label <- selections[[dir_name]]
#     
#     pattern <- paste0("genome10_n", n, "_H0\\.(1|8)SD(4)Gen(10|30)\\.csv")
#     
#     # Search for all matching files in the directory
#     dir_path <- file.path("../../output.dir/Selection_Models/WF.dir", dir_name)
#     file_list <- list.files(path = dir_path, pattern = pattern, full.names = TRUE)
#     
#     # If no files found, warn and continue
#     if (length(file_list) == 0) {
#       warning(paste("No files found for pattern:", pattern, "in directory:", dir_path))
#       next
#     }
#     
#     # Read each file, mutate, and store in dataset_list
#     for (f in file_list) {
#       H <- as.numeric(str_extract(f, "(?<=H)0\\.\\d+"))
#       SD <- as.numeric(str_extract(f, "(?<=SD)\\d+"))
#       Gen <- as.numeric(str_extract(f, "(?<=Gen)\\d+"))
#       
#       data <- read.csv(f) %>%
#         mutate(H = H, Gen = Gen, SD = SD,
#                Selection = selection_label,
#                Gene_Number = gene_number_labels[as.character(n)])
#       
#       dataset_list[[length(dataset_list) + 1]] <- data
#     }
#   }
# }
# 
# # Combine all datasets into one dataframe
# Genome_dataset <- dplyr::bind_rows(dataset_list) %>%
#   mutate(
#     Selection = fct_relevel(selections, "Instantaneous", "Gradual 2-Seasons"),
#     # If you include Monogenic, also specify its order here:
#     # Gene_Number = fct_relevel(Gene_Number, "Monogenic", "Oligogenic", "Polygenic")
#     Gene_Number = fct_relevel(Gene_Number, "Oligogenic", "Polygenic")
#   )
# 
# # ------------------------------------------------------------------------------
# # Highlight Specific Positions
# # ------------------------------------------------------------------------------
# #
# # If you **do not** have Monogenic, you can remove the monogenic code below or leave
# # it as is (it will simply assign NA to monogenic_highlight).
# 
# monogenic_positions <- Genome_dataset %>%
#   filter(Gene_Number == "Monogenic") %>%
#   pull(Position) %>%
#   unique()
# 
# monogenic_highlight <- ifelse(length(monogenic_positions) >= 1, monogenic_positions[1], NA)
# 
# # Define the positions to highlight
# highlight_positions <- data.frame(
#   Gene_Number = c("Monogenic", "Oligogenic", "Polygenic"),
#   Highlight_Position = c(monogenic_highlight, 1037246, 775768)
# )
# 
# # Merge the highlight positions into the dataset
# Genome_dataset <- Genome_dataset %>%
#   left_join(highlight_positions, by = "Gene_Number") %>%
#   mutate(Highlight = Position == Highlight_Position)
# 
# # ------------------------------------------------------------------------------
# # For Polygenic, Only Show 15 Positions (14 random + 1 highlight)
# # ------------------------------------------------------------------------------
# Polyigenic_positions <- Genome_dataset %>%
#   filter(Gene_Number == "Polygenic") %>%
#   pull(Position) %>%
#   unique()
# 
# Polygenic_highlight <- highlight_positions %>%
#   filter(Gene_Number == "Polygenic") %>%
#   pull(Highlight_Position)
# 
# # Remove the highlighted position from positions to sample
# positions_to_sample <- setdiff(Polygenic_positions, Polygenic_highlight)
# 
# # Randomly sample 14 positions
# set.seed(123)  # For reproducibility
# sample_size <- min(14, length(positions_to_sample))
# sampled_positions <- sample(positions_to_sample, size = sample_size, replace = FALSE)
# 
# # Combine the sampled positions with the highlighted position
# selected_Polygenic_positions <- c(sampled_positions, Polygenic_highlight)
# 
# # Filter the dataset to include only selected positions for Polygenic
# Genome_dataset_filtered <- Genome_dataset %>%
#   filter(
#     (Gene_Number != "Polygenic") | (Position %in% selected_Polygenic_positions)
#   )
# 
# # ------------------------------------------------------------------------------
# # Create the plot
# # ------------------------------------------------------------------------------
# AF_InstantGradII <- Genome_dataset_filtered %>% 
#   mutate(
#     myfacet1 = paste0(Selection, ": ", "SD", SD),
#     myfacet3 = paste0(Selection, "; ", Gene_Number),
#     myfacet2 = paste0("H", " = ", H, " Gen = ", Gen),
#     
#     # IMPORTANT: Fix the duplicated factor level here.
#     # If you only have Oligogenic and Polygenic, you might want:
#     myfacet3 = fct_relevel(myfacet3,
#       "Instantaneous; Oligogenic",
#       "Gradual 2-Seasons; Oligogenic",
#       "Instantaneous; Polygenic",
#       "Gradual 2-Seasons; Polygenic"
#     )
#     
#     # If you use Monogenic as well, include them similarly:
#     # myfacet3 = fct_relevel(myfacet3,
#     #   "Instantaneous; Monogenic", "Gradual 2-Seasons; Monogenic",
#     #   "Instantaneous; Oligogenic", "Gradual 2-Seasons; Oligogenic",
#     #   "Instantaneous; Polygenic", "Gradual 2-Seasons; Polygenic"
#     # )
#   ) %>%
#   filter(Generation <= 1000) %>%
#   ggplot(aes(x = Generation, y = Frequency, 
#              group = factor(Position), color = Highlight)) +
#   geom_line(linewidth = 0.5, alpha = 0.8) +
#   scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
#   facet_grid(myfacet2 ~ myfacet3) +
#   theme_bw() +
#   theme(
#     text = element_text(family = "sans"), 
#     legend.position = "none",
#     axis.text.x = element_text(face = "bold", size = 30, angle = 15,
#                                hjust = 1, margin = margin(t = 10)),
#     axis.text.y = element_text(face = "bold", size = 30, angle = 15, 
#                                margin = margin(r = 10)),
#     axis.line = element_line(size = 2),
#     plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
#     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 30)),
#     axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 35)),
#     strip.text = element_text(size = 40, face = "bold"),
#     panel.spacing = unit(5, "lines"),
#     panel.grid = element_blank()
#   )
# 
# # Save the figure
# ggsave(
#   filename = "AF_InstantGradII.png", 
#   plot = AF_InstantGradII, 
#   dpi = 600, width = 30, height = 15, units = "in", 
#   path = "New_Publication_Plots"
# )
# 
# print(AF_InstantGradII)

```




### 4.1. AF Freq All models by parameters

```{r,  warning=FALSE, fig.width = 15, fig.height = 5, dpi = 1200, echo=FALSE}
#| label: AF_FS_model_comparison
mono1 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome10_n100_H0.8SD4Gen30.csv")
mono2 <-  read.csv("../../../output.dir/Selection_Models/WF.dir/SinFS.dir/genome10_n100_H0.8SD4Gen30.csv")
mono3 <- read.csv("../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/genome10_n100_H0.8SD4.csv")


# Add a column to distinguish the datasets
geno_file <- mono1 %>% mutate(Selection = "Instantaneous")
geno_file2 <- mono2 %>% mutate(Selection = "Gradual 2-Seasons")
geno_file3 <- mono3 %>% mutate(Selection = "Gradual 4-Seasons")

# Combine the datasets
Genome_dataset <- rbind(geno_file, 
                        geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Instantaneous", 
                                 "Gradual 2-Seasons", 
                                 "Gradual 4-Seasons"))

#   # Select 30 random positions
  set.seed(12345)
  
  selected_positions <- Genome_dataset %>%
  distinct(Position) %>%
  sample_n(size = min(30, n()), replace = FALSE) %>%
  pull(Position)

  

    # Filter the data for the selected positions
    Genome_dataset <- Genome_dataset %>%
      filter(Position %in% selected_positions)
  

# Create the plot
AF_FS_model_comparison <- Genome_dataset %>% 
  filter(Generation <= 1000) %>%
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(
    aes(
      color = factor(Position == 323379),
      size  = factor(Position == 323379)
    ),
    alpha = 0.8
  ) +
  scale_color_manual(values = c("TRUE" = "magenta", "FALSE" = "grey")) +
  scale_size_manual(values  = c("TRUE" = 2, "FALSE" = 0.5)) +
  facet_wrap(Selection ~ .) +
  theme_bw() +
  mythemes
  # 
  # theme_bw() +
  # theme(
  #   text = element_text(family = "sans"),
  #   legend.position = "none",
  #   axis.text.x = element_text(face = "bold", size = 40, angle = 15,
  #                              hjust = 1, margin = margin(t = 10)),
  #   axis.text.y = element_text(face = "bold", size = 40, angle = 15,
  #                              margin = margin(r = 10)),
  #   axis.line = element_line(size = 5),
  #   plot.title = element_text(hjust = 0.01, face = "bold", size = 40),
  #   axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 30)),
  #   axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 35)),
  #   strip.text = element_text(size = 40, face = "bold"),
  #   panel.spacing = unit(5, "lines"),
  #   panel.grid = element_blank()
  # )
  # 

# Save the figure
ggsave(
  filename = "AF_FS_model_comparison.png",
  plot = AF_FS_model_comparison,
  dpi = 1200, width = 15, height = 5, units = "in",
  path = "New_Publication_Plots"
)


print(AF_FS_model_comparison)

```

### 4.2. FS model comparison by genomic architecture

### 4.2.1. AF All models comparisons

```{r,  warning=FALSE, fig.width = 20, fig.height = 10, dpi=1200, echo=FALSE}
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(forcats)
library(cowplot)

# Define the n values and their corresponding gene number categories
n_values <- c(1, 10, 100)
gene_number_labels <- c("1" = "1 Locus", "10" = "10 Loci", "100" = "100 Loci")

# Define the directories and their corresponding Selection labels
selections <- list(#"LinFS.dir" = "Instantaneous",
  "SinFS.dir" = "Gradual 2-Seasons",
  "SinFSGen.dir" = "Gradual 4-Seasons"
)

# Initialize an empty list to store datasets
dataset_list <- list()

# Loop over n_values and selections to read and process the datasets
for (n in n_values) {
  for (dir_name in names(selections)) {
    selection_label <- selections[[dir_name]]
    
    # Build the filename based on directory and n value
    if (dir_name == "SinFSGen.dir") {
      filename <- paste0("../../../output.dir/Selection_Models/WF.dir/", dir_name, "/genome10_n", n, "_H0.5SD4.csv")
    } else {
      filename <- paste0("../../../output.dir/Selection_Models/WF.dir/", dir_name, "/genome10_n", n, "_H0.5SD4Gen20.csv")
    }
    
    # Check if the file exists to avoid errors
    if (file.exists(filename)) {
      # Read the file
      data <- read.csv(filename)
      
      # Add columns for Selection and Gene_Number
      data <- data %>% 
        mutate(
          Selection = selection_label,
          Gene_Number = gene_number_labels[as.character(n)]
        )
      
      # Append the dataset to the list
      dataset_list[[length(dataset_list) + 1]] <- data
    } else {
      warning(paste("File not found:", filename))
    }
  }
}

# Combine all datasets into one dataframe
Genome_dataset <- bind_rows(dataset_list) %>%
  mutate(
    Selection = fct_relevel(Selection, "Gradual 2-Seasons", "Gradual 4-Seasons"), #"Instantaneous", 
    Gene_Number = fct_relevel(Gene_Number, "1 Locus", "10 Loci", "100 Loci")
  )

# ---- Highlight Specific Positions ----

# Get the first position for Monogenic (assuming only one position)
monogenic_positions <- Genome_dataset %>%
  filter(Gene_Number == "1 Locus") %>%
  pull(Position) %>%
  unique()
monogenic_highlight <- ifelse(length(monogenic_positions) >= 1, monogenic_positions[1], NA)

# Define the positions to highlight
highlight_positions <- data.frame(
  Gene_Number = c("1 Locus", "10 Loci", "100 Loci"),
  Highlight_Position = c(monogenic_highlight, 427101, 323379) # 1037246, 201349
)

# Merge the highlight positions into the dataset
Genome_dataset <- Genome_dataset %>%
  left_join(highlight_positions, by = "Gene_Number") %>%
  mutate(Highlight = Position == Highlight_Position)

# ---- For Polygenic, Only Show 15 Positions Including the Highlighted One ----

# Get all positions for Polygenic
Polygenic_positions <- Genome_dataset %>%
  filter(Gene_Number == "100 Loci") %>%
  pull(Position) %>%
  unique()

# Get the highlighted position for Polygenic
Polygenic_highlight <- highlight_positions %>%
  filter(Gene_Number == "100 Loci") %>%
  pull(Highlight_Position)

# Remove the highlighted position from positions to sample (if it exists)
positions_to_sample <- setdiff(Polygenic_positions, Polygenic_highlight)

# Randomly sample 14 positions (since we have 1 highlighted position)
set.seed(123)  # For reproducibility
sampled_positions <- sample(positions_to_sample, 
                            size = min(30, length(positions_to_sample)), 
                            replace = FALSE)

# Combine the sampled positions with the highlighted position
selected_Polygenic_positions <- c(sampled_positions, Polygenic_highlight)

# Filter the dataset to include only selected positions for Polygenic
Genome_dataset_filtered <- Genome_dataset %>%
  filter(
    (Gene_Number != "100 Loci") | (Position %in% selected_Polygenic_positions)
  )

# Create the plot with facets based on Selection and Gene_Number
theme_set(theme_bw()) # Set theme globally

All_models_freq <- Genome_dataset_filtered %>% 
  filter(Generation <= 1000) %>%
  ggplot(aes(x = Generation, 
             y = Frequency, 
             group = factor(Position), 
             color = as.factor(Highlight),
             size = as.factor(Highlight))) +
  geom_line(alpha = 0.8) +
  scale_size_manual(values = c("TRUE" = 2, "FALSE" = 1)) +
  scale_color_manual(values = c("TRUE" = "magenta", "FALSE" = "grey")) +
  labs(title = "A) Allele Frequency", x = "Generation", y = "Frequency") +
  facet_grid(Selection ~ Gene_Number) +
  theme_bw()+
  mythemes
  # theme(
  #   text = element_text(family = "sans"), 
  #   legend.position = "none",
  #   axis.text.x = element_text(face = "bold", size = 50, angle = 15, hjust = 1, margin = margin(t = 10)),
  #   axis.text.y = element_text(face = "bold", size = 50, angle = 15, margin = margin(r = 10)),
  #   axis.line = element_line(size = 2),
  #   plot.title = element_text(hjust = 0.01, face = "bold", size = 50),
  #   axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
  #   axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
  #   strip.text = element_text(size = 50, face = "bold"),
  #   panel.spacing = unit(5, "lines"),
  #   panel.grid = element_blank()
  # )

ggsave("All_models_freq.png", plot = All_models_freq, dpi = 1200, width = 20, height = 10, units = "in", path = "New_Publication_Plots")
# 
# print(All_models_freq)
```

### 4.2.2. Pheno All models comparisons

```{r,  warning=FALSE, fig.width = 20, fig.height = 10, dpi=1200, echo=FALSE, message=FALSE}
#| label: All_models_Pheno

# Define the n values and their corresponding gene number categories
n_values <- c(1, 10, 100)
gene_number_labels <- c("1" = "1 Locus", "10" = "10 Loci", "100" = "100 Loci")

# Define the directories and their corresponding Selection labels
selections <- list(
  #"LinFS.dir" = "Instantaneous",
  "SinFS.dir" = "Gradual 2-Seasons",
  "SinFSGen.dir" = "Gradual 4-Seasons"
)

# Initialize an empty list to store datasets
phenotype_list <- list()

# Loop over n_values and selections to read and process the phenotype datasets
for (n in n_values) {
  for (dir_name in names(selections)) {
    selection_label <- selections[[dir_name]]
    
    # Build the file pattern to match all replicate phenotype files
    if (dir_name == "SinFSGen.dir") {
      file_pattern <- paste0("MeanPhenotypes\\d+_n", n, "_H0\\.5SD4\\.csv$")
      file_path <- paste0("../../../output.dir/Selection_Models/WF.dir/", dir_name)
    } else {
      file_pattern <- paste0("MeanPhenotypes\\d+_n", n, "_H0\\.5SD4Gen20\\.csv$")
      file_path <- paste0("../../../output.dir/Selection_Models/WF.dir/", dir_name)
    }
    
    # List all phenotype files matching the pattern
    file_list <- list.files(
      path = file_path,
      pattern = file_pattern,
      full.names = TRUE
    )
    
    # Read and process each file
    for (file in file_list) {
      # Read the phenotype data
      data <- read.csv(file)
      
      # Extract the replicate number from the filename
      replicate_value <- as.numeric(str_extract(basename(file), "(?<=MeanPhenotypes)\\d+"))
      
      # Add columns for Selection, Gene_Number, and Replicate
      data <- data %>%
        mutate(
          Selection = selection_label,
          Gene_Number = gene_number_labels[as.character(n)],
          Replicate = replicate_value
        ) #%>% 
       # dplyr::filter(Replicate != 1)
      
      # Append to the list
      phenotype_list[[length(phenotype_list) + 1]] <- data
    }
  }
}

# Combine all phenotype datasets
Phenotype_dataset <- bind_rows(phenotype_list) %>%
  mutate(
    Selection = fct_relevel(Selection, "Instantaneous", "Gradual 2-Seasons", "Gradual 4-Seasons"),
    Gene_Number = fct_relevel(Gene_Number, "1 Locus", "10 Loci", "100 Loci")
  )

# Filter the data to include Generation 1 and every generation divisible by 30, up to Generation 600
# filtered_data <- Phenotype_dataset %>%
#   filter(
#     (Generation == 1 | (Generation %% 140 == 0)) & Generation <= 2000 & 
#       Replicate != 1 & Replicate != 27
#   )

# Create the boxplot with faceting by Gene_Number and Selection
All_models_Pheno <- Phenotype_dataset %>% filter(Generation <= 1000) %>% 
  ggplot(aes(x = Generation, y = Phenotype, group = Replicate)) +
  #geom_boxplot() + # outlier.size = 0.5, width = 0.6, alpha = 0.7
  geom_line(linewidth = 1, alpha = 0.7, color = "black") + # outlier.size = 0.5, width = 0.6, alpha = 0.7
  stat_summary(fun = mean,                              
               aes(group = 1), 
               geom = "line", 
               color = "red", 
               alpha = 1, 
               size = 3) +
  facet_grid(Selection ~ Gene_Number) +
  labs(title = "B) Phenotypes", x = "Generation", y = "Phenotype")+
  theme_bw()+
  mythemes
    # theme(text = element_text(family = "sans"), 
    #     legend.position = "none",
    #     axis.text.x = element_text(face = "bold", size = 50, angle = 35,
    #                                hjust = 1, margin = margin(t = 10)),
    #     axis.text.y = element_text(face = "bold", 
    #                                size = 50, angle = 15, margin = margin(r = 10)),
    #     axis.line = element_line(size = 2),
    #     plot.title = element_text(hjust = 0.01, face = "bold", size = 50),
    #     axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
    #     axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
    #     strip.text = element_text(size = 50, face = "bold"),
    #     panel.spacing = unit(5, "lines"),
    #     panel.grid = element_blank()
    # )

ggsave("All_models_Pheno.png", plot = All_models_Pheno, dpi = 1200, width = 20, height = 10, units = "in", path = "New_Publication_Plots")
# # Print the plot
# print(All_models_Pheno)
```

### 4.2.3. Spectral All models comparisons

```{r,  warning=FALSE, fig.width = 22, fig.height = 10, dpi=1200, echo=FALSE, message=FALSE}
#| label: All_models_Spec
# Define the n values and their corresponding gene number categories
n_values <- c(1, 10, 100)
gene_number_labels <- c("1" = "1 Locus", "10" = "10 Loci", "100" = "100 Loci")

# Define the directories and their corresponding Selection labels
selections <- list(
  #"LinFS.dir" = "Instantaneous",
  "SinFS.dir" = "Gradual 2-Seasons",
  "SinFSGen.dir" = "Gradual 4-Seasons"
)

# Initialize an empty list to store datasets
allele_freq_list <- list()

# Loop over n_values and selections to read and process the genome datasets
for (n in n_values) {
  for (dir_name in names(selections)) {
    selection_label <- selections[[dir_name]]
    
    # Build the file pattern to match all replicate genome files
    if (dir_name == "SinFSGen.dir") {
      file_pattern <- paste0("genome\\d+_n", n, "_H0\\.5SD4\\.csv$")
      file_path <- paste0("../../../output.dir/Selection_Models/WF.dir/", dir_name)
    } else {
      file_pattern <- paste0("genome\\d+_n", n, "_H0\\.5SD4Gen20\\.csv$")
      file_path <- paste0("../../../output.dir/Selection_Models/WF.dir/", dir_name)
    }
    
    # List all genome files matching the pattern
    file_list <- list.files(
      path = file_path,
      pattern = file_pattern,
      full.names = TRUE
    )
    
    # Read and process each file
    for (file in file_list) {
      # Read the genome data (allele frequency data)
      data <- read.csv(file)
      
      # Extract the replicate number from the filename
      replicate_value <- as.numeric(str_extract(basename(file), "(?<=genome)\\d+"))
      
      # Add columns for Selection, Gene_Number, and Replicate
      data <- data %>%
        mutate(
          Selection = selection_label,
          Gene_Number = gene_number_labels[as.character(n)],
          Replicate = factor(replicate_value)
        )
      
      # Append to the list
      allele_freq_list[[length(allele_freq_list) + 1]] <- data
    }
  }
}

# Combine all genome datasets
AlleleFreq_dataset <- bind_rows(allele_freq_list) %>%
  mutate(
    Selection = fct_relevel(Selection, "Instantaneous", "Gradual 2-Seasons", "Gradual 4-Seasons"),
    Gene_Number = fct_relevel(Gene_Number, "1 Locus", "10 Loci", "100 Loci")
  )

# ---- Perform Spectral Analysis ----

# Set up parallel backend
num_cores <- detectCores()
num_cores_to_use <- max(1, num_cores - 32)  # Leave at least 32 cores unused
cl <- makeCluster(num_cores_to_use)
registerDoParallel(cl)

# Group data for spectral analysis
grouped_data <- AlleleFreq_dataset %>%
  group_by(Selection, Gene_Number, Replicate)

# Prepare a list of unique combinations for parallel processing
unique_combinations <- grouped_data %>%
  summarize() %>%
  ungroup()

# Perform spectral analysis in parallel
spectral_results <- foreach(i = 1:nrow(unique_combinations), .packages = c("dplyr", "stats")) %dopar% {
  # Extract grouping variables
  sel <- unique_combinations$Selection[i]
  gene_num <- unique_combinations$Gene_Number[i]
  rep <- unique_combinations$Replicate[i]
  
  # Filter the data for the current group
  df <- AlleleFreq_dataset %>%
    filter(Selection == sel, Gene_Number == gene_num, Replicate == rep) %>%
    arrange(Generation)
  
  # Compute mean allele frequency across positions at each generation
  mean_freq_df <- df %>%
    group_by(Generation) %>%
    summarize(Mean_Frequency = mean(Frequency, na.rm = TRUE)) %>%
    arrange(Generation)
  
  # Create time series object
  ts_data <- ts(mean_freq_df$Mean_Frequency, start = min(mean_freq_df$Generation), frequency = 1)
  
  # Compute spectral density
  spec_result <- spectrum(ts_data, spans = 2, plot = FALSE)
  
  # Compute period
  period <- 1 / spec_result$freq
  
  # Create a data frame with spectral results
  data.frame(
    Period = period,
    Spectrum = spec_result$spec,
    Selection = sel,
    Gene_Number = gene_num,
    Replicate = rep
  )
}

# Stop cluster
stopCluster(cl)

# Combine all spectral data
spectral_data <- bind_rows(spectral_results)

# ---- Filter Periods Less Than 60 ----

spectral_data <- spectral_data %>%
  filter(Period < 60)

# Create the line plot with faceting by Gene_Number and Selection
All_models_Spec <- spectral_data %>%
  mutate(
    Facet_formula = factor(
      paste0(Gene_Number, " ", Selection),
      levels = c(
        "1 Locus Instantaneous", "10 Loci Instantaneous", "100 Loci Instantaneous",
        "1 Locus Gradual 2-Seasons", "10 Loci Gradual 2-Seasons", "100 Loci Gradual 2-Seasons",
        "1 Locus Gradual 4-Seasons", "10 Loci Gradual 4-Seasons", "100 Loci Gradual 4-Seasons"
      )
    )
  ) %>% 
  ggplot(aes(x = Period, y = Spectrum, group = Replicate, color = Replicate)) +
  geom_line(alpha = 1, size = 2) +
  scale_y_continuous(labels = scales::label_number())+
  #facet_wrap( ~ Selection + Gene_Number, scales = "free", ncol = 3) +
  facet_wrap( ~ Facet_formula, scales = "free", ncol = 3, dir = "h") +
  #scale_color_viridis_d() +  # Use a discrete color palette
  labs(
    x = "Period (Generations)",
    y = "Spectral Density",
    color = "Replicate"
  ) +
  labs(title = "C) Spectral Density", x = "Period (Generations)", y = "Spectral Density")+
  theme_bw()+
  mythemes
    # theme(text = element_text(family = "sans"), 
    #     legend.position = "none",
    #     axis.text.x = element_text(face = "bold", size = 50, angle = 35,
    #                                hjust = 1, margin = margin(t = 10)),
    #     axis.text.y = element_text(face = "bold", 
    #                                size = 50, angle = 15, margin = margin(r = 10)),
    #     axis.line = element_line(size = 2),
    #     plot.title = element_text(hjust = 0.01, face = "bold", size = 50),
    #     axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 30)),
    #     axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 35)),
    #     strip.text = element_text(size = 50, face = "bold"),
    #     panel.spacing = unit(5, "lines"),
    #     panel.grid = element_blank()
    # )


ggsave("All_models_Spec.png", plot = All_models_Spec, dpi = 1200, width = 25, height = 10, units = "in", path = "New_Publication_Plots")
# 
 print(All_models_Spec)

```

### 4.2.4. Combined gradual models, comparison on architecture

```{r, warning=FALSE, fig.width = 25, fig.height = 35, dpi = 1200, echo=FALSE}
#| label: Combined_gradual_models_architecture
# CGMA <-  plot_grid(All_models_freq + theme(plot.margin = margin(r = 20)), 
#                                   All_models_Pheno + theme(plot.margin = margin(r = 20)), 
#                                   All_models_Spec + theme(plot.margin = margin(l = 20)), ncol = 1) + 
#   theme(panel.spacing = unit(2, "lines"))

# CGMA <-  plot_grid(All_models_freq, All_models_Pheno, All_models_Spec, ncol = 1) + 
#   theme(panel.spacing = unit(2, "lines"))

library(cowplot)

CGMA <- plot_grid(
  All_models_freq,  # First plot
  All_models_Pheno, # Second plot
  All_models_Spec,  # Third plot
  ncol = 1,
  rel_heights = c(2, 2.1, 2.1)
) +
  theme(panel.spacing = unit(2, "lines"))


ggsave("Combined_gradual_models_architecture.png", plot = CGMA, dpi = 300, width = 20, height = 49, units = "in", path = "New_Publication_Plots")

CGMA

```


## 5. Differences between FS models and neutral and constant selection models

### 5.1. Spectral Neutral Polygenic


```{r, warning=FALSE, fig.width = 12, fig.height = 8, dpi = 1200, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(stringr)
  
  theme_set(theme_cowplot())
  
  # # Define the theme
  # mytheme <- theme_cowplot() +
  #   theme(legend.position = "none",
  #         axis.text.x = element_text(size = 50, face = "bold", hjust = 1),
  #         axis.text.y = element_text(size = 50, face = "bold"),
  #         axis.line = element_line(size = 5),
  #         axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 10)),
  #         axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 10)),
  #         strip.text = element_text(size = 50, face = "bold"),
  #         panel.spacing = unit(3, "lines"),
  #         panel.grid = element_blank())

  # Get the list of files matching the specified pattern
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)

  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }

  # Create a data frame with filenames and extract parameter information
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      genome = str_extract(base_name, "genome\\d+"), # Allow varying genome numbers
      n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen = str_extract(base_name, "Gen\\d+"),
      Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      Selection = case_when(
        n == "1" ~ "1 Locus",
        n == "10" ~ "10 Loci",
        n == "100" ~ "100 Loci",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )

  # Set up parallel backend
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))
  registerDoParallel(cl)

  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        genome = params$genome,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Selection = params$Selection,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, genome, n, H, SD, Gen, Selection, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  # Filter the data based on H, SD, and Gen values, handling NA values
  filtered_data <- combined_data %>%
    filter(
      (H == 0.1 & (SD == 1 | is.na(SD)) & (Gen == 10 | is.na(Gen))) |
      (H == 0.5 & (SD == 2 | is.na(SD)) & (Gen == 20 | is.na(Gen))) |
      (H == 0.8 & (SD == 4 | is.na(SD)) & (Gen == 30 | is.na(Gen)))
    )

  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")

  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')

  # Compute spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }

  # Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      genome = params$genome,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Selection = params$Selection,
      param_combination = params$param_combination
    )
  }

  stopCluster(cl)

  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)

  # Filter based on Period thresholds for each Gen value
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      !is.na(Gen) & Gen == 10 ~ 40,
      !is.na(Gen) & Gen == 20 ~ 50,
      !is.na(Gen) & Gen == 30 ~ 80,
      TRUE ~ 60
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      H_label = paste0("H = ", H),
      SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )

  # Generate the spectral plots faceted by Selection, H, SD, and Gen
  fft_plots <- ggplot(plot_data, aes(x = Period, y = Spectrum, color = genome, group = genome)) +
    geom_line(linewidth = 1.1) +
    scale_y_continuous(labels = scales::scientific_format())+
    #scale_y_continuous(labels = scales::label_number())+
    #facet_wrap(Selection ~ H_label + SD_label + Gen_label, scales = "free", ncol = 1) +
    facet_wrap(Selection ~ ., scales = "free", ncol = 1) +
    labs(title = "A)", x = NULL, y = NULL) +
    mythemes

  return(fft_plots)
}

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/"
pattern <- "^genome\\d+_n(1|10|100)_H0\\.(1)(SD(1|4))?(Gen(10|30))?\\.csv$"

neut_spec_plots <- run_fft_analysis(dirpath, pattern)
# 
# neut_spec_plots
```

### 5.2. Spectral Gradual II Polygenic

```{r, warning=FALSE, fig.width = 12, fig.height = 8, dpi = 1200, echo=FALSE}

run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(stringr)
  
  theme_set(theme_cowplot())
  
  # # Define the theme
  # mytheme <- theme_cowplot() +
  #   theme(legend.position = "none",
  #         axis.text.x = element_text(size = 50, face = "bold", hjust = 1),
  #         axis.text.y = element_text(size = 50, face = "bold"),
  #         axis.line = element_line(size = 5),
  #         axis.title.x = element_text(size = 50, face = "bold", margin = margin(t = 20)),
  #         axis.title.y = element_text(size = 50, face = "bold", margin = margin(r = 25)),
  #         strip.text = element_text(size = 50, face = "bold"),
  #         panel.spacing = unit(3, "lines"),
  #         panel.grid = element_blank())

  # Get the list of files matching the specified pattern
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)

  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }

  # Create a data frame with filenames and extract parameter information
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      genome = str_extract(base_name, "genome\\d+"), # Allow varying genome numbers
      n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen = str_extract(base_name, "Gen\\d+"),
      Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      Selection = case_when(
        n == "1" ~ "1 Locus",
        n == "10" ~ "10 Loci",
        n == "100" ~ "100 Loci",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )

  # Set up parallel backend
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))
  registerDoParallel(cl)

  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        genome = params$genome,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Selection = params$Selection,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, genome, n, H, SD, Gen, Selection, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  # Filter the data based on H, SD, and Gen values, handling NA values
  filtered_data <- combined_data %>%
    filter(
      (H == 0.1 & (SD == 1 | is.na(SD)) & (Gen == 10 | is.na(Gen))) |
      (H == 0.5 & (SD == 2 | is.na(SD)) & (Gen == 20 | is.na(Gen))) |
      (H == 0.8 & (SD == 4 | is.na(SD)) & (Gen == 30 | is.na(Gen)))
    )

  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")

  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, genome, H, SD, Gen, Selection, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')

  # Compute spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }

  # Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      genome = params$genome,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Selection = params$Selection,
      param_combination = params$param_combination
    )
  }

  stopCluster(cl)

  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)

  # Filter based on Period thresholds for each Gen value
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      !is.na(Gen) & Gen == 10 ~ 40,
      !is.na(Gen) & Gen == 20 ~ 50,
      !is.na(Gen) & Gen == 30 ~ 80,
      TRUE ~ 60
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      H_label = paste0("h\u00B2 = ", H),
      SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )

  # Generate the spectral plots faceted by Selection, H, SD, and Gen
  fft_plots <- ggplot(plot_data %>% mutate(FacetTerm = paste0(Selection)), aes(x = Period, y = Spectrum, color = genome, group = genome)) + # FacetTerm = paste0(Selection, ": ", "h\u00B2 = ", H, " SD = ", SD
    geom_line(linewidth = 1.1) +
    scale_y_continuous(labels = scales::scientific_format())+
    #scale_y_continuous(labels = scales::label_number())+
    #facet_wrap(Selection ~ H_label + SD_label + Gen_label, scales = "free", ncol = 2) +
    facet_wrap(FacetTerm ~ ., scales = "free", ncol = 1) +
    labs(title = "B)", x = NULL, y = NULL) +
    mythemes

  return(fft_plots)
}


dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome\\d+_n(1|10|100)_H0\\.(1)(SD(1))?(Gen(10|30))?\\.csv$"

gradII_spec_plots <- run_fft_analysis(dirpath, pattern)
gradII_spec_plots <- gradII_spec_plots 
# 
# gradII_spec_plots
```

### 5.3 Spectral Neutral and Grad II Polygenic

```{r, warning=FALSE, fig.width = 15, fig.height = 12, dpi = 1200, echo=FALSE}
#| label: Spectral_Neutral_and_GradII_Polygenic
library(cowplot)
library(ggplot2)

# Remove axis titles from individual plots
neut_spec_plots <- neut_spec_plots + 
  theme(axis.title = element_blank())

gradII_spec_plots <- gradII_spec_plots + 
  theme(axis.title = element_blank())

# Set plot margins in "lines" units:
adjusted_neut_spec_plots <- neut_spec_plots +
  theme(
    plot.margin = margin(t = 1,  # top
                         r = 2,  # right
                         b = 1,  # bottom
                         l = 1,  # left
                         unit = "lines")
  )

adjusted_gradII_spec_plots <- gradII_spec_plots +
  theme(
    plot.margin = margin(t = 1,
                         r = 1,
                         b = 1,
                         l = 2,
                         unit = "lines")
  )

# Combine the two plots side by side
combined_plot <- plot_grid(
  adjusted_neut_spec_plots,
  adjusted_gradII_spec_plots,
  ncol = 2,
  rel_widths = c(1, 1)
)

# Add shared axes labels with cowplot
Spectral_Neutral_and_GradII_Polygenic <- ggdraw() +
  draw_plot(combined_plot, x = 0.05, y = 0.05, width = 0.95, height = 0.95) +
  draw_label("Periodicity (Generations)", 
             x = 0.5, y = 0.015, 
             vjust = 0, size = 60, fontface = "bold") +
  draw_label("Spectral Density", 
             x = 0.015, y = 0.5, angle = 90, 
             hjust = 0, size = 60, fontface = "bold")


ggsave("Spectral_Neutral_and_GradII_Polygenic.png", plot = Spectral_Neutral_and_GradII_Polygenic, dpi = 1200, width = 20, height = 15, units = "in", path = "New_Publication_Plots")


print(Spectral_Neutral_and_GradII_Polygenic)

```

<!-- ## 6. Additional factors: initial frequency and allele effect -->

<!-- ### 6.1. Moderate Initial Frequency  -->

<!-- ```{r, echo=FALSE, warning=FALSE, message=FALSE} -->
<!-- library(stringr) -->
<!-- library(forcats) -->
<!-- library(cowplot) -->

<!-- # Function to read in the files based on the specified parameters and extract Selection, H, SD, and Gen values using regex -->
<!-- read_files <- function() { -->
<!--   file_list <- list.files(path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/", pattern = "genome10_n(1|10|70)_H0\\.(1|8|5)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$", full.names = TRUE) -->

<!--   datasets <- lapply(file_list, function(file) { -->
<!--     data <- read.csv(file) -->
<!--     matches <- str_match(file, "genome10_n([0-9]+)_H([0-9\\.]+)SD([0-9]+)Gen([0-9]+)") -->
<!--     selection_type <- as.numeric(matches[2]) -->
<!--     selection_label <- ifelse(selection_type == 1, "Monogenic", -->
<!--                               ifelse(selection_type == 10, "Oligogenic", "Polygenic")) -->

<!--     data <- data %>%  -->
<!--       mutate(Selection = selection_label, -->
<!--              H = as.numeric(matches[3]), -->
<!--              SD = as.numeric(matches[4]), -->
<!--              Gen = as.numeric(matches[5])) -->
<!--     return(data) -->
<!--   }) -->

<!--   return(bind_rows(datasets)) -->
<!-- } -->

<!-- # Read in the data -->
<!-- Genome_dataset <- read_files() %>%  -->
<!--   filter(Generation <= 2000) %>%  -->
<!--   mutate(Selection = fct_relevel(Selection,  -->
<!--                                  "Monogenic",   -->
<!--                                  "Oligogenic",  -->
<!--                                  "Polygenic")) -->

<!-- ``` -->


<!-- ### 6.1.1 AF for Oligo and 100 Loci -->

<!-- ```{r, warning=FALSE, fig.width = 30, fig.height = 15, dpi = 1200, echo=FALSE} -->
<!-- #| label: ModerateFreq -->
<!-- # Filter for positions with Frequency between 0.25 and 0.75 at Generation 1 -->
<!-- positions_at_gen1 <- Genome_dataset %>% -->
<!--   filter(Generation == 1, Frequency > 0.20 & Frequency < 0.75) %>% -->
<!--   pull(Position) %>% -->
<!--   unique() -->

<!-- # Filter dataset to include only selected positions -->
<!-- filtered_dataset <- Genome_dataset %>% -->
<!--   filter(Position %in% positions_at_gen1) -->

<!-- selected_positions <- filtered_dataset %>% -->
<!--   group_by(Selection) %>% -->
<!--   group_map(~ { -->
<!--     positions <- unique(.x$Position) -->
<!--     if (length(positions) > 15) { -->
<!--       sample(positions, 15) -->
<!--     } else { -->
<!--       positions -->
<!--     } -->
<!--   }) %>% -->
<!--   unlist() -->

<!-- # Filter dataset to include only selected positions -->
<!-- filtered_datasetII <- filtered_dataset %>% -->
<!--   filter(Position %in% selected_positions) -->

<!-- filtered_datasetII <- filtered_datasetII %>% -->
<!--   filter((H == 0.1 & SD == 1 & Gen == 10) | -->
<!--          (H == 0.5 & SD == 2 & Gen == 20) | -->
<!--          (H == 0.8 & SD == 4 & Gen == 30)) -->

<!-- # Create the plot -->
<!-- ModerateFreqplot <- filtered_datasetII %>% -->
<!--   mutate(H_SD_Gen = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen)) %>% -->
<!--   filter(Generation <= 2000) %>% -->
<!--   ggplot(aes(x = Generation, y = Frequency, group = factor(Position), color = factor(Position), linewidth = 1)) + -->
<!--   geom_line(alpha = 0.7) + -->
<!--   scale_color_identity() + -->
<!--   scale_linewidth_identity() + -->
<!--   facet_grid(Selection ~ H_SD_Gen) + -->
<!--   labs(title = "A", x = "Generation", y = "Frequency")+ -->
<!--   theme_bw() + -->
<!--   theme( -->
<!--     text = element_text(family = "sans"), -->
<!--     legend.position = "none", -->
<!--     axis.text.x = element_text(face = "bold", size = 30, angle = 15, -->
<!--                                hjust = 1, margin = margin(t = 10)), -->
<!--     axis.text.y = element_text(face = "bold", size = 30,  -->
<!--                                margin = margin(r = 10)), -->
<!--     axis.line = element_line(size = 2), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 30)), -->
<!--     axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 35)), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     panel.spacing = unit(5, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) -->

<!-- # Print the plot -->
<!-- print(ModerateFreqplot) -->

<!-- ``` -->

<!-- ### 6.1.2 HeatMap for moderate -->

<!-- ```{r, warning=FALSE, fig.width = 30, fig.height = 15, dpi = 1200, echo=FALSE} -->
<!-- #| label: ModerateHeatmap -->

<!-- ModerateHeatmap <- filtered_datasetII %>%  -->
<!--   mutate(H_SD_Gen = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen)) %>% -->
<!--   filter(Selection == "Polygenic") %>%  -->
<!--   ggplot(aes(x = Generation, y = factor(Position), fill = Frequency)) + -->
<!--   geom_tile() + -->
<!--   scale_fill_viridis_c(option = "C") + -->
<!--   facet_wrap(~ H_SD_Gen) + -->
<!--   labs(title = "B", -->
<!--        x = "Generation", -->
<!--        y = "Position", -->
<!--        fill = "Frequency", size = 20) + -->
<!--   theme_bw() + -->
<!--   theme( -->
<!--     legend.position = "bottom", -->
<!--     legend.text = element_text(size = 15, face = "bold"), -->
<!--     legend.title = element_text(size = 15, face = "bold"), -->
<!--     legend.background = element_rect(color = "black", size = 2, linetype = "solid"), -->
<!--     text = element_text(family = "sans"), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     axis.text.x = element_text(angle = 15, hjust = 1, size = 40, face = "bold"), -->
<!--     axis.text.y = element_text(size = 40, face = "bold"), -->
<!--     axis.line = element_line(linewidth = 5), -->
<!--     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 25)), -->
<!--     axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     panel.spacing = unit(2, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) + -->
<!--   guides(fill = guide_legend(override.aes = list(size = 10))) # Adjust legend key size -->

<!-- # Add text annotations for Effect labels on the right side -->
<!-- ModerateHeatmap_plot <- ModerateHeatmap + -->
<!--   geom_text(data = filtered_datasetII %>%  -->
<!--               filter(Selection == "Polygenic") %>%  -->
<!--               filter(!is.na(Effect)),  -->
<!--             aes(x = max(Generation) + 200, y = factor(Position), label = round(Effect, 1)), -->
<!--             hjust = 0.7, vjust = 0.15, size = 10, fontface = 10, angle = 25) -->

<!-- # # Save the plot with specified dimensions -->
<!-- # ggsave("heatmap_plot.png", plot = heatmap_plot, width = 26, height = 14, units = "in") -->

<!-- # Print the plot -->
<!-- print(ModerateHeatmap_plot) -->
<!-- ``` -->

<!-- ### 6.1.3 Moderate HeatMap and AF -->

<!-- ```{r, warning=FALSE, fig.width = 30, fig.height = 30, dpi = 1200, echo=FALSE} -->
<!-- #| label: Moderate_HeatFreq -->

<!-- Moderate_HeatFreq  <-   -->
<!--   plot_grid(ModerateFreqplot +  -->
<!--               theme(plot.margin = margin(r = 20)),  -->
<!--             ModerateHeatmap_plot +  -->
<!--               theme(plot.margin = margin(r = 20)),  -->
<!--             ncol = 1) +  -->
<!--   theme(panel.spacing = unit(2, "lines")) -->

<!-- print(Moderate_HeatFreq) -->

<!-- ``` -->

<!-- ### 6.2. Extreme Initial Frequency  -->
<!-- ### 6.2.1 Extreme AF for Oligo and 100 Loci -->

<!-- ```{r, warning=FALSE, fig.width = 30, fig.height = 15, dpi = 1200, echo=FALSE} -->
<!-- #| label: XtremeFreq -->
<!-- set.seed(8450) -->

<!-- # Filter for positions with Frequency between 0.25 and 0.75 at Generation 1 -->
<!-- positions_at_gen2 <- Genome_dataset %>% -->
<!--   filter(Generation == 1, Frequency < 0.20 | Frequency > 0.75) %>% -->
<!--   pull(Position) %>% -->
<!--   unique() -->

<!-- # Filter dataset to include only selected positions -->
<!-- filtered_dataset <- Genome_dataset %>% -->
<!--   filter(Position %in% positions_at_gen2) -->

<!-- selected_positions <- filtered_dataset %>% -->
<!--   group_by(Selection) %>% -->
<!--   group_map(~ { -->
<!--     positions <- unique(.x$Position) -->
<!--     if (length(positions) > 15) { -->
<!--       sample(positions, 15) -->
<!--     } else { -->
<!--       positions -->
<!--     } -->
<!--   }) %>% -->
<!--   unlist() -->

<!-- # Filter dataset to include only selected positions -->
<!-- filtered_datasetII <- filtered_dataset %>% -->
<!--   filter(Position %in% selected_positions) -->

<!-- filtered_datasetII <- filtered_datasetII %>% -->
<!--   filter((H == 0.1 & SD == 1 & Gen == 10) | -->
<!--          (H == 0.5 & SD == 2 & Gen == 20) | -->
<!--          (H == 0.8 & SD == 4 & Gen == 30)) -->

<!-- # Create the plot -->
<!-- XtremeFreqplot <- filtered_datasetII %>% -->
<!--   mutate(H_SD_Gen = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen)) %>% -->
<!--   filter(Generation <= 2000) %>% -->
<!--   ggplot(aes(x = Generation, y = Frequency, group = factor(Position), color = factor(Position), linewidth = 1)) + -->
<!--   geom_line(alpha = 0.7) + -->
<!--   scale_color_identity() + -->
<!--   scale_linewidth_identity() + -->
<!--   facet_grid(Selection ~ H_SD_Gen) + -->
<!--   labs(title = "C", x = "Generation", y = "Frequency")+ -->
<!--   theme_bw() + -->
<!--   theme( -->
<!--     text = element_text(family = "sans"), -->
<!--     legend.position = "none", -->
<!--     axis.text.x = element_text(face = "bold", size = 30, angle = 15, -->
<!--                                hjust = 1, margin = margin(t = 10)), -->
<!--     axis.text.y = element_text(face = "bold", size = 30,  -->
<!--                                margin = margin(r = 10)), -->
<!--     axis.line = element_line(size = 2), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 30)), -->
<!--     axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 35)), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     panel.spacing = unit(5, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) -->
<!-- # Print the plot -->
<!-- print(XtremeFreqplot) -->
<!-- ``` -->

<!-- ### 6.2.2 HeatMap for Extreme -->

<!-- ```{r, warning=FALSE, fig.width = 30, fig.height = 15, echo=FALSE} -->
<!-- #| label: XtremeHeatmap -->
<!-- # Create the plot with faceting by H, SD, and Gen -->
<!-- XtremeHeatmap <- filtered_datasetII %>% -->
<!--   mutate(H_SD_Gen = paste0("H = ", H, " SD = ", SD, " Gen = ", Gen)) %>%  -->
<!--   filter(Selection=="Polygenic") %>%  -->
<!--   ggplot(aes(x = Generation, y = factor(Position), fill = Frequency)) + -->
<!--   geom_tile() + -->
<!--   scale_fill_viridis_c(option = "C") + -->
<!--   facet_wrap(~ H_SD_Gen) + -->
<!--   theme_bw() + -->
<!--   labs(title = "C", x = "Generation", -->
<!--        y = "Position", -->
<!--        fill = "Frequency", size = 20) + -->
<!--   theme( -->
<!--     legend.position = "bottom", -->
<!--     legend.text = element_text(size = 15, face = "bold"), -->
<!--     legend.title = element_text(size = 15, face = "bold"), -->
<!--     legend.background = element_rect(color = "black", size = 2, linetype = "solid"), -->
<!--     text = element_text(family = "sans"), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     axis.text.x = element_text(angle = 15, hjust = 1, size = 40, face = "bold"), -->
<!--     axis.text.y = element_text(size = 40, face = "bold"), -->
<!--     axis.line = element_line(linewidth = 5), -->
<!--     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 25)), -->
<!--     axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     panel.spacing = unit(2, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) + -->
<!--   guides(fill = guide_legend(override.aes = list(size = 30))) # Adjust legend key size -->

<!-- # Add text annotations for Effect labels on the right side -->
<!-- XtremeHeatmap_plot <- XtremeHeatmap + -->
<!--   geom_text(data = filtered_datasetII %>% -->
<!--   filter(Selection=="Polygenic")  %>% filter(!is.na(Effect)), -->
<!--             aes(x = max(Generation) + 200, y = factor(Position), label = round(Effect, 1)), -->
<!--             hjust = 0.7, vjust = 0.15, size = 10, fontface = 10, angle = 25) -->

<!-- # Print the plot -->
<!-- print(XtremeHeatmap_plot) -->
<!-- ``` -->

<!-- ### 6.2.3 Extreme HeatMap and AF -->


<!-- ```{r, warning=FALSE, fig.width = 40, fig.height = 30, dpi = 1200, echo=FALSE} -->
<!-- #| label: Xtreme_HeatFreq -->

<!-- Xtreme_HeatFreq.plot  <-   -->
<!--   plot_grid(XtremeFreqplot +  -->
<!--               theme(plot.margin = margin(r = 20)),  -->
<!--             XtremeHeatmap_plot +  -->
<!--               theme(plot.margin = margin(r = 20)),  -->
<!--             ncol = 1) +  -->
<!--   theme(panel.spacing = unit(2, "lines")) -->

<!-- print(Xtreme_HeatFreq.plot) -->

<!-- ``` -->

<!-- ### 6.2.4 Moderate & Extreme -->

<!-- ```{r, warning=FALSE, fig.width = 60, fig.height = 30, dpi = 1200, echo=FALSE} -->
<!-- # --- Libraries --- -->
<!-- library(stringr) -->
<!-- library(forcats) -->
<!-- library(dplyr) -->
<!-- library(ggplot2) -->
<!-- library(cowplot) -->

<!-- # 1) Function to read files and parse n/H/SD/Gen using regex -->
<!-- read_files <- function() { -->
<!--   file_list <- list.files( -->
<!--     path = "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/", -->
<!--     pattern = "genome10_n(1|10|70)_H0\\.(1|8|5)(SD(1|2|4))?(Gen(10|20|30))?\\.csv$", -->
<!--     full.names = TRUE -->
<!--   ) -->

<!--   datasets <- lapply(file_list, function(file) { -->
<!--     data <- read.csv(file) -->
<!--     matches <- str_match(file, "genome10_n([0-9]+)_H([0-9\\.]+)SD([0-9]+)Gen([0-9]+)") -->
<!--     selection_type <- as.numeric(matches[2]) -->
<!--     selection_label <- ifelse(selection_type == 1, "Monogenic", -->
<!--                               ifelse(selection_type == 10, "Oligogenic", "Polygenic")) -->

<!--     data <- data %>% -->
<!--       mutate(Selection = selection_label, -->
<!--              H         = as.numeric(matches[3]), -->
<!--              SD        = as.numeric(matches[4]), -->
<!--              Gen       = as.numeric(matches[5])) -->
<!--     data -->
<!--   }) -->
<!--   bind_rows(datasets) -->
<!-- } -->

<!-- # 2) Read in the master dataset, keep only up to Gen 2000 -->
<!-- Genome_dataset <- read_files() %>% -->
<!--   filter(Generation <= 2000) %>% -->
<!--   mutate(Selection = fct_relevel(Selection, "Monogenic", "Oligogenic", "Polygenic")) -->

<!-- # Convert Position -> Numbers to avoid overlap -->
<!-- pos_mod_unique <- sort(unique(Genome_dataset$Position)) -->
<!-- pos_mod_caps   <- seq_along(pos_mod_unique)  # "1", "2", "3", ... -->

<!-- Genome_dataset <- Genome_dataset %>% -->
<!--   mutate( -->
<!--     Position = factor(Position, levels = pos_mod_unique, labels = pos_mod_caps) -->
<!--   ) -->

<!-- # ............................................................................ -->
<!-- #    MODERATE FREQUENCY SUBSET (Plots A,B) -->
<!-- # ............................................................................ -->

<!-- # Positions with 0.20 < Freq < 0.75 at Generation 1 -->
<!-- positions_mod <- Genome_dataset %>% -->
<!--   filter(Generation == 1, Frequency > 0.20, Frequency < 0.75) %>% -->
<!--   pull(Position) %>% -->
<!--   unique() -->

<!-- filtered_mod <- Genome_dataset %>% -->
<!--   filter(Position %in% positions_mod) -->

<!-- # Randomly sample up to 15 positions per Selection group -->

<!-- selected_positions_mod <- filtered_mod %>% -->
<!--   group_by(Selection) %>% -->
<!--   group_map(~ { -->
<!--     pos_vec <- unique(.x$Position) -->
<!--     if (length(pos_vec) > 15) sample(pos_vec, 15) else pos_vec -->
<!--   }) %>% -->
<!--   unlist() -->

<!-- filtered_dataset_mod <- filtered_mod %>% -->
<!--   filter(Position %in% selected_positions_mod) %>% -->
<!--   filter( -->
<!--     (H == 0.1 & SD == 1 & Gen == 10) | -->
<!--     (H == 0.5 & SD == 2 & Gen == 20) | -->
<!--     (H == 0.8 & SD == 4 & Gen == 30) -->
<!--   ) -->

<!-- # --- A) Moderate Frequency Plot --- -->

<!-- ModerateFreqplot <- filtered_dataset_mod %>% -->
<!--   mutate(H_SD_Gen = paste0("H=", H, ", SD=", SD, ", Gen=", Gen)) %>% -->
<!--   ggplot(aes(x = Generation, y = Frequency, group = Position, color = Position)) + -->
<!--   geom_line(linewidth = 1, alpha = 0.7) + -->
<!--   facet_grid(Selection ~ H_SD_Gen) + -->
<!--   scale_color_discrete() + -->
<!--   scale_y_continuous(limits = c(0,1)) + -->
<!--   scale_x_continuous(limits = c(0,2000)) + -->
<!--   labs(title = "A", x = NULL, y = NULL) +  # remove the X label here -->
<!--   theme_bw() + -->
<!--   theme( -->
<!--     text = element_text(family = "sans"), -->
<!--     legend.position = "none",  # hide line-color legend -->
<!--     axis.text.x = element_text(face = "bold", size = 40, angle = 15, -->
<!--                                hjust = 1, margin = margin(t = 5)), -->
<!--     axis.text.y = element_text(face = "bold", size = 40, -->
<!--                                margin = margin(r = 5)), -->
<!--     axis.title.x = element_blank(), -->
<!--     axis.title.y = element_text(size = 40, face = "bold"), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     panel.spacing = unit(3, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) -->

<!-- # --- B) Moderate Heatmap --- -->

<!-- ModerateHeatmap <- filtered_dataset_mod %>% -->
<!--   filter(Selection == "Polygenic") %>% -->
<!--   mutate(H_SD_Gen = paste0("H=", H, ", SD=", SD, ", Gen=", Gen)) %>% -->
<!--   ggplot(aes(x = Generation, y = Position, fill = Frequency)) + -->
<!--   geom_tile() + -->
<!--   scale_fill_viridis_c(option = "C", limits = c(0,1)) + -->
<!--   facet_wrap(~ H_SD_Gen) + -->
<!--   labs(title = "B", x = NULL, y = NULL, fill = "Frequency") +  -->
<!--   theme_bw() + -->
<!--   theme( -->
<!--     text = element_text(family = "sans"), -->
<!--     axis.text.x = element_text(angle = 15, hjust = 1, size = 40, face = "bold"), -->
<!--     axis.text.y = element_text(size = 40, face = "bold"), -->
<!--     axis.title.x = element_blank(), -->
<!--     axis.title.y = element_text(size = 40, face = "bold"), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     legend.position = "none",  -->
<!--     panel.spacing = unit(2, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) + -->
<!--   guides(fill = guide_legend(override.aes = list(size = 8))) + -->
<!--   geom_text( -->
<!--     data = filtered_dataset_mod %>% -->
<!--       filter(Selection == "Polygenic", !is.na(Effect)), -->
<!--     aes(x = max(Generation) + 200, y = Position, label = round(Effect, 1)), -->
<!--     hjust = 0.7, vjust = 0.15, size = 12, angle = 25 -->
<!--   ) -->

<!-- # ............................................................................ -->
<!-- #    EXTREME FREQUENCY SUBSET (Plots C,D) -->
<!-- # ............................................................................ -->
<!-- positions_ext <- Genome_dataset %>% -->
<!--   filter(Generation == 1, Frequency < 0.20 | Frequency > 0.75) %>% -->
<!--   pull(Position) %>% -->
<!--   unique() -->

<!-- filtered_ext <- Genome_dataset %>% -->
<!--   filter(Position %in% positions_ext) -->

<!-- # Random sample up to 15 positions -->
<!-- selected_positions_ext <- filtered_ext %>% -->
<!--   group_by(Selection) %>% -->
<!--   group_map(~ { -->
<!--     pos_vec <- unique(.x$Position) -->
<!--     if (length(pos_vec) > 15) sample(pos_vec, 15) else pos_vec -->
<!--   }) %>% -->
<!--   unlist() -->

<!-- filtered_dataset_ext <- filtered_ext %>% -->
<!--   filter(Position %in% selected_positions_ext) %>% -->
<!--   filter( -->
<!--     (H == 0.1 & SD == 1 & Gen == 10) | -->
<!--     (H == 0.5 & SD == 2 & Gen == 20) | -->
<!--     (H == 0.8 & SD == 4 & Gen == 30) -->
<!--   ) -->

<!-- # --- C) Extreme Frequency Plot --- -->

<!-- # XtremeFreqplot <- filtered_dataset_ext %>% -->
<!-- #   mutate(H_SD_Gen = paste0("H=", H, ", SD=", SD, ", Gen=", Gen)) %>% -->
<!-- #   ggplot(aes(x = Generation, y = Frequency, group = Position, color = Position)) + -->
<!-- #   geom_line(linewidth = 1, alpha = 0.7) + -->
<!-- #   facet_grid(Selection ~ H_SD_Gen) + -->
<!-- #   scale_color_discrete() + -->
<!-- #   scale_y_continuous(limits = c(0,1)) + -->
<!-- #   scale_x_continuous(limits = c(0,2000)) + -->
<!-- #   labs(title = "C", x = NULL, y = NULL) +  # remove y label -->
<!-- #   theme_bw() + -->
<!-- #   theme( -->
<!-- #     text = element_text(family = "sans"), -->
<!-- #     legend.position = "none", -->
<!-- #     axis.text.x = element_text(face = "bold", size = 40, angle = 15, -->
<!-- #                                hjust = 1, margin = margin(t = 10)), -->
<!-- #     axis.text.y = element_text(face = "bold", size = 40, -->
<!-- #                                margin = margin(r = 10)), -->
<!-- #     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 10)), -->
<!-- #     axis.title.y = element_blank(), -->
<!-- #     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!-- #     strip.text = element_text(size = 40, face = "bold"), -->
<!-- #     panel.spacing = unit(3, "lines"), -->
<!-- #     panel.grid = element_blank() -->
<!-- #   ) -->
<!-- #  -->
<!-- # # --- D) Extreme Heatmap --- -->
<!-- #  -->
<!-- # XtremeHeatmap <- filtered_dataset_ext %>% -->
<!-- #   filter(Selection == "Polygenic") %>% -->
<!-- #   mutate(H_SD_Gen = paste0("H=", H, ", SD=", SD, ", Gen=", Gen)) %>% -->
<!-- #   ggplot(aes(x = Generation, y = Position, fill = Frequency)) + -->
<!-- #   geom_tile() + -->
<!-- #   scale_fill_viridis_c(option = "C", limits = c(0,1)) + -->
<!-- #   facet_wrap(~ H_SD_Gen) + -->
<!-- #   labs(title = "D", x = NULL, y = NULL, fill = "Frequency") + -->
<!-- #   theme_bw() + -->
<!-- #   theme( -->
<!-- #     text              = element_text(family = "sans"), -->
<!-- #     axis.text.x       = element_text(angle = 15, hjust = 1, size = 40, face = "bold"), -->
<!-- #     axis.text.y       = element_text(size = 40, face = "bold"), -->
<!-- #     axis.title.x      = element_text(size = 40, face = "bold", margin = margin(t = 10)), -->
<!-- #     axis.title.y      = element_blank(), -->
<!-- #     plot.title        = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!-- #     strip.text        = element_text(size = 40, face = "bold"), -->
<!-- #     legend.position   = "bottom", -->
<!-- #     legend.text       = element_text(size = 25, face = "bold"), -->
<!-- #     legend.title      = element_text(size = 25, face = "bold"), -->
<!-- #     legend.background = element_rect(color = "black", size = 1), -->
<!-- #     panel.spacing     = unit(5, "lines"), -->
<!-- #     panel.grid        = element_blank() -->
<!-- #   ) + -->
<!-- #   # Use a colourbar guide (not guide_legend) for continuous data -->
<!-- #   guides( -->
<!-- #     fill = guide_colourbar( -->
<!-- #       title.position = "top",   # place title above the color bar -->
<!-- #       title.hjust    = 0.5,     # center the title -->
<!-- #       barwidth       = unit(30, "cm"), -->
<!-- #       barheight      = unit(1.5, "cm") -->
<!-- #     ) -->
<!-- #   ) + -->
<!-- #   # Example text overlay for 'Effect' annotation -->
<!-- #   geom_text( -->
<!-- #     data = filtered_dataset_ext %>% -->
<!-- #       filter(Selection == "Polygenic", !is.na(Effect)), -->
<!-- #     aes(x = max(Generation) + 200, y = Position, label = round(Effect, 1)), -->
<!-- #     hjust = 0.7, vjust = 0.15, size = 12, angle = 25 -->
<!-- #   ) -->

<!-- XtremeHeatmap <- filtered_dataset_ext %>% -->
<!--   filter(Selection == "Polygenic") %>% -->
<!--   mutate(H_SD_Gen = paste0("H=", H, ", SD=", SD, ", Gen=", Gen)) %>% -->
<!--   ggplot(aes(x = Generation, y = Position, fill = Frequency)) + -->
<!--   geom_tile() + -->
<!--   scale_fill_viridis_c(option = "C", limits = c(0,1)) + -->
<!--   facet_wrap(~ H_SD_Gen) + -->
<!--   labs(title = "D", x = NULL, y = NULL, fill = "Frequency") + -->
<!--   theme_bw() + -->
<!--   theme( -->
<!--     text = element_text(family = "sans"), -->
<!--     axis.text.x = element_text(angle = 15, hjust = 1, size = 40, face = "bold"), -->
<!--     axis.text.y = element_text(size = 40, face = "bold"), -->
<!--     axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 10)), -->
<!--     axis.title.y = element_blank(), -->
<!--     plot.title = element_text(hjust = 0.01, face = "bold", size = 40), -->
<!--     strip.text = element_text(size = 40, face = "bold"), -->
<!--     legend.position = "bottom",  -->
<!--     legend.text = element_text(size = 25, face = "bold"),  # Adjust legend text size -->
<!--     legend.title = element_text(size = 25, face = "bold"),  # Adjust legend title size -->
<!--     legend.background = element_rect(color = "black", size = 1), -->
<!--     legend.key.width = unit(6, "cm"), -->
<!--     legend.key.height = unit(2, "cm"), -->
<!--     legend.spacing.x = unit(2, "cm"),  -->
<!--     panel.spacing = unit(5, "lines"), -->
<!--     panel.grid = element_blank() -->
<!--   ) + -->
<!--   guides(fill = guide_legend(override.aes = list(size = 8))) + -->
<!--   geom_text( -->
<!--     data = filtered_dataset_ext %>% -->
<!--       filter(Selection == "Polygenic", !is.na(Effect)), -->
<!--     aes(x = max(Generation) + 200, y = Position, label = round(Effect, 1)), -->
<!--     hjust = 0.7, vjust = 0.15, size = 12, angle = 25 -->
<!--   ) -->


<!-- AC_combined <- plot_grid( -->
<!--   ModerateFreqplot, -->
<!--   XtremeFreqplot, -->
<!--   ncol = 1, -->
<!--   align = "v", -->
<!--   axis  = "lr"   -->
<!-- ) -->

<!-- AC_Combined_plot <- ggdraw() + -->
<!--   draw_plot(AC_combined, x = 0.05, y = 0.05, width = 0.95, height = 0.95) + -->
<!--   #draw_label("Periodicity (Generations)", x = 0.5, y = 0.015, vjust = 0, size = 40, fontface = "bold") + -->
<!--   draw_label("Frequency", x = 0.015, y = 0.5, angle = 90, hjust = 0, size = 40, fontface = "bold") -->

<!-- BD_combined <- plot_grid( -->
<!--   ModerateHeatmap, -->
<!--   XtremeHeatmap, -->
<!--   ncol = 1, -->
<!--   align = "v", -->
<!--   axis  = "lr"   # share left/right axis for position -->
<!-- ) -->

<!-- BD_Combined_plot <- ggdraw() + -->
<!--   draw_plot(BD_combined, x = 0.05, y = 0.05, width = 0.95, height = 0.95) + -->
<!--   #draw_label("Periodicity (Generations)", x = 0.5, y = 0.015, vjust = 0, size = 40, fontface = "bold") + -->
<!--   draw_label("Positions", x = 0.015, y = 0.5, angle = 90, hjust = 0, size = 40, fontface = "bold") -->

<!-- # --- Finally, put AC on the left, BD on the right --- -->
<!-- final_figure <- plot_grid( -->
<!--   AC_Combined_plot, -->
<!--   BD_Combined_plot, -->
<!--   ncol = 2, -->
<!--   rel_widths = c(1, 1)   -->
<!-- ) -->

<!-- final_figure.plt <- ggdraw() + -->
<!--   draw_plot(final_figure, x = 0.05, y = 0.05, width = 0.95, height = 0.95) + -->
<!--   draw_label(" Generations", x = 0.1, y = 0.015, vjust = 0, size = 40, fontface = "bold")  -->

<!-- print(final_figure.plt) -->

<!-- ``` -->





