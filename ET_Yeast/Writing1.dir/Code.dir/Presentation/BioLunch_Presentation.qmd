---
title: "BioLunch"
author: "ET"
format: html
editor: visual
---

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyr)
library(ggplot2)
library(tidyselect)
library(dplyr)
library(stringr)
library(cowplot)
library(ggridges)
theme_set(theme_cowplot())
```

```{r, echo=FALSE, message=FALSE}
mytheme <- function(){
  theme_set(theme_cowplot())+
    theme(axis.title = element_text(face = "bold"),
          axis.text = element_text(face = "italic", size = 12),
          axis.line = element_line(size = 1),
          plot.title = element_text(hjust = 0.5),
          legend.position = "none")
}
```

```{r}
########### Infinitisimal Model #################
a = 5
b = 25
x = seq(1:100)
y <- function(x){
  Y = a*exp(-x/b)
}
Y <- y(x)
z = data.frame(Y, x)

z %>% ggplot(aes(x,Y))+
  geom_line(linewidth = 2)+
  annotate("text", x = 50, y = max(Y)/1.5, label = "infinitesimal model", fontface = "bold", size = 12) +  #  Add this line
  labs(x = "Loci", y = "Effect", size = 17)+
  theme_set(theme_cowplot())+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))
```

```{r, fig.width=12, fig.height=8, echo=FALSE}
Generation <- seq(1, 100)
Optimum <- seq(90, 110, length.out = 100)
df <- data.frame(Generation, Optimum)

p1 <- ggplot(df) + 
  geom_blank(aes(Generation, Optimum)) +
  geom_hline(yintercept = 100, color = "darkred", size = 2)+
  annotate("text", x = 50, y = 100, 
           label = "Mean Phenotype", 
           size = 12, vjust = -1.5, col = "darkred")+
  geom_hline(yintercept = 105, linewidth = 2)+
annotate("text", x = 50, y = 105, label = "Optium", size = 12, vjust = -1.5, col = "black")+
  labs(x = "Generation", y = "Optimum")+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p1

```

```{r}
Generation <- seq(1, 100)
Optimum <- seq(90, 110, length.out = 100)
df <- data.frame(Generation, Optimum)

p1 <- ggplot(df) + 
  geom_blank(aes(Generation, Optimum)) +
  geom_hline(yintercept = 100, color = "darkred", size = 1) +
  annotate("text", x = 50, y = 100, 
           label = "Mean Phenotype", 
           size = 3, vjust = 1.5, col = "darkred") +
  geom_hline(yintercept = 105, size = 1) +
 # annotate("text", x = 50, y = 105, label = "Optimum", 
  #         size = 3, vjust = -1.5, col = "black") +
  labs(x = NULL, y = NULL) +
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p1

```

```{r}
# Generation sequence from 1 to 2000
Generation <- c(1:2000)


# Initialize Optimum vector
Optimum = rep(0, length(Generation))

Optimum <- seq(-4, 4, length.out = 2000)
df <- data.frame(Generation, Optimum) %>% filter(Generation <= 200)

 ggplot(df) + 
  geom_blank(aes(Generation, Optimum, ymax = 4)) +
  geom_hline(yintercept = 0, color = "darkred", size = 2)+
  annotate("text", x = 100, y = 0, 
           label = "Mean Phenotype", 
           size = 5, vjust = -.5, col = "darkred")+
  geom_hline(yintercept = 2, linewidth = 2)+
annotate("text", x = 100, y = 2.1, label = "Optium", size = 5, vjust = -.5, col = "black")+
  labs(x = "Generation", y = "Optimum")+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

```

```{r}
Opti_Gen <- tibble(Generation = seq(1:100),
                   Optimum1 = rep(c(rep(110, 10), rep(90, 10)), 5),
                   Optimum2 = rep(c(rep(105, 10), rep(95, 10)), 5))

mu_pheno = mean(Opti_Gen$Optimum1)

Opt_Data <- Opti_Gen %>% 
  filter(Generation == 0 | Generation %% 25 != 0)

p2 <- ggplot()+
  geom_line(data = Opt_Data, aes(x = Generation, y = Optimum1), size = 1)+
  #geom_line(data = Opt_Data, aes(x = Generation, y = Optimum2), size = 1, color = "blue", linetype = "dotted")+
  geom_hline(yintercept = mu_pheno, col = "darkred", size = 1)+
  annotate("text", x = 55, y = mu_pheno + 0.5, 
           label = "Mean Phenotype", 
           size = 5, vjust = 0.1, hjust = 0., 
           col = "darkred", angle = 85)+
  #labs(x = NULL, y = NULL)+
  labs(x = "Generation", y = "Optimum")+
  theme_set(theme_cowplot())+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p2

```

```{r}
phenotypes <- rnorm(10000, 0, 1)
lower = mean(phenotypes) - 4*(sd(phenotypes))
upper = mean(phenotypes) + 4*(sd(phenotypes))


Opti_Gen <- tibble(Generation = seq(1:200),
                   Optimum1 = rep(c(rep(lower, 25), rep(upper, 25)), 4))

mu_pheno = mean(phenotypes) #mean(Opti_Gen$Optimum1)

Opt_Data <- Opti_Gen %>% 
  filter(Generation == 0 | Generation %% 25 != 0)

p2 <- ggplot()+
  geom_line(data = Opt_Data, aes(x = Generation, y = Optimum1), size = 2)+
  geom_hline(yintercept = mu_pheno, col = "darkred", size = 2)+
  annotate("text", x = 62, y = mu_pheno + 0.1, 
           label = "Mean Phenotype", 
           size = 5, vjust = 0.1, hjust = 0., 
           col = "darkred", angle = 85)+
  #labs(x = NULL, y = NULL)+
  labs(x = "Generation", y = "Optimum")+
  theme_set(theme_cowplot())+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p2

```

```{r, fig.width=6, fig.height=4}
Generation <- seq(1, 100, length.out = 400) 
phenotypes <- rnorm(10000, 0, 1)
Optimum <- 100 + 10 *sin( pi* Generation / 25) 
df <- data.frame(Generation, Optimum) 

p3 <- ggplot(df) + 
  geom_line(aes(Generation, Optimum), size = 1) + 
  geom_hline(yintercept = mean(Optimum), 
             color = "darkred", size = 1)+ 
  annotate("text", x = 40, y = 100.5, 
           label = "Mean Phenotype", 
           size = 5, vjust = 0.1, hjust = 0, 
           col = "darkred", angle = 85)+ 
  #labs(x = NULL, y = NULL) + #  x = "Generation", y = "Phenotype"
  labs(x = "Generation", y = "Optimum")+
  theme_set(theme_cowplot())+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p3

```

```{r, fig.width=12, fig.height=8}
# Generation sequence from 1 to 2000
Generation <- c(1:200)
Optimum = rep(0, length(Generation))
phenotypes <- rnorm(10000, 0, 1)

#Optimum = Optimum + 4 * sin((pi) * Generation / 25)
Optimum = (mean(phenotypes) + sd(phenotypes)*4) * sin((22/7) * Generation / 25)
#Optimum = Optimum / 4  
#Optimum <- 100 + 10 *sin( pi* Generation / 25) 
df <- data.frame(Generation, Optimum) 

p3 <- ggplot(df) + 
  geom_line(aes(Generation, Optimum), size = 2) + 
  geom_hline(yintercept = mean(Optimum), 
             color = "darkred", size = 2)+ 
  annotate("text", x = 80, y = 0.2, 
           label = "Mean Phenotype", 
           size = 11, vjust = 0.1, hjust = 0, 
           col = "darkred", angle = 70)+ 
  #labs(x = NULL, y = NULL) + #  x = "Generation", y = "Phenotype"
  labs(x = "Generation", y = "Optimum")+
  theme_set(theme_cowplot())+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p3
```

```{r, fig.width=12, fig.height=8}
# Generation sequence from 1 to 2000
Generation <- c(1:200)
phenotypes <- rnorm(10000, 0, 1)
# Signals vector
signals = c(12, 22, 10, 16) # 5, 10, 20, 30

# Initialize Optimum vector
Optimum = rep(0, length(Generation))

# Loop over each signal to calculate the Optimum
for (i in signals) {
    #Optimum = Optimum + 4 * sin((pi) * Generation / i)
  Optimum = Optimum + (mean(phenotypes) + sd(phenotypes)*4) * sin((22/7) * Generation / i)
}
Optimum = Optimum / 4

# Create data frame for plotting
df <- data.frame(Generation, Optimum)

# Load necessary libraries
library(ggplot2)
library(cowplot)
library(dplyr)

# Plot the Optimum over the first 501 generations
p4 <- ggplot(df %>% filter(Generation < 502)) + 
    geom_line(aes(Generation, Optimum), size = 2) +
    geom_hline(yintercept = mean(phenotypes), color = "darkred", size = 2) +
    annotate("text", x = 75, y = 0.2, label = "Mean Phenotype", size = 11, vjust = 0.1, hjust = 0, col = "darkred", angle = 80) + 
    labs(x = "Generation", y = "Optimum") +
    ylim(-4, 4) +  # Set y-axis limits
    theme_cowplot() +
    theme(legend.position = "none",
          axis.text = element_text(size = 17, face = "bold"),
          axis.line = element_line(size = 2),
          axis.title = element_text(size = 17, face = "bold"),
          strip.text = element_text(size = 17, face = "bold"))

print(p4)

```

```{r}
Generation <- seq(1, 100, length.out = 400)

Optimum <- 100 + 10 * sin(2 * pi * Generation / 25) + 2 * sin(2 * pi * Generation / 10) + 5 * sin(2 * pi * Generation / 5) + 1 * sin(2 * pi * Generation / 2)

df <- data.frame(Generation, Optimum)

p4 <- ggplot(df) + 
  geom_line(aes(Generation, Optimum), size =1) +
  geom_hline(yintercept = mean(Optimum), 
             color = "darkred", size = 1)+
  annotate("text", x = 40, y = 100, 
           label = "Mean Phenotype", 
           size = 4, vjust = 0.1, hjust = 0,
           col = "darkred", angle = 25)+ 
  labs(x = NULL, y = NULL)+
  theme_set(theme_cowplot())+
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p4
```

```{r, echo=FALSE, fig.width = 8, fig.height = 4}
mygrid <- plot_grid(p1, p2, p3, p4, labels = "AUTO", label_size = 10,label_colour = NULL, label_x = 0.15, label_y = 1.02, hjust = -0.5, vjust = 1.5, scale = 1,ncol = 2, align = "hv") +
  theme(plot.margin = margin(t = 10, r = 10, b = 10, l = 10)) +
  draw_label("Generation", size = 17, x = 0.5, y = -0.0105, hjust = .3, fontface = "bold")+
  draw_label("Phenotype", size = 17, x = -0.007, y = 0.5, vjust = 0.5, angle = 90, fontface = "bold")

mygrid

```

### Ignore

```{r}
pheno <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n1_H0.5SD4Gen30.csv") %>% 
  filter(Generation == 0 | Generation %% 10 == 0)

 pa <- pheno %>% 
        ggplot(aes(Generation, Phenotype))+
        geom_line(size = 0.2, alpha = 0.8)+
        theme_bw()
```

```{r}
pheno <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n100_H0.5SD1Gen10.csv") # %>% 
  #filter(Generation == 0 | Generation %% 10 != 0)

pb <-  pheno %>% ggplot(aes(Generation, Phenotype))+
        geom_line(size = 0.2, alpha = 0.8)+
        theme_bw()
```

```{r}
library(patchwork)
pa/pb
```

### Allele Frequency

```{r}
geno <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD1Gen30.csv") %>% 
  filter(Generation == 0 | Generation %% 30 == 0) %>% 
  mutate(Position = factor(Position))
 pc <- geno %>% ggplot(aes(Generation, Frequency, color = Position))+
   geom_line(size = 0.2, alpha = 0.8)+
   theme_bw()+
   theme(legend.position = "none")

```

```{r}
geno <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome30_n1_H0.5SD3Gen10.csv") %>% 
  mutate(Position = factor(Position))
 pd <- geno %>% ggplot(aes(Generation, Frequency, color = Position))+
   geom_line(alpha = .8, size = .2)+
   theme_bw()+
   theme(legend.position = "none")
```

```{r}
pc/pd
```

### Figure: Monogenic Two-Season

> In monogenic traits, the fluctuations are more noticeable and less complex for models with two equal seasons, facilitating the observation of seasonality

```{r}
#dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
mono1 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n100_H0.8SD3Gen10.csv")
mono2 <-  read.csv("../../../output.dir/Selection_Models/WF.dir/SinFS.dir/genome1_n100_H0.8SD3Gen10.csv")
```

```{r, fig.width=8, fig.height=4, echo=FALSE}
# Add a column to distinguish the datasets
geno_file <- mono1 %>% mutate(Selection = "Instantaneous")
geno_file2 <- mono2 %>% mutate(Selection = "Gradual 2-Seasons")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2)

# Create the plot
freqplot <- Genome_dataset %>% filter(Generation <= 1000) %>% 
  ggplot(aes(x = Generation, y = Frequency, 
             color = factor(Position))) +
  geom_line(size = .1) +
  facet_wrap(Selection~.) +
  theme_set(theme_cowplot())+
  theme(axis.text = element_text(size = 12, angle = 15),
        axis.line = element_line(size = 2),
        axis.title = element_text(face = "bold"),
        legend.position = "none")

freqplot
```

### Figure: Oligogenic and Polygenic

```{r}
#dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
Oligo1 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD1Gen10.csv")
Oligo2 <-  read.csv("../../../output.dir/Selection_Models/WF.dir/SinFS.dir/genome1_n70_H0.1SD1Gen10.csv")
```

```{r, fig.width=8, fig.height=4, echo=FALSE}
library(plotly)
# Add a column to distinguish the datasets
geno_file <- Oligo1 %>% mutate(Selection = "Oligogenic")
geno_file2 <- Oligo2 %>% mutate(Selection = "Polygenic")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2)

# Create the plot
freqplot <- Genome_dataset %>% filter(Generation <= 1000) %>% 
  ggplot(aes(x = Generation, y = Frequency, 
             color = factor(Position))) +
  geom_line(size = .1) +
  facet_wrap(Selection~.) +
  theme_set(theme_cowplot())+
  theme(axis.text = element_text(size = 12, angle = 15),
        axis.line = element_line(size = 2),
        axis.title = element_text(face = "bold"),
        legend.position = "none")

ggplotly(freqplot)
```

### Heritability's Effect

```{r}
Heri1 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD2Gen10.csv")
Herit2 <-  read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.8SD2Gen10.csv")
```

```{r, warning=FALSE, fig.width = 8, fig.height = 4}
# Add a column to distinguish the datasets
geno_file <- Heri1 %>% mutate(Selection = "Heritability = 0.1")
geno_file2 <- Herit2 %>% mutate(Selection = "Heritability = 0.8")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2) %>% 
  filter(Generation<=500)

# Create the plot
freqplot <- Genome_dataset %>% ggplot(aes(x = Generation, y = Frequency, group = (Position), color = factor(Position==61014))) +
  geom_line(size = 0.5) +
  facet_wrap(Selection~.) +
  theme_cowplot()+
  theme(legend.position = "none",
        axis.text = element_text( size = 17, face = "bold"),
        axis.line = element_line(size = 1),
        axis.title = element_text( size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

freqplot
```

### Selection Effect

```{r}

plot_frequency_by_descriptor <- function(file_paths, descriptors) {
  datasets <- list()

  for (i in seq_along(file_paths)) {
    dataset <- read.csv(file_paths[i]) %>%
      mutate(Selection = descriptors[i])
    datasets[[i]] <- dataset
  }
  
  # Combine all datasets
  Genome_dataset <- bind_rows(datasets) %>% 
    filter(Generation <= 500)
  
  # Create the plot
  freqplot <- Genome_dataset %>%
    ggplot(aes(x = Generation, y = Frequency, 
               color = factor(Position))) +
    geom_line(linewidth = 0.3) +
    facet_wrap(Selection~., scales = "free_x") +
    theme_cowplot() +
    theme(legend.position = "none",
          axis.text = element_text(size = 17, face = "bold"),
          axis.line = element_line(size = 1),
          axis.title = element_text(size = 17, face = "bold"),
          strip.text = element_text(size = 17, face = "bold"))
  
  return(freqplot)
}

```

```{r, warning=FALSE, fig.width = 8, fig.height = 4}
file1 <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD1Gen10.csv"
file2 <-  "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD3Gen10.csv"

# Example usage of the function with multiple files and different descriptors
 file_paths <- c(file1, file2)
 descriptors <- c("Selection Strength = 1", "Selection Strength = 3")
 plot_frequency_by_descriptor(file_paths, descriptors)

```

### Season Length

```{r, warning=FALSE, fig.width = 8, fig.height = 4}
file1 <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD2Gen10.csv"
file2 <-  "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD2Gen30.csv"

# Example usage of the function with multiple files and different descriptors
 file_paths <- c(file1, file2)
 descriptors <- c("Generation = 10", "Generation = 30")
 plot_frequency_by_descriptor(file_paths, descriptors)

```

### Combined Effect

```{r, warning=FALSE, fig.width = 8, fig.height = 4}
file1 <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD1Gen10.csv"
file2 <-  "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.8SD4Gen30.csv"

# Example usage of the function with multiple files and different descriptors
 file_paths <- c(file1, file2)
 descriptors <- c("H2 = 0.1 SD = 1 Gen = 10", "H2 = 0.8 SD = 4 Gen = 30")
 plot_frequency_by_descriptor(file_paths, descriptors)
```

### Genome Size Effect

```{r, warning=FALSE, fig.width = 8, fig.height = 4}
library(forcats)

Mono <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n1_H0.1SD1Gen20.csv")
Oligo <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n10_H0.1SD1Gen20.csv")
Poly<- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n70_H0.1SD1Gen20.csv")

# Add a column to distinguish the datasets
geno_file <- Mono %>% mutate(Selection = "Monogenic")
geno_file2 <- Oligo %>% mutate(Selection = "Oligogenic")
geno_file3 <- Poly %>% mutate(Selection = "Polygenic")

# Combine the datasets
Genome_dataset <- rbind(geno_file, geno_file2, geno_file3) %>% filter(Generation <=500) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Monogenic",  
                                 "Oligogenic", 
                                 "Polygenic"))

# Create the plot
freqplot <- Genome_dataset %>% 
  ggplot(aes(x = Generation, y = Frequency, 
             group = factor(Position), color = factor(Position))) + 
  #scale_color_manual(values = "grey") +
  geom_line(size = 0.5, alpha = 0.5) + #, color = "grey"
  facet_wrap(~Selection) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
         panel.spacing = unit(1, "lines"))

freqplot
```

### Model Comparison

```{r,  warning=FALSE, fig.width = 8, fig.height = 4}
mono1 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n70_H0.5SD4Gen20.csv")
mono2 <-  read.csv("../../../output.dir/Selection_Models/WF.dir/SinFS.dir/genome1_n70_H0.5SD4Gen20.csv")
mono3 <- read.csv("../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/genome1_n70_H0.5SD4.csv")


# Add a column to distinguish the datasets
geno_file <- mono1 %>% mutate(Selection = "Instantaneous")
geno_file2 <- mono2 %>% mutate(Selection = "Gradual 2-Seasons")
geno_file3 <- mono3 %>% mutate(Selection = "Gradual 4-Seasons")

# Combine the datasets
Genome_dataset <- rbind(geno_file, 
                        geno_file2, geno_file3) %>% 
  mutate(Selection = fct_relevel(Selection, 
                                 "Instantaneous", 
                                 "Gradual 2-Seasons", 
                                 "Gradual 4-Seasons"))

#   # Select 30 random positions
  set.seed(12345)
  
  selected_positions <- Genome_dataset %>%
    sample_n(size = min(30, n()), replace = F) %>%
    pull(Position)
  

    # Filter the data for the selected positions
    Genome_dataset <- Genome_dataset %>%
      filter(Position %in% selected_positions)
  

# Create the plot
freqplot <- Genome_dataset %>% 
  filter(Generation <=500) %>%
  ggplot(aes(x = Generation, y = Frequency, group = factor(Position))) +
  geom_line(aes(color = factor(Position== 584005)), linewidth = 0.5, alpha = 0.5) +
  scale_color_manual(values = c("TRUE" = "magenta", "FALSE" = "grey")) +
  facet_wrap(Selection~.) +
  theme_cowplot()+
  theme(legend.position = "none",
        axis.text = element_text(size = 15, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 15, face = "bold"),
        strip.text = element_text(size = 15, face = "bold"),
         panel.spacing = unit(1, "lines"))

(freqplot)#ggplotly

```

### Neutral vs Gradual 4 seasons

```{r, warning=FALSE, fig.width = 8, fig.height = 4}
file1 <- "../../../output.dir/Selection_Models/WF.dir/NS.dir/genome1_n70_H0.5.csv"
file2 <-  "../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/genome1_n70_H0.5SD4.csv"

# Example usage of the function with multiple files and different descriptors
 file_paths <- c(file1, file2)
 descriptors <- c("Neutral", "Gradual 4 Seasons")
 plot_frequency_by_descriptor(file_paths, descriptors)
```

### Spectral Analysis

```{r}
run2_fft_analysis <- function(dirpath, pattern, spectrum_span = 2) {
  library(cowplot)
  library(lubridate)
  library(future)
  library(future.apply)
  library(dplyr)
  library(tidyr)
  library(stringr)
  library(ggplot2)
  
  theme_set(theme_cowplot())
  
  # Define a custom theme function
  mytheme <- theme(legend.position = "none",
                   axis.text = element_text(size = 17, face = "bold"),
                   axis.line = element_line(size = 2),
                   axis.title = element_text(size = 17, face = "bold"),
                   strip.text = element_text(size = 17, face = "bold"))
  
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  # Extract information from file names
  files_df <- data.frame(file_name = files) %>%
    mutate(
      myloci_full = str_extract(file_name, "genome\\d+_n\\d+"),
      myGen_full = str_extract(file_name, "Gen\\d+"),
      mySD_full = str_extract(file_name, "SD\\d+"),
      myHert_full = str_extract(file_name, "(?<=H)\\d*\\.?\\d*"),
      myloci = str_remove(myloci_full, "genome\\d+_n"),
      myGen = str_remove(myGen_full, "Gen"),
      mySD = str_remove(mySD_full, "SD"),
      myHert = myHert_full,
      loci_Gen = paste(myloci, myGen, sep = "_"),
      SD_H2 = paste("SD = ", mySD, " h2 = ", myHert)
    ) %>%
    select(-myloci_full, -myGen_full, -mySD_full, -myHert_full)
  
  all_results <- data.frame()
  
  # Process each file
  for (i in seq_along(files_df$file_name)) {
    file_name <- files_df$file_name[i]
    loci_Gen <- files_df$loci_Gen[i]
    SD_H2 <- files_df$SD_H2[i]
    
    file <- read.csv(file_name) %>%
      select(-Origin, -Effect) %>%
      pivot_wider(names_from = Position, values_from = Frequency, values_fill = list(Frequency = 0))
    
    ff1 <- file[, -1] # Exclude non-FFT columns
    
    # Apply FFT and calculate spectrum
    ttest <- spectrum(ff1, spans = spectrum_span, plot = FALSE)
    
    out.spect <- if (is.matrix(ttest$spec)) {
      rowMeans(ttest$spec)
    } else {
      ttest$spec
    }
    
    # Prepare results for plotting
    dd <- data.frame(
      Frequency = rep(ttest$freq, nrow(ff1)),
      File = basename(file_name),
      spec = out.spect,
      loci_Gen = loci_Gen,
      SD_H2 = SD_H2
    )
    
    all_results <- rbind(all_results, dd)
  }
  
  # Plot results with conditional filtering
  nloci <- unique(all_results$loci_Gen)
  fft1 <- list()
  for (loci in nloci) {
    threshold <- ifelse(grepl("_30$", loci), 70, ifelse(grepl("_20$", loci), 50, ifelse(grepl("_10$", loci), 30, 70)))
    
    fft1[[loci]] <- all_results %>%
      filter(loci_Gen == loci) %>%
      mutate(Frequency = 1 / Frequency) %>%
      filter(Frequency < threshold) %>%
      ggplot(aes(Frequency, spec, color = File, fill = File)) + 
      geom_line(linewidth = 1) +
      facet_wrap(~SD_H2, scales = "free_y") +
      xlab("Periodicity") +
      ylab("Spectral Density") +
      mytheme
  }
  
  return(fft1)
}

```

```{r, fig.width = 12, fig.height = 6}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/" 
#source('../../../Writing1.dir/Code.dir/ComboSpec.R')
pattern ="^genome\\d+_n10_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"
run2_fft_analysis(dirpath, pattern)
```

### Phenotypes

```{r, fig.width = 12, fig.height = 6}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^MeanPhenotypes1_n10_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  
mytheme <- theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

data <- read.csv(file, header = TRUE)

data$herit <- rep(herit, nrow(data))
data$loci <- rep(loci, nrow(data))
data$sd <- rep(sd, nrow(data))

dataframes[[file]] <- data
}
combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = "")) %>% 
  filter(Generation <= 2000)

plots <- list()
loci <- unique(combined_data$loci)
for(locus in loci){
  locus_data <- combined_data %>% 
    filter(loci == locus)
  p <- locus_data %>% 
    ggplot(aes(Generation, Phenotype))+
    geom_line(size = 0.1)+
  #geom_line(aes(y = Optimum), color = "darkred", size = 0.1, linewidth = 0.1) +
    facet_wrap(~h2_sd, ncol = 2, scales = "free_y")+
    mytheme
  
  plots[[locus]] <- (p) 
}
plots
```

```{r, fig.width = 12, fig.height = 6}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes[1]_n100_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

data <- read.csv(file, header = TRUE)

data$herit <- rep(herit, nrow(data))
data$loci <- rep(loci, nrow(data))
data$sd <- rep(sd, nrow(data))
data$gen <- rep(gen, nrow(data))

dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = "")) %>% 
  filter(Generation <= 2000)

mytheme <- theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

plots <- list()
loci_gens <- unique(combined_data$loci_gen)
for(loci_geni in loci_gens){
  locus_data <- combined_data %>% 
    filter(loci_gen == loci_geni)
  p <- locus_data %>% 
    ggplot(aes(Generation, Phenotype))+
    geom_line(size = 0.3)+
    facet_wrap(~h2_sd, ncol = 2, scales = "free_y")+
    #geom_line(aes(y = Optimum), color = "darkred", size = 1.2, linewidth = 0.2) +
    mytheme
  plots[[loci_geni]] <- (p) 
}
plots
```

### Population

```{r, fig.width = 12, fig.height = 6}
mytheme <- theme(
  axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

a <- 10000
b <- 5000
x = seq(1, 100, length.out = 100)
yi <- 5000 + 5000 / (1 + exp(-0.1 * (x - 50)))
yii <- rep(c(rep(a, 25), rep(b, 25)), 2)
yiii <- 2500 * sin(x / 10) + 7500
data <- data.frame(x = x, yi = yi, yii = yii, yiii = yiii)

p <- ggplot(data) +
  geom_line(aes(x, yi, color = "Population A"), size = 2) +
  geom_line(aes(x, yii, color = "Population B"), size = 2) +
  geom_line(aes(x, yiii, color = "Population C"), size = 2) +
  labs(x = "Generation", y = "Population", color = "Functions", size = 17) +
  scale_color_manual(values = c("Population A" = "blue", "Population B" = "red", "Population C" = "darkgreen")) +
  theme_cowplot()+
  mytheme
p
```

### Signs of FS

```{r, warning=FALSE, fig.width = 12, fig.height = 6}

geno <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/genome1_n70_H0.5SD4Gen30.csv") %>% 
  filter(Generation <= 500)
pheno <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n100_H0.5SD4Gen30.csv")%>% 
  filter(Generation <= 500)

g1 <- geno %>% 
  ggplot(aes(x = Generation, y = Frequency, color = factor(Position))) +
  geom_line(linewidth = 0.5) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

p1 <- pheno %>% 
  ggplot(aes(x = Generation, y = Phenotype)) +
  geom_line(size = 0.5) +
  theme_cowplot() +
  theme(legend.position = "none",
        axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"))

g1|p1

```

```{r, fig.width = 12, fig.height = 6}
############ Libraries and theme function ########
rm(list = ls())
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"), 
        plot.title = element_text(hjust = 0.5)) #,legend.position = "none"
}

#################### Data Processing and plotting ###############

# The first part deals with constant and sinusoidal II
process_files <- function(dirpath, pattern, plot_type) {
  files <- list.files(dirpath, pattern, full.names = TRUE)
  
  dataframes <- list()
  for(file in files){
    replicate <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(herit = herit, loci = loci, sd = sd,
             replicate = as.factor(replicate),
             h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
           loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
           Fitness = exp(-(1/100) * (Phenotype - Optimum)^2),
         Optimum = ifelse(Optimum == max(Optimum), "High", "Low"))
    
    
    # argument for linear and sinusoidal I selections
    
    if(!is.na(gen)) {
      data$gen <- rep(gen, nrow(data))
    }
    
    dataframes[[file]] <- data
  }
  combined_data <- bind_rows(dataframes) %>%
        filter(Generation == 0 | Generation %% 90 == 0)
  
  # plots for either linear or sinusoidal selections
  
  plots <- list()
  if (plot_type == "loci_gen") {
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (loci_gen_val in unique_loci_gens) {
      loci_gen_data <- combined_data %>%
        filter(loci_gen == loci_gen_val)
      
      p <- ggplot(loci_gen_data, aes(x = Generation, y = Phenotype)) +
        geom_boxplot(aes(group = Generation, color = Optimum), size = 1, varwidth = TRUE, alpha = 0.5) +  
        #scale_color_gradient(low = "blue", high = "red") +
        #scale_fill_manual(values = c("Low" = "magenta", "High" = "lightgreen")) +
        #scale_color_manual(values = c("Low" = "magenta", "High" = "lightgreen")) +
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
      
      plots[[loci_gen_val]] <- p
    }
    
    # plots for constant or sinusoidal II selections
    
  } else if (plot_type == "loci") {
    loci <- unique(combined_data$loci)
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (locus in loci) {
      loci_data <- combined_data %>%
        filter(loci_gen == loci_gen_val)
      
      p <- ggplot(loci_data,aes(x = Generation, y = Phenotype)) +
        geom_boxplot(aes(group = Generation, color = Optimum), size = 1, varwidth = TRUE, alpha = 0.5) + 
        #scale_color_gradient(low = "blue", high = "red") +
        #scale_fill_manual(values = c("Low" = "magenta", "High" = "lightgreen")) +
        #scale_color_manual(values = c("Low" = "magenta", "High" = "lightgreen")) +
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
      
      plots[[loci_gen_val]] <- p
    }
  }
  
  return(list(combined_data = combined_data, plots = plots))
} 

dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n300_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"
result <- process_files(dirpath, pattern, "loci_gen")


print(result$plots)

```

```{r, fig.width = 12, fig.height = 6}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n1_H0\\.(8)(SD(1))?(Gen(30))?\\.csv$"
# "^MeanPhenotypes\\d+_n300_H0\\.(8)(SD(4))?(Gen(30))?\\.csv$"
result <- process_files(dirpath, pattern, "loci_gen")

# Print combined data to check h2_sd
#combined_data <- result$combined_data

# Now, let's try plotting again
result$plots
```

```{r}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n1+_H0.8SD4Gen30\\.csv$"
result <- process_files(dirpath, pattern, "loci_gen")

# Print combined data to check h2_sd
#head(result$combined_data)

# Now, let's try plotting again
result$plots
```

### Fitness landscape

```{r, echo=FALSE}
# ph1 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/MeanPhenotypes1_n10_H0.1SD1Gen10.csv")
# ph11 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/MeanPhenotypes1_n10_H0.8SD4Gen30.csv")
# ph2 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/MeanPhenotypes1_n10_H0.1SD4Gen10.csv")
# ph22 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/MeanPhenotypes1_n10_H0.8SD1Gen10.csv")
# ph3 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/MeanPhenotypes1_n10_H0.8SD1Gen30.csv")
# ph33 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/MeanPhenotypes1_n10_H0.1SD4Gen30.csv")
# 
# # Add a new column 'source' to each dataframe
# ph1$source <- "S values"
# ph11$source <- "H values"
# ph2$source <- "H SD"
# ph22$source <- "H Hert"
# ph3$source <- "H Hert_Gen"
# ph33$source <- "H SD_Gen"
# 
# # Combine all dataframes into one
# all_data <- bind_rows(ph1, ph11, ph2, ph22, ph3, ph33)
# 
# # Plot with facets
# ggplot(all_data, aes(meanFitness)) +
#   geom_histogram(aes(fill = source), position = "identity", bins = 1000) +
#   facet_wrap(~source, scales = "free_y") +
#   theme_classic()

```

#### Gradual 4

```{r, echo=FALSE}
# ph1 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/MeanPhenotypes1_n10_H0.1SD1.csv")
# ph11 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/MeanPhenotypes1_n10_H0.8SD4.csv")
# ph2 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/MeanPhenotypes1_n10_H0.1SD4.csv")
# ph22 <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/MeanPhenotypes1_n10_H0.8SD1.csv")
# 
# 
# # Add a new column 'source' to each dataframe
# ph1$source <- "S values"
# ph11$source <- "H values"
# ph2$source <- "H SD"
# ph22$source <- "H Hert"
# 
# # Combine all dataframes into one
# all_data <- bind_rows(ph1, ph11, ph2, ph22,)
# 
# # Plot with facets
# ggplot(all_data, aes(meanFitness)) +
  # geom_histogram(aes(fill = source), position = "identity", bins = 1000) +
  # facet_wrap(~source, scales = "free_y") +
  # theme_classic()

```

```{r, fig.width = 12, fig.height = 6}
# Clear the environment
rm(list = ls())

# Load necessary libraries
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)

# Set theme
theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"), 
        plot.title = element_text(hjust = 0.5)) #,legend.position = "none"
}

# Function to process files and generate plots
process_files <- function(dirpath, pattern, plot_type) {
  files <- list.files(dirpath, pattern, full.names = TRUE)
  
  dataframes <- list()
  for(file in files){
    replicate <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(herit = herit, loci = loci, sd = sd,
             replicate = as.factor(replicate),
             h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
             loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
             Fitness = exp(-(1/200) * (Phenotype - Optimum)^2),
             Optimum = ifelse(Optimum == max(Optimum), "High", "Low"))
    
    if(!is.na(gen)) {
      data$gen <- rep(gen, nrow(data))
    }
    
    dataframes[[file]] <- data
  }
  combined_data <- bind_rows(dataframes) %>%
    filter(Generation == 0 | Generation %% 90 == 0)
  
  plots <- list()
  if (plot_type == "loci_gen") {
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (loci_gen_val in unique_loci_gens) {
      loci_gen_data <- combined_data %>%
        filter(loci_gen == loci_gen_val)
    
      p <- ggplot(loci_gen_data, aes(x = Generation, y = Phenotype)) +
        geom_point(aes(color = Fitness, shape = Optimum), size = 2, alpha = 0.5) +  
        scale_color_gradient(low = "blue", high = "red") +
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
    
      plots[[loci_gen_val]] <- p
    }
  } else if (plot_type == "loci") {
    loci <- unique(combined_data$loci)
    for (locus in loci) {
      loci_data <- combined_data %>%
        filter(loci == locus)
    
      p <- ggplot(loci_data, aes(x = Generation, y = Phenotype)) +
        geom_point(aes(color = Fitness, shape = Optimum), size = 2, alpha = 0.5) + 
        scale_color_gradient(low = "blue", high = "red") +
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
    
      plots[[locus]] <- p
    }
  }
  
  return(list(combined_data = combined_data, plots = plots))
}

```

```{r}
# Clear the environment
rm(list = ls())

# Load necessary libraries
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)

# Set theme
theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"), 
        plot.title = element_text(hjust = 0.5)) #,legend.position = "none"
}

# Function to process files and generate plots
process_files <- function(dirpath, pattern, plot_type) {
  files <- list.files(dirpath, pattern, full.names = TRUE)
  
  dataframes <- list()
  for(file in files){
    replicate <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(herit = herit, loci = loci, sd = sd,
             replicate = as.factor(replicate),
             h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
             loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
             Fitness = exp(-(1/200) * (Phenotype - Optimum)^2),
             Optimum = ifelse(Optimum == max(Optimum), "High", "Low"))
    
    if(!is.na(gen)) {
      data$gen <- rep(gen, nrow(data))
    }
    
    dataframes[[file]] <- data
  }
  combined_data <- bind_rows(dataframes) %>%
    filter(Generation == 0 | Generation %% 90 == 0)
  
  plots <- list()
  if (plot_type == "loci_gen") {
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (loci_gen_val in unique_loci_gens) {
      loci_gen_data <- combined_data %>%
        filter(loci_gen == loci_gen_val)
    
      p <- ggplot(loci_gen_data, aes(x = Generation, y = Phenotype)) +
        geom_point(aes(color = Fitness, shape = Optimum), size = 1, alpha = 0.5, 
                   position = position_jitter(width = 1, height = 0.5)) +  
        scale_color_gradient(low = "blue", high = "red") +
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
    
      plots[[loci_gen_val]] <- p
    }
  } else if (plot_type == "loci") {
    unique_loci <- unique(combined_data$loci)
    for (locus in unique_loci) {
      loci_data <- combined_data %>%
        filter(loci == locus)
    
      p <- ggplot(loci_data, aes(x = Generation, y = Phenotype)) +
        geom_point(aes(color = Fitness, shape = Optimum), size = 1, alpha = 0.5, 
                   position = position_jitter(width = 1, height = 0.5)) + 
        scale_color_gradient(low = "blue", high = "red") +
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
    
      plots[[locus]] <- p
    }
  }
  
  return(list(combined_data = combined_data, plots = plots))
}

# Define directory path and pattern
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n100_H0\\.(1|8)(SD(1|4))?(Gen(30))?\\.csv$"

# Process files and generate plots
result <- process_files(dirpath, pattern, "loci_gen")

# Print plots
result$plots

```

```{r, fig.width = 8, fig.height = 4}

dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir//"
pattern <- "^MeanPhenotypes\\d+_n100_H0\\.(1|5)(SD(1|2))?(Gen(20|10))?\\.csv$"
result <- process_files(dirpath, pattern, "loci_gen")

# Display plots
result$plots
```

#### Optimum vs Fitness

```{r}
ph1 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n10_H0.1SD1Gen10.csv")
ph11 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n10_H0.1SD2Gen10.csv")
ph2 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n10_H0.1SD3Gen10.csv")
ph22 <- read.csv("../../../output.dir/Selection_Models/WF.dir/LinFS.dir/MeanPhenotypes1_n10_H0.1SD4Gen10.csv")

# Add a new column 'source' to each dataframe
ph1$standv <- "1 values"
ph11$standv <- "2 values"
ph2$standv <- "3 values"
ph22$standv <- "4 values"

# Combine all dataframes into one
all_data <- bind_rows(ph1, ph11, ph2, ph22)%>% 
  filter(Optimum > 0) %>% 
  mutate(Optimum = factor(Optimum)) 


dataf2 <- all_data 

# Calculate the mean fitness for each standv group
mean_fitness <- dataf2 %>%
  group_by(standv) %>% 
  summarize(mean_optimum = mean(meanFitness))

ggplot(dataf2) +
  geom_density_ridges(aes(y = Optimum, x = meanFitness, color = standv, fill = standv), alpha = 0.3) +
  geom_vline(data = mean_fitness, aes(xintercept = mean_optimum), color = "blue") +
  geom_text(data = mean_fitness, aes(x = mean_optimum, label = paste("Mean =", round(mean_optimum, 2))), 
            y = 5, vjust = 0.5, hjust = 0.5, color = "darkred", size = 2) +  #size = 3
  facet_grid(~standv, scales = "free_y") +
  theme(axis.text = element_text(size = 12, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 12, face = "bold"),
        strip.text = element_text(size = 12, face = "bold"))
```

```{r}
 #rm(list = ls())
 #Generation <- seq(1, 100, length.out = 400)
 Generation <- c(1:2000)
 #signals = c(6, 24, 10, 20)
 signals = c(12, 22, 10, 16)
 #signals = c(5, 10, 31, 14)
 
 Optimum = rep(0, length(Generation))
 
 for (i in signals){
    Optimum =  Optimum + 4 * sin((pi) * Generation / i)
 }
 Optimum = Optimum/4
 
 df <- data.frame(Generation, Optimum)
 
 p4 <- ggplot(df%>% filter(Generation < 502)) + 
   geom_line(aes(Generation, Optimum), size =1) +
   geom_hline(yintercept = mean(Optimum), 
              color = "darkred", size = 1)+
   annotate("text", x = 40, y = 0.2, 
            label = "Mean Phenotype", 
            size = 4, vjust = 0.1, hjust = 0,
            col = "darkred", angle = 55)+ 
   labs(x = NULL, y = NULL)+
   theme_set(theme_cowplot())+
   theme(legend.position = "none",
         axis.text = element_text(size = 17, face = "bold"),
         axis.line = element_line(size = 2),
         axis.title = element_text(size = 17, face = "bold"),
         strip.text = element_text(size = 17, face = "bold"))
```

```{r}
p4
```

```{r}
# Generation sequence from 1 to 2000
Generation <- c(1:2000)

# Signals vector
signals = c(12, 22, 10, 16) # 5, 10, 20, 30

# Initialize Optimum vector
Optimum = rep(0, length(Generation))

# Loop over each signal to calculate the Optimum
for (i in signals) {
    Optimum = Optimum + 4 * sin((pi) * Generation / i)
}
Optimum = Optimum / 4

# Create data frame for plotting
df <- data.frame(Generation, Optimum)

# Load necessary libraries
library(ggplot2)
library(cowplot)
library(dplyr)

# Plot the Optimum over the first 501 generations
p4 <- ggplot(df %>% filter(Generation < 502)) + 
    geom_line(aes(Generation, Optimum), size = 1) +
    geom_hline(yintercept = mean(Optimum), color = "darkred", size = 1) +
    annotate("text", x = 40, y = 0.2, label = "Mean Phenotype", size = 4, vjust = 0.1, hjust = 0, col = "darkred", angle = 55) + 
    labs(x = NULL, y = NULL) +
    theme_cowplot() +
    theme(legend.position = "none",
          axis.text = element_text(size = 17, face = "bold"),
          axis.line = element_line(size = 2),
          axis.title = element_text(size = 17, face = "bold"),
          strip.text = element_text(size = 17, face = "bold"))

print(p4)

```

### Initial phenotype and their means

```{r}
############ Libraries and theme function ########
rm(list = ls())
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.text = element_text(size = 17, face = "bold"),
        axis.line = element_line(size = 2),
        axis.title = element_text(size = 17, face = "bold"),
        strip.text = element_text(size = 17, face = "bold"), 
        plot.title = element_text(hjust = 0.5)) #,legend.position = "none"
}

#################### Data Processing and plotting ###############

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^InitialPhenotypes\\d\\D+"

files <- list.files(dirpath, pattern, full.names = TRUE)
  
  dataframes <- list()
  for(file in files){
    replicate <- as.numeric(str_extract(file, "(?<=InitialPhenotypes)\\d+"))
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(herit = herit, loci = factor(loci), sd = sd,
             replicate = as.factor(replicate),
           identifier = paste(loci, herit, sep = "_")) %>% #, sd, gen, 
      select(Phenotype, replicate, identifier, loci)
    
    dataframes[[file]] <- data
  }
  combined_data <- bind_rows(dataframes) 
  

```

```{r}
str(combined_data)
```

```{r}
sum_data <- combined_data %>%
  group_by(identifier, loci) %>%
  summarize(
    mean_Phenotype = mean(Phenotype, na.rm = TRUE),
    sd_Phenotype = sd(Phenotype, na.rm = TRUE),
    .groups = 'drop'
  )
```

```{r}
# Define the order of the levels
levels_order <- c("300_0.1", "300_0.5", "300_0.8", "100_0.1", "100_0.5", "100_0.8", "70_0.1", "70_0.5", "70_0.8", "10_0.1", "10_0.5", "10_0.8", "1_0.1", "1_0.5", "1_0.8")

sum_data$identifier <- factor(sum_data$identifier, levels = levels_order)

# Plot
ggplot() +
  geom_point(data = sum_data, aes(x = mean_Phenotype, y = identifier), size = 5) +
  geom_errorbarh(
    data = sum_data,
    aes(xmin = mean_Phenotype - sd_Phenotype, xmax = mean_Phenotype + sd_Phenotype, y = identifier),
    height = 0.2
  ) +
  facet_wrap(~loci, scales = "free")+
  theme_bw()
```
> The above plot can probably help us explain the difference we see in phenotypes vs it's heritability when a trait is monogenic, oligogenic, and polygenic.

### Fixed Alleles
```{r}
fxd <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/FixedLoci1_n10_H0.8SD1.csv") %>% 
  group_by(Position, Frequency) %>% select(-Generation) %>% 
  distinct()
```


```{r}
unique(fxd$Frequency)
```


```{r}
re <- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/CS.dir/genome1_n10_H0.8SD1.csv") %>% dplyr::select(-Origin)
re2<- read.csv("~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/genome1_n10_H0.8.csv") %>% dplyr::select(-Origin)
```

```{r}
fixedlostfx <- function(genomefile, maxgeneration){
  fixed_alleles <- genomefile %>%
    group_by(Position) %>%
    filter(Frequency == 1) %>%
    select(Generation, Position, Frequency, Effect) %>%
    distinct(Position, .keep_all = TRUE)
  
  lost_alleles <- genomefile %>%
    group_by(Position) %>%
    filter(max(Generation) < maxgeneration) %>%
    summarize(
      Position = unique(Position),
      Generation = max(Generation) + 1,
      Frequency = 0,
      Effect = unique(Effect)
    )
  
  fixedlost.df <- bind_rows(fixed_alleles, lost_alleles) %>%
    arrange(Generation) %>%
    mutate(Fixation = ifelse(Frequency == as.factor(1), "Fixed", "Lost"))
  
  initial_freqs <- genomefile %>%
    filter(Generation == 1) %>%
    select(Position, `Initial Frequency` = Frequency)
  
  fixedlost.df <- fixedlost.df %>%
    left_join(initial_freqs, by = "Position")
  
  return(fixedlost.df)
}

```

```{r}
fixedlost.df <- fixedlostfx(re2, 2000)
```

```{r}
fixedlost.df
```
```{r, fig.height=3,fig.width=5}
fixedlost.df %>% 
  ggplot(aes(Position, Effect, color = `Initial Frequency`)) +
  geom_point(size = 3) +
  facet_grid(~ Fixation) +
  theme(panel.spacing = unit(3, "lines"))  

```

```{r, fig.height=3,fig.width=7}
library(ggplot2)
library(scales)

fixedlost.df %>%
  ggplot(aes(Position, Effect, color = `Initial Frequency`)) +
  geom_point(size = 5) +
  facet_wrap(~ Fixation, scales = "free") +
  scale_x_continuous(labels = function(x) {
    ifelse(x >= 1e6, paste0(x / 1e6, "MB"),
           ifelse(x >= 1e3, paste0(x / 1e3, "kb"), x))
  }) +
  theme(panel.spacing = unit(3, "lines"))

```


```{r}
# process_files <- function(dirpath, pattern, plot_type, maxgeneration) {
#   files <- list.files(dirpath, pattern, full.names = TRUE)
# 
#   dataframes <- list()
#   fixedlost_dataframes <- list()
#   for(file in files){
#     replicate_id <- as.numeric(str_extract(file, "(?<=genome)\\d+"))
#     herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
#     loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
#     sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
#     gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
# 
#     data <- read.csv(file, header = TRUE) %>%
#       select(Generation, Position, Frequency, Effect) %>%
#       group_by(Position) %>%
#       mutate(Position = factor(Position),
#              replicate = replicate_id,
#              herit = herit,
#              loci = loci,
#              sd = sd,
#              initFreq = Frequency[Generation == 1],
#              h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
#              loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
#              postion_effect_init = paste("position = ", Position," ",
#                                          "Effect = ", round(Effect, 2)," ", 
#                                          "Initial Freq = ", 
#                                          round(initFreq, 2)," ",
#                                          "repl = ", " ",replicate, sep = ""))
# 
#     if(!is.na(gen)) {
#       data$gen <- rep(gen, nrow(data))
#     }
# 
#     dataframes[[file]] <- data
# 
#     # Calculate fixed and lost alleles
#     fixedlost_df <- fixedlostfx(data, maxgeneration)
#     fixedlost_df <- fixedlost_df %>%
#       mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
#              loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""))
#     fixedlost_dataframes[[file]] <- fixedlost_df
#   }
# 
#   combined_data <- bind_rows(dataframes)
#   combined_fixedlost_data <- bind_rows(fixedlost_dataframes)
# 
#   # Generate plots
#   plots <- list()
#   if (plot_type == "loci_gen") {
#     loci_gens <- unique(combined_data$loci_gen)
#     for(loci_geni in loci_gens){
#       locus_data <- combined_data %>%
#         filter(loci_gen == loci_geni)
#       
#       p <- locus_data %>%
#         ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init))+
#         geom_line(linewidth = 0.2)+
#         facet_wrap(~h2_sd, ncol = 4)+
#         ylim(min = 0, max = 1)+
#         theme_bw()+
#         theme(legend.position = "none")
#       
#       plots[[loci_geni]] <- ggplotly(p)
#     }
#   } else if (plot_type == "loci") {
#     loci <- unique(combined_data$loci)
#     for(locus in loci){
#       locus_data <- combined_data %>%
#         filter(loci == locus)
#       
#       p <- locus_data %>%
#         ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init))+
#         geom_line(linewidth = 0.2)+
#         facet_wrap(~h2_sd, ncol = 4)+
#         ylim(min = 0, max = 1)+
#         theme_bw()
#       
#       plots[[locus]] <- ggplotly(p)
#     }
#   }
# 
#   # Generate fixed and lost alleles plots for each combination
#   fixedlost_plots <- list()
#   combinations <- unique(combined_fixedlost_data$loci_gen)
#   for(combo in combinations){
#     combo_data <- combined_fixedlost_data %>%
#       filter(loci_gen == combo)
#     
#     p_fixedlost <- combo_data %>%
#       ggplot(aes(Position, Effect, color = `Initial Frequency`)) +
#       geom_point(size = 3) +
#       facet_grid(~ Fixation) +
#       theme(panel.spacing = unit(3, "lines"))
# 
#     fixedlost_plots[[combo]] <- ggplotly(p_fixedlost)
#   }
# 
#   return(list(combined_data = combined_data, plots = plots, fixedlost_plots = fixedlost_plots))
# }

```


```{r}
# fixedlostfx <- function(genomefile, maxgeneration){
#   fixed_alleles <- genomefile %>%
#     group_by(Position) %>%
#     filter(Frequency == 1) %>%
#     select(Generation, Position, Frequency, Effect) %>%
#     distinct(Position, .keep_all = TRUE)
#   
#   lost_alleles <- genomefile %>%
#     group_by(Position) %>%
#     filter(max(Generation) < maxgeneration) %>%
#     summarize(
#       Position = unique(Position),
#       Generation = max(Generation) + 1,
#       Frequency = 0,
#       Effect = unique(Effect)
#     )
#   
#   fixedlost.df <- bind_rows(fixed_alleles, lost_alleles) %>%
#     arrange(Generation) %>%
#     mutate(Fixation = ifelse(Frequency == 1, "Fixed", "Lost"))
#   
#   initial_freqs <- genomefile %>%
#     filter(Generation == 1) %>%
#     select(Position, `Initial Frequency` = Frequency)
#   
#   fixedlost.df <- fixedlost.df %>%
#     left_join(initial_freqs, by = "Position")
#   
#   return(fixedlost.df)
# }
# 

```

```{r}
# dirpath <- "../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
# pattern <- "^genome15\\D"
# result <- process_files(dirpath, pattern, "loci_gen", maxgeneration = 2000)
# 
# # Access the combined data and plots
# combined_data <- result$combined_data
# plots <- result$plots
# fixedlost_plots <- result$fixedlost_plots
# 
# # Display the allele frequency plots
# for(plot in plots){
#   print(plot)
# }
# 
# # Display the fixed/lost alleles plots
# for(plot in fixedlost_plots){
#   print(plot)
# }

```

#### another one

```{r}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^genome15\\D" #(\\D|$)
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

data <- read.csv(file, header = TRUE) %>% 
  select(Generation, Position, Frequency, Effect) %>% 
  mutate(Position = factor(Position))

data$herit <- rep(herit, nrow(data))
data$loci <- rep(loci, nrow(data))
data$sd <- rep(sd, nrow(data))
data$gen <- rep(gen, nrow(data))

dataframes[[file]] <- data
}
```


```{r}
combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""))
```


```{r}
fixedlostfx <- function(genomedata, maxgeneration){
  fixed_alleles <- genomedata %>%
    group_by(Position, h2_sd, loci_gen) %>%
    filter(Frequency == 1) %>%
    select(Generation, Position, Frequency, Effect) %>%
    distinct(Position, .keep_all = TRUE)
  
  lost_alleles <- genomedata %>%
    group_by(Position, h2_sd, loci_gen) %>%
    filter(max(Generation) < maxgeneration) %>%
    summarize(
      Position = unique(Position),
      Generation = max(Generation) + 1,
      Frequency = 0,
      Effect = unique(Effect)
    )
  
  fixedlost.df <- bind_rows(fixed_alleles, lost_alleles) %>%
    arrange(Generation) %>%
    mutate(Fixation = ifelse(Frequency == 1, "Fixed", "Lost"))
  
  initial_freqs <- genomedata %>%
    filter(Generation == 1) %>%
    select(Position, `Initial Frequency` = Frequency)
  
  fixedlost.df <- fixedlost.df %>%
    left_join(initial_freqs, by = "Position")
  
  return(fixedlost.df)
}

```


```{r}
fixedlost.df <- fixedlostfx(combined_data, 2000)
```



```{r}

fixplots <- list()
loci_gens <- unique(fixedlost.df$loci_gen)
for(loci_geni in loci_gens){
  fixation_data <- fixedlost.df %>% 
    filter(loci_gen == loci_geni)
  myfix <- fixation_data %>% 
    ggplot(aes(Position, Effect, color = `Initial Frequency`))+
    geom_line(linewidth = 0.1)+
    facet_wrap(~interaction(Fixation, h2_sd), ncol = 4)+
  scale_x_continuous(labels = function(x) {
    ifelse(x >= 1e6, paste0(x / 1e6, "MB"),
           ifelse(x >= 1e3, paste0(x / 1e3, "kb"), x))
  }) +
  theme(panel.spacing = unit(3, "lines"))
  
  fixplots[[loci_geni]] <- (myfix) #ggplotly
}
fixplots
```

```{r}

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^genome15\\D"
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

  data <- read.csv(file, header = TRUE) %>%
    select(Generation, Position, Frequency, Effect) %>%
    mutate(Position = factor(Position))
  
  data$herit <- rep(herit, nrow(data))
  data$loci <- rep(loci, nrow(data))
  data$sd <- rep(sd, nrow(data))
  data$gen <- rep(gen, nrow(data))
  
  dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>%
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""))

fixedlostfx <- function(genomedata, maxgeneration) {
  fixed_alleles <- genomedata %>%
    group_by(Position, h2_sd, loci_gen) %>%
    filter(Frequency == 1) %>%
    select(Generation, Position, Frequency, Effect) %>%
    distinct(Position, .keep_all = TRUE)
  
  lost_alleles <- genomedata %>%
    group_by(Position, h2_sd, loci_gen) %>%
    filter(max(Generation) < maxgeneration) %>%
    summarize(
      Position = unique(Position),
      Generation = max(Generation) + 1,
      Frequency = 0,
      Effect = unique(Effect),
      .groups = 'drop'
    )
  
  fixedlost.df <- bind_rows(fixed_alleles, lost_alleles) %>%
    arrange(Generation) %>%
    mutate(Fixation = ifelse(Frequency == 1, "Fixed", "Lost"))
  
  initial_freqs <- genomedata %>%
    filter(Generation == 1) %>%
    select(Position, `Initial Frequency` = Frequency)
  
  fixedlost.df <- fixedlost.df %>%
    left_join(initial_freqs, by = "Position")
  
  return(fixedlost.df)
}
fixedlost.df <- fixedlostfx(combined_data, 2000)

fixplots <- list()
loci_gens <- unique(fixedlost.df$loci_gen)
for(loci_geni in loci_gens) {
  fixation_data <- fixedlost.df %>%
    filter(loci_gen == loci_geni)
  myfix <- fixation_data %>%
    ggplot(aes(Position, Effect, color = `Initial Frequency`)) +
    geom_line(size = 0.1) +
    facet_wrap(~interaction(Fixation, h2_sd), ncol = 4) +
    scale_x_continuous(labels = function(x) {
      ifelse(x >= 1e6, paste0(x / 1e6, "MB"),
             ifelse(x >= 1e3, paste0(x / 1e3, "kb"), x))
    }) +
    theme(panel.spacing = unit(3, "lines"))
  
  fixplots[[loci_geni]] <- myfix
}
fixplots

```

