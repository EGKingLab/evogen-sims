---
title: "Fixation_Percentage"
format: html
editor: visual
---

```{r, fig.height=30, fig.width=49, echo=FALSE, dpi = 300, message=FALSE}
#| label: Fixation_Percentages

#=============================================================
# Full Code Example with future.apply
#=============================================================

# Install packages if needed:
# install.packages(c("dplyr", "data.table", "stringr", "ggplot2", "future.apply"))

library(dplyr)
library(data.table)
library(stringr)
library(ggplot2)
library(future)
library(future.apply)

#-------------------------------------------------------------
# 1) Set Path and File Pattern
#-------------------------------------------------------------
path <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome\\d+_n\\d+_H0.(1|5|8)(SD[1|4])?Gen(10|30)?\\.csv$"

#-------------------------------------------------------------
# 2) Function to Process Files in Chunks using future_lapply
#-------------------------------------------------------------
process_files_in_chunks <- function(files, chunk_size = 100, num_workers = 4) {
  combined_data <- list()

  # Iterate over chunks of files
  for (i in seq(1, length(files), by = chunk_size)) {
    chunk <- files[i:min(i + chunk_size - 1, length(files))]
    
    # Set up parallel plan
    plan(multisession, workers = num_workers)
    
    # Parallel load using future_lapply
    data_list <- future_lapply(
      X = chunk,
      FUN = function(file) {
        # Extract parameters from filename
        repl <- as.numeric(str_extract(file, "(?<=genome)\\d+"))
        H <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
        loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
        SD <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
        Gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

        # Read data
        data <- fread(file) %>%
          select(-Origin) %>%
          mutate(
            Position = factor(Position),
            repl = repl,
            H = H,
            loci = loci,
            SD = SD,
            Gen = Gen
          )
        
        return(data)
      }
    )
    
    # Combine this chunk's data
    combined_data <- c(combined_data, data_list)
  }

  # Bind all chunk results into one data frame
  combined_data <- bind_rows(combined_data)
  return(combined_data)
}

#-------------------------------------------------------------
# 3) Main Wrapper Function
#-------------------------------------------------------------
myheatmaps <- function(path, pattern, chunk_size = 100, num_workers = 4) {
  # List all files that match the pattern
  files <- list.files(path, pattern, full.names = TRUE)
  
  # Process in chunks using future_lapply
  combined_data <- process_files_in_chunks(files, chunk_size, num_workers)
  return(combined_data)
}

#-------------------------------------------------------------
# 4) Run the Data Loading Function
#-------------------------------------------------------------
# Adjust num_workers as needed:
mydata <- myheatmaps(path, pattern, chunk_size = 100, num_workers = 8)

#-------------------------------------------------------------
# 5) Post-Processing Steps (same as your original code)
#-------------------------------------------------------------
mydata2 <- mydata %>%
  group_by(H, loci, SD, Gen, repl, Position) %>%
  mutate(
    Fixation = case_when(
      Frequency == 1 ~ "Fixed",
      Frequency < 1 & Generation == max(Generation) & max(Generation) < 2000 ~ "Fixed",
      TRUE ~ NA_character_
    ),
    InitFreq = case_when(
      Generation == 1 ~ Frequency,
      TRUE ~ NA_real_
    )
  ) %>%
  ungroup()

mydata4 <- mydata2 %>%
  group_by(loci, H, Gen, SD, repl, Position) %>%
  mutate(
    InitFreq = ifelse(is.na(InitFreq), lag(InitFreq), InitFreq),
    TotalLoci = loci * 30
  ) %>%
  fill(InitFreq) %>%
  drop_na() %>%
  distinct()

newd <- mydata4 %>%
  group_by(Fixation, loci, TotalLoci, H, Gen, SD) %>%
  summarise(n = n(), .groups = 'keep') %>%
  distinct() %>%
  mutate(
    Perc_Loci = n * 100 / TotalLoci,
    Gen_SD    = paste0("Geen = ", Gen, " SD = ", SD),
    H         = paste0("H = ", H)
  ) %>%
  distinct()

#-------------------------------------------------------------
# 6) Plot the Results (with your chosen aesthetics)
#-------------------------------------------------------------
plot <- ggplot(data = newd, aes(x = as.factor(loci), y = Perc_Loci, color = as.factor(loci))) +
  geom_point(size = 10) +
  geom_line(aes(group = 1), linewidth = 2) +
  geom_text(aes(label = round(Perc_Loci, 0)), 
            vjust = -0.3, hjust = 1, size = 18, fontface = "bold", angle = 45, show.legend = FALSE) +
  facet_grid(H ~ Gen_SD, scales = "free") +
  labs(
    x = "Number of Loci",
    y = "Percentage of Loci (%)",
    color = "Number of Loci"
  ) +
  theme_bw() +
  theme(
    text            = element_text(family = "sans"),
    axis.text.x     = element_text(face = "bold", size = 30, angle = 15, hjust = 1, margin = margin(t = 10)),
    axis.text.y     = element_text(face = "bold", size = 30, angle = 15, margin = margin(r = 10)),
    plot.title      = element_text(hjust = 0.01, face = "bold", size = 40),
    axis.title.x    = element_text(size = 40, face = "bold", margin = margin(t = 30)),
    axis.title.y    = element_text(size = 40, face = "bold", margin = margin(r = 35)),
    strip.text      = element_text(size = 40, face = "bold"),
    panel.spacing   = unit(5, "lines"),
    panel.grid      = element_blank(),
    legend.position = "bottom",
    legend.justification = "center",
    legend.text     = element_text(size = 40, face = "bold")
  ) +
  guides(color = guide_legend(override.aes = list(shape = 16, size = 10), byrow = TRUE))

#-------------------------------------------------------------
# 7) Print the Plot
#-------------------------------------------------------------
print(plot)

```
