---
title: "Supplemental Figures"
author: "E.T"
format:
  docx:
    toc: true
    fontsize: 10pt
    fig-cap-location: bottom
    fig-numbering: false  
  pdf:
    toc: true
  html:
    toc: true
editor: visual
---



```{r, echo=FALSE}
#     geometry: "left=0.5in,right=0.5in,top=0.5in,bottom=0.5in"
#     geometry: "landscape"
# execute:
#   fig-align: "left"

# tinytex::uninstall_tinytex()
# tinytex::install_tinytex()
# tinytex::tlmgr_search("scrartcl.cls")
# tinytex::tlmgr_install("koma-script")
# tinytex::tlmgr_update()
```

## 1. Instantaneous model

### 1.1. AF All param & Single replicate

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("../AlleleFrequencyPlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome10\\D"
result <- process_files(dirpath, pattern, "loci_gen")
combined_data <- result$combined_data
plots <- result$plots
```

#### 1.1.1. Monogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Mono_AF
#| fig-cap: "Figure: Monogenic single replicate allele frequency plot for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1], plots[2], plots[3]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 1.1.2. Oligogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Oligo_AF
#| fig-cap: "Figure: Oligogenic single replicate allele frequency plot for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[4], plots[5], plots[6]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 1.1.3. Ploygenic 70 loci

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_70_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 70 genomic architecture for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[13], plots[14], plots[15]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 1.1.4. Polygenic 100 loci

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_100_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 100 genomic architecture for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[7], plots[8], plots[9]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 1.1.5. Polygenic 300 loci

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_300_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 300 genomic architecture for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10], plots[11], plots[12]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



```{r, fig.height=50, fig.width=30, echo=FALSE}
# library(cowplot)
# labels <- LETTERS[1:15]
# plot_grid(plotlist = plots, ncol = 3, labels = labels, label_size = 40, label_colour = "red")
```



```{r, echo=FALSE}
### 1.2. AF all replicates Ribbon

#### 1.2.1. Ribbon

# # library(dplyr)
# # library(stringr)
# # library(tidyselect)
# library(future)
# library(purrr)
# library(furrr)
# # 
# # # Ensure furrr is installed and loaded
# # if (!requireNamespace("furrr", quietly = TRUE)) {
# #   install.packages("furrr")
# # }
# # library(furrr)
# # 
# # # Set up parallel processing
# # plan(multisession, workers = 96)
# # 
# # # Define the data extraction function
# # extract_info <- function(file) {
# #   repl <- str_extract(file, "(?<=genome)\\d+")
# #   H <- str_extract(file, "(?<=H)0\\.\\d+")
# #   Gen <- str_extract(file, "(?<=Gen)\\d+")
# #   SD <- str_extract(file, "(?<=SD)\\d+")
# #   Loci <- str_extract(file, "(?<=n)\\d+")
# #   name <- basename(file)
# #   
# #   read.csv(file) %>%
# #     mutate(repl = repl, H = H, Gen = Gen, SD = SD, Loci = Loci, Name = name)
# # }
# # 
# # # List all files
# # pathdir <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
# # pattern <- "^genome[1|2|3|4|5|6|7]_n"
# # allfiles <- list.files(pathdir, pattern = pattern, full.names = TRUE)
# # 
# # # Extract data in parallel
# # alldatas <- map_dfr(allfiles, extract_info)
# # 
# # # Define the summarization function
# # summarize_data <- function(data) {
# #   data %>%
# #     group_by(Generation, Position, H, Gen, SD, Loci) %>%
# #     summarise(
# #       Mean_Freq = mean(Frequency, na.rm = TRUE),
# #       Median_Freq = median(Frequency, na.rm = TRUE),
# #       SD_Freq = sd(Frequency, na.rm = TRUE),
# #       LowerQuantile = quantile(Frequency, 0.25, na.rm = TRUE),
# #       UpperQuantile = quantile(Frequency, 0.75, na.rm = TRUE)
# #     )
# # }
# # 
# # # Split the data into chunks for parallel processing by Loci
# # data_chunks <- split(alldatas, alldatas$Loci)
# # 
# # # Summarize data in parallel
# # summary_data <- map_dfr(data_chunks, summarize_data)
# # 
# # # Clean up parallel processing plan
# # plan(sequential)
# 
# ###############################################################################
# library(dplyr)
# library(tidyselect)
# library(foreach)
# library(doParallel)
# library(stringr)
# library(readr)  # For read_csv function
# 
# # Set up parallel backend to use many processors, leaving 32 cores free
# totalCores <- parallel::detectCores()
# numCores <- max(1, totalCores - 32)  # Ensure at least one core is used
# cl <- makeCluster(numCores)
# registerDoParallel(cl)
# 
# # Define the data extraction function
# extract_info <- function(file) {
#   repl <- str_extract(file, "(?<=genome)\\d+")
#   H <- str_extract(file, "(?<=H)0\\.\\d+")
#   Gen <- str_extract(file, "(?<=Gen)\\d+")
#   SD <- str_extract(file, "(?<=SD)\\d+")
#   Loci <- str_extract(file, "(?<=n)\\d+")
#   name <- basename(file)
# 
#   read_csv(file) %>%
#     mutate(repl = repl, H = H, Gen = Gen, SD = SD, Loci = Loci, Name = name)
# }
# 
# # List all files
# pathdir <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
# pattern <- "^genome(1|10)_n(10)"
# allfiles <- list.files(pathdir, pattern = pattern, full.names = TRUE)
# 
# # Extract data in parallel using foreach
# alldatas <- foreach(file = allfiles, .combine = bind_rows, .packages = c('dplyr', 'stringr', 'readr')) %dopar% {
#   extract_info(file)
# }
# 
# # Define the summarization function
# summarize_data <- function(data) {
#   data %>%
#     group_by(Generation, Position, H, Gen, SD, Loci) %>%
#     summarise(
#       Mean_Freq = mean(Frequency, na.rm = TRUE),
#       Median_Freq = median(Frequency, na.rm = TRUE),
#       SD_Freq = sd(Frequency, na.rm = TRUE),
#       LowerQuantile = quantile(Frequency, 0.25, na.rm = TRUE),
#       UpperQuantile = quantile(Frequency, 0.75, na.rm = TRUE)
#     ) %>%
#     ungroup()
# }
# 
# 
# # Split the data into chunks for parallel processing by Loci
# data_chunks <- split(alldatas, alldatas$Loci)
# 
# # Summarize data in parallel using foreach
# summary_data <- foreach(chunk = data_chunks, .combine = bind_rows, .packages = 'dplyr') %dopar% {
#   summarize_data(chunk)
# }
# 
# summary_data2 <- summary_data %>% mutate(Loci_Gen = paste0("Loci = ", Loci, " ", "Gen = ", Gen))
# 
# Loci_Gen <- unique(summary_data2$Loci_Gen)
# 
# myplots <- list()
# 
# for(i in Loci_Gen){
#   plot_data <- summary_data2 %>% filter(Loci_Gen == i)
# 
#    unique_positions <- unique(plot_data$Position)
#       if (length(unique_positions) > 15) {
#         selected_positions <- sample(unique_positions, 15)
#         plot_data <- plot_data %>%
#           filter(Position %in% selected_positions)
#       }
#   
#   plts <- plot_data %>%  
#   ggplot(aes(x = Generation, y = Mean_Freq, 
#              group = factor(Position), color = (Position))) +
#   geom_line(linewidth = 0.2) +
#   geom_ribbon(aes(ymin = LowerQuantile, ymax = UpperQuantile, fill = factor(Position)), alpha = 0.01) +
#  geom_errorbar(aes(ymin = Mean_Freq - SD_Freq, ymax = Mean_Freq + SD_Freq), width = 0.2) +
#   #geom_point(aes(y = Median_Freq), shape = 21, fill = "white", size = 2) +
#   facet_grid(H ~ SD, labeller = label_both) +  # Use a predefined labeller function
#   theme_bw() +
#   theme(legend.position = "none",
#         axis.text.x = element_text(size = 20, face = "bold"),
#         axis.text.y = element_text(size = 20, face = "bold"),
#         axis.line = element_line(linewidth = 5),
#         axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 20)),
#         axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)),
#         strip.text = element_text(size = 20, face = "bold"),
#         panel.spacing = unit(3, "lines"),
#         panel.grid = element_blank())
#   
#   myplots[[i]] <- plts 
# }
# 
# plan(sequential)
# ###############################################################################

# plan(multisession, workers = 96)
#
# pathdir <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
# pattern <- "^genome"
# allfiles <- list.files(pathdir, pattern = pattern, full.names = TRUE)
#
# extract_info <- function(file) {
#   repl <- str_extract(file, "(?<=genome)\\d+")
#   H <- str_extract(file, "(?<=H)0\\.\\d+")
#   Gen <- str_extract(file, "(?<=Gen)\\d+")
#   SD <- str_extract(file, "(?<=SD)\\d+")
#   Loci <- str_extract(file, "(?<=n)\\d+")
#   name <- basename(file)
#
#   read.csv(file) %>%
#     mutate(repl = repl, H = H, Gen = Gen, SD = SD, Loci = Loci, Name = name)
# }
#
# alldatas <- map_dfr(allfiles, extract_info)
#
# plan(sequential)
#
# 
# #cut_alldata <- alldatas[1:4000, ]
# 
# 
# library(furrr)
# 
# # Set up parallel processing
# plan(multisession, workers = 96)
# 
# # Define the summarization function
# summarize_data <- function(data) {
#   data %>%
#     group_by(Generation, Position, H, Gen, SD, Loci) %>%
#     summarise(
#       Mean_Freq = mean(Frequency, na.rm = TRUE),
#       Median_Freq = median(Frequency, na.rm = TRUE),
#       SD_Freq = sd(Frequency, na.rm = TRUE),
#       LowerQuantile = quantile(Frequency, 0.25, na.rm = TRUE),
#       UpperQuantile = quantile(Frequency, 0.75, na.rm = TRUE)
#     )
# }
# 
# # Split the data into chunks for parallel processing
# data_chunks <- split(alldatas, alldatas$Loci)
# 
# # Use future_map_dfr to apply the summarization function in parallel
# summary_data <- future_map_dfr(data_chunks, summarize_data)
# 
# # Clean up parallel processing plan
# plan(sequential)

```

```{r, fig.width = 20, fig.height=12, echo=FALSE}
# myplots[3]
```


```{r, echo=FALSE}

#### 1.2.2. Violin
# 
# ###############################################################################
# library(dplyr)
# library(tidyselect)
# library(foreach)
# library(doParallel)
# library(stringr)
# library(readr)
# library(ggplot2)
# 
# # Set up parallel backend to use many processors, leaving 16 cores free
# totalCores <- parallel::detectCores()
# numCores <- max(1, totalCores - 16)  # Ensure at least 1 core is used
# cl <- makeCluster(numCores)
# registerDoParallel(cl)
# 
# #  Parameter Extraction
# extract_info <- function(file) {
#   repl <- as.numeric(str_extract(file, "(?<=genome)\\d+"))
#   H <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
#   Gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
#   SD <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
#   Loci <- as.numeric(str_extract(file, "(?<=n)\\d+"))
#   name <- basename(file)
# 
#   read_csv(file) %>%
#     mutate(repl = repl, H = H, Gen = Gen, SD = SD, Loci = Loci, Name = name)
# }
# 
# # List all files
# pathdir <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
# pattern <- "^genome\\d+_n(100)_"
# allfiles <- list.files(pathdir, pattern = pattern, full.names = TRUE)
# 
# # Extract data in parallel using foreach
# alldatas <- foreach(file = allfiles, .combine = bind_rows, .packages = c('dplyr', 'stringr', 'readr')) %dopar% {
#   extract_info(file)
# }
# 
# alldatas <- alldatas %>%
#   mutate(
#     Generation = as.numeric(Generation),
#     Gen = as.numeric(Gen),
#     H = as.numeric(H),
#     SD = as.numeric(SD),
#     Loci = as.numeric(Loci),
#     repl = as.numeric(repl)
#   )
# 
# # Adjust frequencies and calculate lag frequency difference
# alldatas <- alldatas %>%
#   group_by(Gen, H, SD, Loci, repl, Position) %>%
#   arrange(Generation) %>%
#   mutate(
#     Initial_Frequency = first(Frequency),
#     Adjusted_Frequency = Frequency - Initial_Frequency,
#     Lag_Difference = Adjusted_Frequency - lag(Adjusted_Frequency)
#   ) %>%
#   ungroup()
# 
# # Create a parameter combination identifier
# alldatas <- alldatas %>%
#   mutate(
#     Param_Combination = paste("Loci", Loci, "Gen", Gen, sep = "_")
#   )
# 
# # Subset the data where Generation equals 1 or Generation divisible by (Gen * 3)
# subset_data <- alldatas %>%
#   filter(Generation == 1 | Generation %% (Gen*3)  == 0)
# 
# # Get unique parameter combinations
# param_combinations <- unique(subset_data$Param_Combination)
# 
# my_violin_plots <- list()
# 
# for (param in param_combinations) {
#   plot_data <- subset_data %>%
#     filter(Param_Combination == param)
#   
#   unique_positions <- unique(plot_data$Position)
#       if (length(unique_positions) > 3) {
#         selected_positions <- sample(unique_positions, 3)
#         plot_data <- plot_data %>%
#           filter(Position %in% selected_positions)
#       }
# 
#   plt <- ggplot(plot_data %>% filter(Generation <= 500), aes(x = factor(Generation), y = (Adjusted_Frequency), color = factor(Position))) +
#     geom_violin() +
#     ggtitle(param) +
#     facet_grid(H ~ SD, labeller = label_both) +
#     theme_bw() +
#     theme(legend.position = "none",
#       axis.text.x = element_text(angle = 90, hjust = 1),
#       axis.text = element_text(size = 12, face = "bold"),
#       axis.title = element_text(size = 14, face = "bold"),
#       strip.text = element_text(size = 12, face = "bold")
#     )
# 
#   my_violin_plots[[param]] <- plt
# }
# 
# # Stop the parallel cluster
# stopCluster(cl)

```

```{r, fig.width = 8, fig.height=4, echo=FALSE}
# #| label: Violin_100_Allele_Frequency
# my_violin_plots[3]

# Figure: Each color represents a single locus for all 30 replicates after every 90 generations. The trajectory is for only 3 randomly selected loci from 100.
```


### 1.2. Phenotypes all params

```{r, echo=FALSE}
source("../PhenotypePlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes"
result <- process_files(dirpath, pattern, "loci_gen")
combined_data <- result$combined_data
plots <- result$plots

```

```{r, fig.width = 25, fig.height = 12, echo=FALSE}
# plots[[10]]
```

#### 1.2.1. Monogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Monogenic_Phenotypes
#| fig-cap: "Figure: Monogenic mean population phenotypic plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1], plots[2], plots[3]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 1.2.2. Oligogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Oligo_Pheno
#| fig-cap: "Figure: Oligogenic mean population phenotypic plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[4], plots[5], plots[6]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 1.2.3. Polygenic 70

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_70_Pheno
#| fig-cap: "Figure: Polygenic (70 loci) mean population phenotypic plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[13], plots[14], plots[15]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 1.2.4. Polygenic 100

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_100_Pheno
#| fig-cap: "Figure: Polygenic (100 loci) mean population phenotypic plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[7], plots[8], plots[9]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 1.2.5. Polygenic 300

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_300_Pheno
#| fig-cap: "Figure: Polygenic (300 loci) mean population phenotypic plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10], plots[11], plots[12]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


### 1.3. Spec All params

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(stringr)
  
  theme_set(theme_classic())
  
  mytheme <- theme_classic() +
    theme(legend.position = "none",
          axis.text.x = element_text(size = 20, face = "bold"),
          axis.text.y = element_text(size = 20, face = "bold"),
          axis.line = element_line(linewidth = 5),
          axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 20)),
          axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)),
          strip.text = element_text(size = 20, face = "bold"),
          panel.spacing = unit(3, "lines"),
          panel.grid = element_blank())
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replct = str_extract(base_name, "genome\\d+"),
      n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen = str_extract(base_name, "Gen\\d+"),
      Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data # I wanted to filter based on some paranoia but it is not necessary here.
  
  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Compute spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  
  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)
  
  # Filter based on Period thresholds for each Gen value
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)
  # Generate the spectral plots faceted by Genome, H, SD, and Gen
  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = replct, group = replct)) +
    geom_line(linewidth = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mytheme
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 12, fig.width = 8, echo=FALSE}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome"
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)
# result[[15]]
```

#### 1.3.1. Monogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Mono_SA
#| fig-cap: "Figure: Monogenic spectral density plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[1], result[2], result[3]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 1.3.2. Oligogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Oligo_SA
#| fig-cap: "Figure: Oligogenic spectral density plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[4], result[5], result[6]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 1.3.3. Polygenic 70

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_70_SA
#| fig-cap: "Figure: Polygenic (70 loci) spectral density plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[10], result[11], result[12]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 1.3.4. Polygenic 100

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_100_SA
#| fig-cap: "Figure: Polygenic (100 loci) spectral density plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[7], result[8], result[9]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 1.3.5. Polygenic 300

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: Instant_Poly_300_SA
#| fig-cap: "Figure: Polygenic (300 loci) spectral density plot across 30 replicates for instantaneous selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[13], result[14], result[15]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


## 2. Gradual I model

### 2.1. AF All param & Single replicate

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("../AlleleFrequencyPlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^genome10\\D"
result <- process_files(dirpath, pattern, "loci_gen")
combined_data <- result$combined_data
plots <- result$plots
```

#### 2.1.1. Monogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Mono_AF
#| fig-cap: "Figure: Monogenic single replicate allele frequency plot for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1], plots[2], plots[3]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.1.2. Oligogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Olig_AF
#| fig-cap: "Figure: Oligogenic single replicate allele frequency plot for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[4], plots[5], plots[6]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.1.3. Polygenic 70 loci

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_70_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 70 genomic architecture for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[13], plots[14], plots[15]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.1.4. Polygenic 100 loci

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_100_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 100 genomic architecture for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[7], plots[8], plots[9]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.1.5. Polygenic 300 loci

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_300_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 300 genomic architecture for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10], plots[11], plots[12]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


### 2.2. Phenotypes all params

```{r, echo=FALSE}
source("../PhenotypePlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^MeanPhenotypes"
result <- process_files(dirpath, pattern, "loci_gen")
combined_data <- result$combined_data
plots <- result$plots

```

```{r, fig.width = 25, fig.height = 12, echo=FALSE}
# plots[[10]]
```

#### 2.2.1. Monogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Mono_Pheno
#| fig-cap: "Figure: Monogenic mean population phenotypic plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1], plots[2], plots[3]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.2.2. Oligogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Oligo_Pheno
#| fig-cap: "Figure: Oligogenic mean population phenotypic plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[4], plots[5], plots[6]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.2.3. Polygenic 70

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_70_Pheno
#| fig-cap: "Figure: Polygenic (70 loci) mean population phenotypic plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[13], plots[14], plots[15]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.2.4. Polygenic 100

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_100_Pheno
#| fig-cap: "Figure: Polygenic (100 loci) mean population phenotypic plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
plot_grid(plotlist = c(plots[7], plots[8], plots[9]), ncol = 1, labels = labels, label_size = 40, label_colour = "red")
```


#### 2.2.5. Polygenic 300

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_300_Pheno
#| fig-cap: "Figure: Polygenic (300 loci) mean population phenotypic plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10], plots[11], plots[12]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


### 2.3. Spec All params

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(stringr)
  
  theme_set(theme_classic())
  
  mytheme <- theme_classic() +
    theme(legend.position = "none",
          axis.text.x = element_text(size = 20, face = "bold"),
          axis.text.y = element_text(size = 20, face = "bold"),
          axis.line = element_line(linewidth = 5),
          axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 20)),
          axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)),
          strip.text = element_text(size = 20, face = "bold"),
          panel.spacing = unit(3, "lines"),
          panel.grid = element_blank())
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replct = str_extract(base_name, "genome\\d+"),
      n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen = str_extract(base_name, "Gen\\d+"),
      Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data # I wanted to filter based on some paranoia but it is not necessary here.
  
  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Compute spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  
  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)
  
  # Filter based on Period thresholds for each Gen value
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)
  # Generate the spectral plots faceted by Genome, H, SD, and Gen
  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = replct, group = replct)) +
    geom_line(linewidth = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mytheme
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 12, fig.width = 8, echo=FALSE}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^genome"
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)
# result[[15]]
```

#### 2.3.1. Monogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Mono_SA
#| fig-cap: "Figure: Monogenic spectral density plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[1], result[2], result[3]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



#### 2.3.2. Oligogenic

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Oligo_SA
#| fig-cap: "Figure: Oligogenic spectral density plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[4], result[5], result[6]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.3.3. Polygenic 70

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_70_SA
#| fig-cap: "Figure: Polygenic (70 loci) spectral density plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[10], result[11], result[12]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.3.4. Polygenic 100

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_100_SA
#| fig-cap: "Figure: Polygenic (100 loci) spectral density plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[7], result[8], result[9]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```


#### 2.3.5. Polygenic 300

```{r, fig.height = 30, fig.width = 20, echo=FALSE}
#| label: GradI_Poly_300_SA
#| fig-cap: "Figure: Polygenic (300 loci) spectral density plot across 30 replicates for gradual two equal seasons selection, showing parameter interactions with A representing a selection lasting 10 generations, B 20 generations, and C 30 generations."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[13], result[14], result[15]), ncol = 1, labels = labels, label_size = 40, label_colour = "red"))
```



## 3. Gradual II model

### 3.1. AF All param & Single replicate

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("../AlleleFrequencyPlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome10\\D"
result <- process_files(dirpath, pattern, "loci")
combined_data <- result$combined_data
plots <- result$plots
```

#### 3.1.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Mono_AF
#| fig-cap: "Figure: Monogenic single replicate allele frequency plot for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.1.2. Oligogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Olig_AF
#| fig-cap: "Figure: Oligogenic single replicate allele frequency plot for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.1.3. Polygenic 70 loci

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_70_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 70 genomic architecture for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[70]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.1.4. Polygenic 100 loci

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_100_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 100 genomic architecture for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
print(plot_grid(plotlist = c(plots[100]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.1.5. Polygenic 300 loci

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_300_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 300 genomic architecture for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
print(plot_grid(plotlist = c(plots[300]), ncol = 1, label_size = 40, label_colour = "red"))
```



### 3.2. Phenotypes all params

```{r, echo=FALSE}
source("../PhenotypePlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^MeanPhenotypes"
result <- process_files(dirpath, pattern, "loci")
combined_data <- result$combined_data
plots <- result$plots

```

```{r, fig.width = 25, fig.height = 12, echo=FALSE}
# plots[[10]]
```

#### 3.2.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Mono_Pheno
#| fig-cap: "Figure: Monogenic mean population phenotypic plot across 30 replicates (each line represents a single replicate) for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1]), ncol = 1, label_size = 40))
```



#### 3.2.2. Oligogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Oligo_Pheno
#| fig-cap: "Figure: Oligogenic mean population phenotypic plot across 30 replicates (each line represents a single replicate) for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.2.3. Polygenic 70

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_70_Pheno
#| fig-cap: "Figure: Polygenic (70 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[70]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.2.4. Polygenic 100

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_300_Pheno
#| fig-cap: "Figure: Polygenic (100 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[100]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.2.5. Polygenic 300

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_100_Pheno
#| fig-cap: "Figure: Polygenic (300 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
# labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[300]), ncol = 1, label_size = 40, label_colour = "red"))
```



### 3.3. Spec All params

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(stringr)
  
  theme_set(theme_classic())
  
  mytheme <- theme_classic() +
    theme(legend.position = "none",
          axis.text.x = element_text(size = 20, face = "bold"),
          axis.text.y = element_text(size = 20, face = "bold"),
          axis.line = element_line(linewidth = 5),
          axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 20)),
          axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)),
          strip.text = element_text(size = 20, face = "bold"),
          panel.spacing = unit(3, "lines"),
          panel.grid = element_blank())
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replct = str_extract(base_name, "genome\\d+"),
      n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen = str_extract(base_name, "Gen\\d+"),
      Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data # I wanted to filter based on some paranoia but it is not necessary here.
  
  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Compute spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  
  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)
  
  # Filter based on Period thresholds for each Gen value
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)
  # Generate the spectral plots faceted by Genome, H, SD, and Gen
  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = replct, group = replct)) +
    geom_line(linewidth = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mytheme
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 12, fig.width = 8, echo=FALSE}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome"
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)
# result[[15]]
```

#### 3.3.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Mono_SA
#| fig-cap: "Figure: Monogenic spectral density plot across 30 replicates for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[1]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.3.2. Oligogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Oligo_SA
#| fig-cap: "Figure: Oligogenic spectral density plot across 30 replicates for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[2]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.3.3. Polygenic 70

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_70_SA
#| fig-cap: "Figure: Polygenic (70 loci) spectral density plot across 30 replicates for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[3]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.3.4. Polygenic 100

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_Poly_100_SA
#| fig-cap: "Figure: Polygenic (100 loci) spectral density plot across 30 replicates for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[4]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 3.3.5. Polygenic 300

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: GradII_GradII_Poly_300_SA
#| fig-cap: "Figure: Polygenic (300 loci) spectral density plot across 30 replicates for gradual four unequal seasons selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[5]), ncol = 1, label_size = 40, label_colour = "red"))
```



## 4. Constant model

### 4.1. AF All param & Single replicate

```{r, warning=FALSE, echo=FALSE, message=FALSE}
rm(list = ls())
source("../AlleleFrequencyPlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/CS.dir/"
pattern <- "^genome10\\D"
result <- process_files(dirpath, pattern, "loci")
combined_data <- result$combined_data
plots <- result$plots
```

#### 4.1.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Mono_AF
#| fig-cap: "Figure: Monogenic single replicate allele frequency plot for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 4.1.2. Oligogenic

```{r, fig.height = 20, fig.width = 20, echo=FALSE}
#| label: Constant_Olig_AF
#| fig-cap: "Figure: Oligogenic single replicate allele frequency plot for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[10]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 4.1.3. Polygenic 70 loci

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_70_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 70 genomic architecture for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[70]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 4.1.4. Polygenic 100 loci

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_100_AF
#| fig-cap: "Figure:Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 100 genomic architecture for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
plot_grid(plotlist = c(plots[100]), ncol = 1, label_size = 40, label_colour = "red")
```


#### 4.1.5. Polygenic 300 loci

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_300_AF
#| fig-cap: "Figure: Polygenic single replicate allele frequency plot with 15 loci sampled from 300 genomic architecture for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[300]), ncol = 1, label_size = 40, label_colour = "red"))
```



### 4.2. Phenotypes all params

```{r, echo=FALSE}
source("../PhenotypePlotCode.R")
dirpath <- "../../../output.dir/Selection_Models/WF.dir/CS.dir/"
pattern <- "^MeanPhenotypes"
result <- process_files(dirpath, pattern, "loci")
combined_data <- result$combined_data
plots <- result$plots

```

```{r, fig.width = 25, fig.height = 12, echo=FALSE}
# plots[[10]]
```

#### 4.2.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Mono_Pheno
#| fig-cap: "Figure: Monogenic mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[1]), ncol = 1, label_size = 40))
```



#### 4.2.2. Oligogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Oligo_Pheno
#| fig-cap: "Figure: Oligogenic mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
plot_grid(plotlist = c(plots[10]), ncol = 1, label_size = 40, label_colour = "red")
```



#### 4.2.3. Polygenic 70

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_70_Pheno
#| fig-cap: "Figure: Polygenic (70 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[70]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 4.2.4. Polygenic 100

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_300_Pheno
#| fig-cap: "Figure: Polygenic (100 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[100]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 4.2.5. Polygenic 300

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_100_Pheno
#| fig-cap: "Figure: Polygenic (300 loci) mean population phenotypic plot across 30 replicates (each line represents a single replicate) for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
# labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(plots[300]), ncol = 1, label_size = 40, label_colour = "red"))
```


### 4.3. Spec All params

```{r, echo=FALSE}
run_fft_analysis <- function(folder_path, pattern, spectrum_span = 2) {
  library(parallel)
  library(doParallel)
  library(foreach)
  library(dplyr)
  library(ggplot2)
  library(cowplot)
  library(stringr)
  
  theme_set(theme_classic())
  
  mytheme <- theme_classic() +
    theme(legend.position = "none",
          axis.text.x = element_text(size = 20, face = "bold"),
          axis.text.y = element_text(size = 20, face = "bold"),
          axis.line = element_line(linewidth = 5),
          axis.title.x = element_text(size = 40, face = "bold", margin = margin(t = 20)),
          axis.title.y = element_text(size = 40, face = "bold", margin = margin(r = 25)),
          strip.text = element_text(size = 20, face = "bold"),
          panel.spacing = unit(3, "lines"),
          panel.grid = element_blank())
  
  # File list
  
  file_list <- list.files(path = folder_path, pattern = pattern, full.names = TRUE)
  
  if (length(file_list) == 0) {
    stop("No files found with the given pattern.")
  }
  
  # Create a data frame with filenames and extract parameters
  
  files_df <- data.frame(file_name = file_list) %>%
    mutate(
      base_name = basename(file_name),
      replct = str_extract(base_name, "genome\\d+"),
      n = str_extract(base_name, "_n\\d+") %>% str_remove("_n"),
      H = str_extract(base_name, "_H\\d+\\.\\d*") %>% str_remove("_H"),
      SD = str_extract(base_name, "SD\\d+(\\.\\d+)?"),
      SD = ifelse(is.na(SD), NA, str_remove(SD, "SD")),
      Gen = str_extract(base_name, "Gen\\d+"),
      Gen = ifelse(is.na(Gen), NA, str_remove(Gen, "Gen")),
      Genome = case_when(
        n == "1" ~ "Monogenic",
        n == "10" ~ "Oligogenic",
        n == "70" ~ "Polygenic 70",
        n == "100" ~ "Polygenic 100",
        n == "300" ~ "Polygenic 300",
        TRUE ~ "Unknown"
      )
    ) %>%
    mutate(
      n = as.numeric(n),
      H = as.numeric(H),
      SD = as.numeric(SD),
      Gen = as.numeric(Gen),
      param_combination = paste0("n_", n, "_H", H, 
                                 ifelse(!is.na(SD), paste0("_SD", SD), ""), 
                                 ifelse(!is.na(Gen), paste0("_Gen", Gen), ""))
    )
  
  # Set up parallel backend
  
  num_cores <- detectCores()
  cl <- makeCluster(max(1, num_cores - 16))
  registerDoParallel(cl)
  
  # Read and combine data from all replicate files in parallel
  combined_data_list <- foreach(i = seq_along(files_df$file_name), .packages = c("dplyr", "stringr")) %dopar% {
    file <- files_df$file_name[i]
    params <- files_df[i, ]
    df <- read.csv(file)
    data <- df %>%
      mutate(
        allele_id = as.factor(Position),
        generation = as.numeric(Generation),
        allele_frequency = Frequency,
        file = params$base_name,
        replct = params$replct,
        n = params$n,
        H = params$H,
        SD = params$SD,
        Gen = params$Gen,
        Genome = params$Genome,
        param_combination = params$param_combination
      ) %>%
      dplyr::select(allele_id, generation, allele_frequency, replct, n, H, SD, Gen, Genome, param_combination)
    data
  }
  combined_data <- bind_rows(combined_data_list)

  filtered_data <- combined_data # I wanted to filter based on some paranoia but it is not necessary here.
  
  # Calculate the mean allele frequency for each grouping
  mean_allele_data <- filtered_data %>%
    group_by(generation, n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(mean_allele_frequency = mean(allele_frequency), .groups = "drop")
  
  # Create time series objects
  ts_data_list <- mean_allele_data %>%
    group_by(n, replct, H, SD, Gen, Genome, param_combination) %>%
    summarize(ts_data = list(ts(mean_allele_frequency, start = min(generation), frequency = 1)), .groups = 'drop')
  
  # Compute spectral density estimates in parallel
  spec_results_list <- foreach(i = 1:nrow(ts_data_list), .packages = c("stats")) %dopar% {
    ts_data <- ts_data_list$ts_data[[i]]
    spectrum(ts_data, spans = spectrum_span, plot = FALSE)
  }
  
  # Prepare data for plotting
  plot_data_list <- foreach(i = seq_along(spec_results_list), .packages = c("dplyr", "stringr")) %dopar% {
    spec_result <- spec_results_list[[i]]
    params <- ts_data_list[i, ]
    period <- 1 / spec_result$freq
    data.frame(
      Period = period,
      Spectrum = spec_result$spec,
      n = params$n,
      replct = params$replct,
      H = params$H,
      SD = params$SD,
      Gen = params$Gen,
      Genome = params$Genome,
      param_combination = params$param_combination
    )
  }
  
  stopCluster(cl)
  
  # Combine all plot data
  plot_data <- bind_rows(plot_data_list)
  
  # Filter based on Period thresholds for each Gen value
  plot_data <- plot_data %>%
    group_by(param_combination) %>%
    mutate(threshold = case_when(
      Gen == 10 ~ 40,
      Gen == 20 ~ 50,
      Gen == 30 ~ 80,
      TRUE ~ 80
    )) %>%
    filter(Period < threshold) %>%
    ungroup() %>%
    mutate(
      Genome_Gen = paste0("Genome = ", Genome, " Gen = ", Gen),
      h2_sd = paste("H = ", H," ", "SD = ", SD, sep = ""),
      #H_label = paste0("H = ", H),
      #SD_label = ifelse(!is.na(SD), paste0("SD = ", SD), "No SD"),
      Gen_label = ifelse(!is.na(Gen), paste0("Gen = ", Gen), "No Gen"),
      n_label = paste0("n_", n)
    )
  
  fft_plots <- list()
  
  uni_genomegen <- unique(plot_data$Genome_Gen)
  
  
  
  for(genomegen in uni_genomegen){
    myplot_data <- plot_data %>% filter(Genome_Gen == genomegen)
  # Generate the spectral plots faceted by Genome, H, SD, and Gen
  fft_plots[[genomegen]] <- ggplot(myplot_data, aes(x = Period, y = Spectrum, color = replct, group = replct)) +
    geom_line(linewidth = 1.1) +
    facet_wrap( ~ h2_sd, scales = "free") +
    labs(x = "Period (Generations)", y = "Spectral Density") +
    mytheme
  }
  
  return(fft_plots)
}

```

```{r, fig.height = 12, fig.width = 8, echo=FALSE}
dirpath <- "../../../output.dir/Selection_Models/WF.dir/CS.dir/"
pattern <- "^genome"
result <- run_fft_analysis(dirpath, pattern, spectrum_span = 2)
# result[[15]]
```

#### 4.3.1. Monogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Mono_SA
#| fig-cap: "Figure: Monogenic spectral density plot across 30 replicates for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[1]), ncol = 1, label_size = 40, label_colour = "red"))
```



#### 4.3.2. Oligogenic

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Oligo_SA
#| fig-cap: "Figure: Oligogenic spectral density plot across 30 replicates for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[2]), ncol = 1, label_size = 40, label_colour = "red"))
```


#### 4.3.3. Polygenic 70

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_70_SA
#| fig-cap: "Figure: Polygenic (70 loci) spectral density plot across 30 replicates for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[3]), ncol = 1, label_size = 40, label_colour = "red"))
```


#### 4.3.4. Polygenic 100

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_100_SA
#| fig-cap: "Figure: Polygenic (100 loci) spectral density plot across 30 replicates for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[4]), ncol = 1, label_size = 40, label_colour = "red"))
```


#### 4.3.5. Polygenic 300

```{r, fig.height = 20, fig.width = 30, echo=FALSE}
#| label: Constant_Poly_300_SA
#| fig-cap: "Figure: Polygenic (300 loci) spectral density plot across 30 replicates for constant selection, showing parameter interactions."
#| fig-pos: "H"

library(cowplot)
#labels <- LETTERS[1:3]
print(plot_grid(plotlist = c(result[5]), ncol = 1, label_size = 40, label_colour = "red"))
```


