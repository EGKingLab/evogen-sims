---
title: "Untitled"
format: html
editor: visual
---

```{r}
############ Libraries and theme function ########
rm(list = ls())
library(tidyverse)
library(stringr)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
theme_set(theme_cowplot())
mytheme <- function(){
  theme(axis.title = element_text(face = "bold"),
        axis.text = element_text(face = "italic"),
        plot.title = element_text(hjust = 0.5)) #,legend.position = "none"
}

#################### Data Processing and plotting ###############

# The first part deals with constant and sinusoidal II
process_files <- function(dirpath, pattern, plot_type) {
  files <- list.files(dirpath, pattern, full.names = TRUE)
  
  dataframes <- list()
  for(file in files){
    replicate <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    data <- read.csv(file, header = TRUE) %>% 
      mutate(herit = herit, loci = loci, sd = sd,
             replicate = as.factor(replicate),
             h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
           loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""))
    
    
    # argument for linear and sinusoidal I selections
    
    if(!is.na(gen)) {
      data$gen <- rep(gen, nrow(data))
    }
    
    dataframes[[file]] <- data
  }
  combined_data <- bind_rows(dataframes)
  
  # plots for either linear or sinusoidal selections
  
  plots <- list()
  if (plot_type == "loci_gen") {
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (loci_gen_val in unique_loci_gens) {
      loci_gen_data <- combined_data %>%
        filter(loci_gen == loci_gen_val) %>%
       # group_by(Generation) %>%
        filter(Generation == 0 | Generation %% gen == 0)
        #summarise(Phenotype = mean(Phenotype, na.rm = TRUE))
      
      p <- ggplot(loci_gen_data, aes(x = Generation, y = Phenotype)) +
        geom_boxplot(aes(group = Generation), size = 0.5, varwidth = TRUE, alpha = 0.5) +
        #geom_line()+
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
      
      plots[[loci_gen_val]] <- p
    }
    
    # plots for constant or sinusoidal II selections
    
  } else if (plot_type == "loci") {
    loci <- unique(combined_data$loci)
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (locus in loci) {
        filter(loci_gen == loci_gen_val) %>%
       # group_by(Generation) %>%
        filter(Generation == 0 | Generation %% gen == 0)
        #summarise(Phenotype = mean(Phenotype, na.rm = TRUE))
      
      p <- ggplot(locus, aes(x = Generation, y = Phenotype)) +
        geom_boxplot(aes(group = Generation), size = 0.5, varwidth = TRUE, alpha = 0.5) +
        #geom_line()+
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
      
      plots[[loci_gen_val]] <- p
    }
  }
  
  return(list(combined_data = combined_data, plots = plots))
} # , Generation == 0 | Generation %% gen != 0

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n100_H0\\.(1|8)(SD(1|4))?(Gen(30))?\\.csv$"
result <- process_files(dirpath, pattern, "loci_gen")

# Print combined data to check h2_sd
print(result$combined_data)

# Now, let's try plotting again
result$plots

```

```{r}
# Load necessary libraries
library(tidyverse)
library(stringr)
library(cowplot)
library(purrr)
library(doParallel)

# Set the theme globally
theme_set(theme_cowplot())

# Define the custom theme function
mytheme <- function() {
  theme(
    axis.title = element_text(face = "bold"),
    axis.text = element_text(face = "italic"),
    plot.title = element_text(hjust = 0.5)
    # legend.position can be set to "none" here if needed
  )
}

# Define the function to process files and generate plots
process_files <- function(dirpath, pattern, plot_type) {
  # Get list of files
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  # Initialize list for storing data frames
  df_list <- list()
  
  # Loop through each file
  for (file in files) {
    # Extract metadata from file name
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    repl <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))  
    
    # Read data from file
    data <- read.csv(file, header = TRUE)
    
    # Add metadata to data frame
    data <- mutate(data, herit = herit, loci = loci, sd = sd, repl = repl,
                   h2_sd = paste("h2 =", herit, "sd =", sd),
                   loci_gen = paste("loci =", loci, "gen =", gen))
    
    # Add data frame to list
    df_list[[file]] <- data
  }
  
  # Combine all data frames into one
  combined_data <- bind_rows(df_list)
  
  # Initialize list for storing plots
  plots <- list()
  
  # Create plots based on the plot_type argument
  if (plot_type == "loci_gen") {
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (loci_gen_val in unique_loci_gens) {
      loci_gen_data <- combined_data %>%
        filter(loci_gen == loci_gen_val) %>%
       # group_by(Generation) %>%
        filter(Generation == 0 | Generation %% gen == 0)
        #summarise(Phenotype = mean(Phenotype, na.rm = TRUE))
      
      p <- ggplot(loci_gen_data, aes(x = Generation, y = Phenotype)) +
        geom_boxplot(aes(group = Generation), size = 0.5, varwidth = TRUE, alpha = 0.5) +
        #geom_line()+
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
      
      plots[[loci_gen_val]] <- p
    }
  }
  # Return the list of combined data and plots
  return(list(combined_data = combined_data, plots = plots))
 }


# Example usage of the function
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n1_H0\\.1(SD4)?(Gen30)?\\.csv$"
result <- process_files(dirpath, pattern, "loci_gen")
result$plots

```

```{r}
library(tidyverse)
library(stringr)

# Define directory path and file pattern
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes\\d+_n10+_H0.8SD4Gen30\\.csv$" # "^MeanPhenotypes(10|20)_n10_H0\\.(1|8)(SD(1|4))?(Gen(10|30))?\\.csv$"

# Get list of files
files <- list.files(dirpath, pattern = pattern, full.names = TRUE)

# Initialize list for storing data frames
df <- list()

# Loop through each file
for (file in files) {
  # Extract metadata from file name
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  repl <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))  
  
  # Read data from file
  data <- read.csv(file, header = TRUE)
  
  # Add metadata to data frame
  data <- mutate(data, herit = herit, loci = loci, sd = sd, repl = repl,
                 h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
                 loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""))
  
  # Add data frame to list
  df[[file]] <- data
}

# Combine all data frames into one
combined_data <- bind_rows(df)

```

```{r}
str(combined_data)
```

```{r}
# Initialize list for storing plots
  plots <- list()
  
    unique_loci_gens <- unique(combined_data$loci_gen)
    for (loci_gen_val in unique_loci_gens) {
      loci_gen_data <- combined_data %>%
        filter(loci_gen == loci_gen_val) %>%
       # group_by(Generation) %>%
        filter(Generation == 0 | Generation %% gen == 0)
        #summarise(Phenotype = mean(Phenotype, na.rm = TRUE))
      
      p <- ggplot(loci_gen_data, aes(x = Generation, y = Phenotype)) +
        geom_boxplot(aes(group = Generation), size = 0.5, varwidth = TRUE, alpha = 0.5) +
        #geom_line()+
        facet_wrap(~h2_sd, scales = "free_y") +
        mytheme()
      
      plots[[loci_gen_val]] <- p
    }
```

```{r, fig.width=8, fig.height=4}
plots
```

```{r}
plots <- list()
  if (plot_type == "loci_gen") {
    loci_gens <- unique(combined_data$loci_gen)
    for(loci_geni in loci_gens){
      locus_data <- combined_data %>% 
        filter(loci_gen == loci_geni)
      p <- locus_data %>% 
        ggplot(aes(Generation, Phenotype, group = repl))+
        geom_boxplot(linewidth = 0.1, alpha = 1)+
        facet_wrap(~h2_sd, ncol = 4, scales = "free_y")+
        theme_bw()
        #theme(legend.position = "none")
      plots[[loci_geni]] <- (p) #ggplotly
    }
    
    # plots for constant or sinusoidal II selections
    
  } else if (plot_type == "loci") {
    loci <- unique(combined_data$loci)
    for(locus in loci){
      locus_data <- combined_data %>% 
        filter(loci == locus)
      ggplot(locus_data, aes(Generation, Phenotype, group = repl)) +
        geom_boxplot() +
        facet_wrap(~h2_sd, ncol = 4, scales = "free_y") +
        theme_classic()
      plots[[locus]] <- (p) #ggplotly
    }
  }
  
  return(list(combined_data = combined_data, plots = plots))
}

```

```{r}
library(tidyverse)
library(stringr)

# Define directory path and file pattern
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^MeanPhenotypes(10|20)_n1_H0\\.(1)(SD(1))?(Gen(10))?\\.csv$"

# Function to process files
process_files <- function(dirpath, pattern, plot_type) {
  # Get list of files
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  # Initialize list for storing data frames
  df <- list()
  
  # Loop through each file
  for (file in files) {
    # Extract metadata from file name
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    repl <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    # Read data from file
    data <- read.csv(file, header = TRUE)
    
    # Add metadata to data frame
    data <- mutate(data, herit = herit, loci = loci, sd = sd, repl = repl,
                   h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
                   loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""))
    
    # Add data frame to list
    df[[file]] <- data
  }
  
  # Combine all data frames into one
  combined_data <- bind_rows(df) %>% 
    filter(Generation <=100)
  
  # Initialize list for storing plots
  plots <- list()
  
  if (plot_type == "loci_gen") {
    # Create plots for loci_gen
    loci_gens <- unique(combined_data$loci_gen)
    for (loci_geni in loci_gens) {
      locus_data <- combined_data %>% 
        filter(loci_gen == loci_geni)
      p <- ggplot(locus_data, aes(Generation, Phenotype, fill = factor(repl))) +
        geom_line(alpha = 0.5) +
        facet_wrap(~loci_geni, ncol = 2, scales = "free_y") +
        labs(title = loci_geni) +
        theme_bw()
      plots[[loci_geni]] <- p
    }
  }
  
  return(list(combined_data = combined_data, plots = plots))
}

# Specify plot type
plot_type <- "loci_gen"

# Process files and get result
result <- process_files(dirpath, pattern, plot_type)

# Print result
result$plots
```

```{r}
# Function to process files
process_files <- function(dirpath, pattern, plot_type) {
  # Get list of files
  files <- list.files(dirpath, pattern = pattern, full.names = TRUE)
  
  # Initialize list for storing data frames
  df <- list()
  
  # Loop through each file
  for (file in files) {
    # Extract metadata from file name
    herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
    loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
    sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
    repl <- as.numeric(str_extract(file, "(?<=MeanPhenotypes)\\d+"))
    gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))
    
    # Read data from file
    data <- read.csv(file, header = TRUE)
    
    # Add metadata to data frame
    data <- mutate(data, herit = herit, loci = loci, sd = sd, repl = repl,
                   h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
                   loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""))
    
    # Add data frame to list
    df[[file]] <- data
  }
  
  # Combine all data frames into one
  combined_data <- bind_rows(df)
  
  # # Calculate summary statistics for each generation
  # summary_stats <- combined_data %>%
  #   group_by(Generation, repl) %>%
  #   summarise(mean_phenotype = mean(Phenotype, na.rm = TRUE),
  #             sd_phenotype = sd(Phenotype, na.rm = TRUE),
  #             .groups = "drop")
  
  # Create plot
  p <- ggplot(summary_stats, aes(x = Generation, y = mean_phenotype, color = repl, group = repl)) +
    geom_line() +
    geom_errorbar(aes(ymin = mean_phenotype - sd_phenotype, ymax = mean_phenotype + sd_phenotype), width = 0.2) +
    theme_bw()
  
  return(list(combined_data = combined_data, plot = p))
}

# Specify plot type
plot_type <- "loci_gen"

# Process files and get result
result <- process_files(dirpath, pattern, plot_type)

# Print result
print(result$plot)

```
