---
title: "EffectCounts"
author: "Esdras T"
format: html
editor: visual
---

```{r, echo=FALSE, message=FALSE}
library(tidyverse)
library(plotly)
library(patchwork)
library(cowplot)
library(purrr)
library(doParallel)
theme_set(theme_cowplot())
mytheme <- function(){
  theme_set(theme_cowplot())+
    theme(axis.title = element_text(face = "bold"),
          axis.text = element_text(face = "italic"),
          plot.title = element_text(hjust = 0.5),
          legend.position = "none")
}
```

### Neutral Selection

```{r}
# Load the required library
library(patchwork)

# Define the directory path and pattern
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/NS.dir/"
pattern <- "^genome15_n(1|10|70)($|[^0-9])"

# List the files in the directory that match the pattern
files <- list.files(dirpath, pattern, full.names = TRUE)

# Create an empty list to store plots
plots <- list()

# Loop through genome files and create plots
for (genome_file in files) {
  # Read the data from the file
  df <- read.csv(genome_file) %>%
    select(Generation, Position, Frequency, Effect) %>% 
    group_by(Position) %>% 
    mutate(Position = factor(Position),
           herit = heritability,  # Changed from herit to heritability
           loci = Loci_n,  # Changed from loci to Loci_n
           initFreq = Frequency[Generation == 1],
           postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))

  # Extract the heritability and number of loci from the file name
  heritability <- as.numeric(str_extract(genome_file, "(?<=H0\\.)\\d+"))
  Loci_n <- as.numeric(str_extract(genome_file, "(?<=_n)\\d+"))

  # Create a ggplot and add it to the list of plots
  plot <- df %>%
    ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.2) +
    labs(x = "", y = "") +
    ylim(min = 0, max = 1)+
    mytheme()  # Make sure mytheme() is defined or loaded correctly
  plots[[genome_file]] <- plot  # Keep it as a ggplot object
}

# Combine the plots into a single plot grid
combined_plot <- wrap_plots(plots, ncol = 3)

# Convert the combined plot to a plotly object
combined_plot <- ggplotly(combined_plot)
combined_plot
```


```{rfig.width = 16, fig.height = 8}
#path <- "~/OneDrive - University of Missouri/Test_Test/LinFS.dir/Plots/"

plots <- list()
loci_gens <- unique(combined_data$loci_gen)
for(loci_geni in loci_gens){
  locus_data <- combined_data %>% 
    filter(loci_gen == loci_geni)
  plots[[loci_geni]] <- locus_data %>% 
    ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.2)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw()#+
    #theme(legend.position = "none")
  #plotname <- paste(path, "Allele_plot_for_loci ", locus, ".png", sep = "")
  #ggsave(filename = plotname, plot = plots[[locus]], width = 12, height = 8, units = "in")
}
plots
```


```{r}

# Create an empty list to store plots
plots <- list()

# Loop through genome files and create plots
for (genome_file in genome_files) {
  df <- read.csv(genome_file) %>%
    select(Generation, Position, Frequency) %>%
    mutate(Position = factor(Position))
  
  heritability <- as.numeric(str_extract(genome_file, "(?<=H0\\.)\\d+"))
  Loci_n <- as.numeric(str_extract(genome_file, "(?<=_n)\\d+"))
  
  # Create a ggplot and add it to the list of plots
  plots[[genome_file]] <- df %>%
    ggplot(aes(Generation, Frequency, color = Position)) +
    geom_line(linewidth = 0.2) +
    labs(x = "", y = "") +
    ylim(min = 0, max = 1)+
    #ggtitle(paste(Loci_n, "L", " for 0.", heritability, " H", sep = "")) +
    mytheme()  # Make sure mytheme() is defined or loaded correctly
}

# Combine the plots into a single plot grid
combined_plot <- wrap_plots(plots, ncol = 3)

# Print the combined plot
print(combined_plot)
```




### Fluctuating Selection

### Linear

```{r, warning=FALSE}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome15_n(1|2|3|4|5|6|7|8|9|10)($|[^0-9])" #"^genome15\\D" #(\\D|$)
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

data <- read.csv(file, header = TRUE) %>% 
  select(Generation, Position, Frequency, Effect) %>% 
  group_by(Position) %>% 
  mutate(Position = factor(Position),
         herit = herit,
         loci = loci, 
         sd = sd,
         gen = gen,
         initFreq = Frequency[Generation == 1])

dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
         postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
```

```{r, fig.width = 16, fig.height = 8}
#path <- "~/OneDrive - University of Missouri/Test_Test/LinFS.dir/Plots/"

plots <- list()
loci_gens <- unique(combined_data$loci_gen)
for(loci_geni in loci_gens){
  locus_data <- combined_data %>% 
    filter(loci_gen == loci_geni)
  plots[[loci_geni]] <- locus_data %>% 
    ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.2)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw()#+
    #theme(legend.position = "none")
  #plotname <- paste(path, "Allele_plot_for_loci ", locus, ".png", sep = "")
  #ggsave(filename = plotname, plot = plots[[locus]], width = 12, height = 8, units = "in")
}
plots
```
##### Sampling 10
```{r}
library(dplyr)
library(ggplot2)

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome15_n(300|70|100)($|[^0-9])"
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for (file in files) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

  data <- read.csv(file, header = TRUE) %>%
    select(Generation, Position, Frequency, Effect) %>%
    group_by(Position) %>%
    mutate(Position = factor(Position),
           herit = herit,
           loci = loci,
           sd = sd,
           gen = gen,
           initFreq = round(Frequency[Generation == 1], 3))

  dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>%
  mutate(h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""),
         postion_effect_init = paste("position = ", Position, " ", "Effect = ", round(Effect, 2), " ", "Initial Freq = ", round(initFreq, 2), sep = ""))

plots <- list()
loci_gens <- unique(combined_data$loci_gen)

set.seed(123)  # Set seed for reproducibility, you can choose any seed

for (loci_geni in loci_gens) {
  locus_data <- combined_data %>%
    filter(loci_gen == loci_geni) %>%
    group_by(Position) %>%
    sample_n(10, replace = FALSE)  # Select 10 random positions for each loci_gen group without replacement

  plots[[loci_geni]] <- locus_data %>%
    ggplot(aes(Generation, Frequency, group = postion_effect_init, 
               color = postion_effect_init, linetype = postion_effect_init)) +
    geom_line(linewidth = 0.2) +
    facet_wrap(~h2_sd, ncol = 4) +
    ylim(min = 0, max = 1) +
    theme(legend.position = "none")+
    theme_bw()
}
plots

```

#### Code optimization for effeciency

```{r}
library(data.table)
library(ggplot2)
library(future.apply)

# Set up parallel processing
plan(multisession)  # Use multisession for Windows compatibility, use multiprocess for Unix-based systems

dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/LinFS.dir/"
pattern <- "^genome15_n(300|70|100)($|[^0-9])"
files <- list.files(dirpath, pattern, full.names = TRUE)

# Read data once and process it using data.table
combined_data <- rbindlist(lapply(files, function(file) {
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

  data <- fread(file, header = TRUE)[, .(Generation, Position, Frequency, Effect)]

  data[, c('herit', 'loci', 'sd', 'gen', 'initFreq') := .(rep(herit, .N), rep(loci, .N), rep(sd, .N), rep(gen, .N), rep(Frequency[Generation == 1], .N))]

  data[, .(h2_sd = paste("h2 = ", herit, " ", "sd = ", sd, sep = ""),
           loci_gen = paste("loci = ", loci, " ", "gen = ", gen, sep = ""),
           postion_effect_init = paste("position = ", Position, " ", "Effect = ", round(Effect, 2), " ", "Initial Freq = ", round(initFreq, 2), sep = "")
  )]
}))

# Select 10 random positions for each loci_gen group
set.seed(123)
selected_positions <- combined_data[, sample(unique(Position), min(10, length(unique(Position)))), by = loci_gen]$V1

# Filter the combined_data based on selected_positions
combined_data <- combined_data[Position %in% selected_positions]

# Plot using parallel processing
plots <- future.apply::future_lapply(unique(combined_data$loci_gen), function(loci_geni) {
  locus_data <- combined_data[loci_gen == loci_geni]

  ggplot(locus_data, aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init)) +
    geom_line(linewidth = 0.2) +
    facet_wrap(~h2_sd, ncol = 4) +
    ylim(min = 0, max = 1) +
    theme_bw()
})

plots

```

### Sinusoidal I

```{r, warning=FALSE}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFS.dir/"
pattern <- "^genome15_n(1|2|3|4|5|6|7|8|9|10)($|[^0-9])" #"^genome15\\D" #(\\D|$)
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))
  gen <- as.numeric(str_extract(file, "(?<=Gen)\\d+"))

data <- read.csv(file, header = TRUE) %>% 
  select(Generation, Position, Frequency, Effect) %>% 
  group_by(Position) %>% 
  mutate(Position = factor(Position),
         herit = herit,
         loci = loci, 
         sd = sd,
         gen = gen,
         initFreq = Frequency[Generation == 1])

dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = ""),
         loci_gen = paste("loci = ", loci," ", "gen = ", gen, sep = ""),
         postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
```

```{r, fig.width = 16, fig.height = 8}
#path <- "~/OneDrive - University of Missouri/Test_Test/LinFS.dir/Plots/"

plots <- list()
loci_gens <- unique(combined_data$loci_gen)
for(loci_geni in loci_gens){
  locus_data <- combined_data %>% 
    filter(loci_gen == loci_geni)
  plots[[loci_geni]] <- locus_data %>% 
    ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    geom_line(linewidth = 0.2)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw()#+
    #theme(legend.position = "none")
  #plotname <- paste(path, "Allele_plot_for_loci ", locus, ".png", sep = "")
  #ggsave(filename = plotname, plot = plots[[locus]], width = 12, height = 8, units = "in")
}
plots
```

### Sinusoidal II

```{r, fig.width = 12, fig.height = 8}
dirpath <- "~/YeastProj.dir/evogen-sims/ET_Yeast/output.dir/Selection_Models/WF.dir/SinFSGen.dir/"
pattern <- "^genome(1|17|7|25)_n(1|2|3|4|5|6|7|8|9|10)($|[^0-9])" # ^genome(21|22|23|24|25|26|27|28|29|30)
files <- list.files(dirpath, pattern, full.names = TRUE)

dataframes <- list()
for(file in files){
  herit <- as.numeric(str_extract(file, "(?<=H)0\\.\\d+"))
  loci <- as.numeric(str_extract(file, "(?<=_n)\\d+"))
  sd <- as.numeric(str_extract(file, "(?<=SD)\\d+"))

data <- read.csv(file, header = TRUE) %>% 
  select(Generation, Position, Frequency, Effect) %>% 
  group_by(Position) %>% 
  mutate(Position = factor(Position),
          herit = herit,
         loci = loci, 
         sd = sd,
         initFreq = Frequency[Generation == 1])


dataframes[[file]] <- data
}

combined_data <- bind_rows(dataframes) %>% 
  mutate(h2_sd = paste("h2 = ", herit," ", "sd = ", sd, sep = " "),
         postion_effect_init = paste("position = ", Position," ","Effect = ", round(Effect, 2)," ", "Initial Freq = ", round(initFreq, 2) , sep = ""))
```

```{r, fig.width = 16, fig.height = 8}
#path <- "~/OneDrive - University of Missouri/Test_Test/SinFSGen.dir/Plots/"

plots <- list()
loci <- unique(combined_data$loci)

for(locus in loci){
  locus_data <- combined_data %>% 
    filter(loci == locus, Generation <= 2000)
  plots[[locus]] <- locus_data %>% 
    ggplot(aes(Generation, Frequency, group = postion_effect_init, color = postion_effect_init, linetype = postion_effect_init))+
    #geom_point(size = 0.2)+
    geom_line(linewidth = 0.2)+
    facet_wrap(~h2_sd, ncol = 4)+
    ylim(min = 0, max = 1)+
    theme_bw()#+
    #theme(legend.position = "none")
  #plotname <- paste(path, "Allele_plot_for_loci ", locus, ".png", sep = "")
  #ggsave(filename = plotname, plot = plots[[locus]], width = 12, height = 8, units = "in")
}
plots
```

```{r}
library(ggplot2)
library(dplyr)
library(plotly)

plots <- list()
loci <- unique(combined_data$loci)

for (locus in loci) {
  locus_data <- combined_data %>% 
    filter(loci == locus, Generation <= 2000)
  
  p <- locus_data %>% 
    ggplot(aes(Generation, Frequency, group = postion_effect_init, 
               color = postion_effect_init, linetype = postion_effect_init)) +
    geom_line(linewidth = 0.2) +
    facet_wrap(~h2_sd, ncol = 4) +
    ylim(min = 0, max = 1) +
    theme_bw()
  
  plots[[locus]] <- ggplotly(p, tooltip = "all")
}

plots

```

```{r, fig.width = 12, fig.height = 8}

#path <- "~/OneDrive - University of Missouri/Test_Test/SinFSGen.dir/Plots/"

plots <- list()
loci <- unique(combined_data$loci)

for(locus in loci){
  locus_data <- combined_data %>% 
    filter(loci == locus, Generation <= 2000)
  p <- plot_ly(locus_data, x = ~Frequency , y = ~Generation , z = ~initFreq, color = ~factor(postion_effect_init), type = "scatter3d", mode = "markers", marker = list(size = 2))
    
  plots[[locus]] <- p %>% layout(scene = list(yaxis = list(title = "Generation"),
                               xaxis = list(title = "Frequency"),
                               zaxis = list(title = "Initial Frequency")),
                  showlegend = TRUE, legend = list(font = list(size = 16), orientation = "v", x = 1.2, y = 0.5, bordercolor = "rgba(0, 0, 0, 0.5)",    # Set border color and opacity
    borderwidth = 1,  # Set border width
    traceorder = "normal",  # Set the order of legend items
    title = "Effect",  # Set legend title
    itemsizing = "trace" ))
}
plots
```

```{r, fig.width = 12, fig.height = 8}

plots <- list()
h2_sd_levels <- unique(combined_data$h2_sd)

for(h2_sd in h2_sd_levels) {
  h2_sd_data <- combined_data %>%
    filter(h2_sd == h2_sd, Generation <= 2000)
  
  for(locus in loci) {
    locus_data <- h2_sd_data %>%
      filter(loci == locus)
    
    p <- plot_ly(locus_data, x= ~Generation, y = ~initFreq, z = ~ Frequency, color = ~factor(Effect), type = "scatter3d", mode = "markers", marker = list(size = 2))
    p <- p %>% layout(scene = list(yaxis = list(title = "Initial Frequency"), xaxis = list(title = "Generation"), zaxis = list(title = "Frequency")), showlegend = TRUE, legend = list(font = list(size = 16), orientation = "v", x = 1.02, y = 0.5))
    
    plots[[paste(h2_sd, locus, sep = "_")]] <- p
  }
}

subplot(plots, nrows = length(h2_sd_levels), shareX = TRUE, shareY = TRUE)

```

```{r}
library(plotly)
library(dplyr)

plots <- list()
h2_sd_levels <- unique(combined_data$h2_sd)

for(h2_sd in h2_sd_levels) {
  h2_sd_data <- combined_data %>%
    filter(h2_sd == h2_sd, Generation <= 2000)
  
  for(locus in loci) {
    locus_data <- h2_sd_data %>%
      filter(loci == locus)
    
    p <- plot_ly(locus_data, x= ~Generation, y = ~initFreq, z = ~ Frequency, color = ~factor(Effect), type = "scatter3d", mode = "markers", marker = list(size = 2))
    p <- p %>% layout(scene = list(yaxis = list(title = "Initial Frequency"), xaxis = list(title = "Generation"), zaxis = list(title = "Frequency")), showlegend = TRUE, legend = list(font = list(size = 16), orientation = "v", x = 1.02, y = 0.5))
    
    plots[[paste(h2_sd, locus, sep = "_")]] <- p
  }
}

subplot(plots, nrows = length(h2_sd_levels), shareX = TRUE, shareY = TRUE)

```
